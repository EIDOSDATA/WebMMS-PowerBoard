
Web_MMS_Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006890  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000edc  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800782c  0800782c  00020364  2**0
                  CONTENTS
  4 .ARM          00000000  0800782c  0800782c  00020364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800782c  0800782c  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007830  08007830  00017830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  08007834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001084  20000364  08007b98  00020364  2**2
                  ALLOC
 10 ._user_heap_stack 00000300  200013e8  08007b98  000213e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   000228ea  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e70  00000000  00000000  00042c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001168  00000000  00000000  00047ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c52f  00000000  00000000  00048c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005f11  00000000  00000000  0005517f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0005b090  2**0
                  CONTENTS, READONLY
 18 .debug_loc    0000fad4  00000000  00000000  0005b10b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001c78  00000000  00000000  0006abe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00003948  00000000  00000000  0006c858  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000364 	.word	0x20000364
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006938 	.word	0x08006938

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000368 	.word	0x20000368
 8000104:	08006938 	.word	0x08006938

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uhi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5a09      	ldrh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 fa83 	bl	8000948 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 f9db 	bl	8000808 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fa75 	bl	8000948 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fa6b 	bl	8000948 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 f9fd 	bl	8000880 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 f9f3 	bl	8000880 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 f865 	bl	800158c <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f000 fd16 	bl	8000efc <__aeabi_dsub>
 80004d0:	f001 f85c 	bl	800158c <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_fmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	464e      	mov	r6, r9
 80004e8:	4657      	mov	r7, sl
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0243      	lsls	r3, r0, #9
 80004f2:	0a5b      	lsrs	r3, r3, #9
 80004f4:	0045      	lsls	r5, r0, #1
 80004f6:	b083      	sub	sp, #12
 80004f8:	1c0f      	adds	r7, r1, #0
 80004fa:	4699      	mov	r9, r3
 80004fc:	0e2d      	lsrs	r5, r5, #24
 80004fe:	0fc6      	lsrs	r6, r0, #31
 8000500:	2d00      	cmp	r5, #0
 8000502:	d057      	beq.n	80005b4 <__aeabi_fmul+0xd0>
 8000504:	2dff      	cmp	r5, #255	; 0xff
 8000506:	d024      	beq.n	8000552 <__aeabi_fmul+0x6e>
 8000508:	2080      	movs	r0, #128	; 0x80
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	04c0      	lsls	r0, r0, #19
 800050e:	4318      	orrs	r0, r3
 8000510:	2300      	movs	r3, #0
 8000512:	4681      	mov	r9, r0
 8000514:	469a      	mov	sl, r3
 8000516:	469b      	mov	fp, r3
 8000518:	3d7f      	subs	r5, #127	; 0x7f
 800051a:	027c      	lsls	r4, r7, #9
 800051c:	007a      	lsls	r2, r7, #1
 800051e:	0ffb      	lsrs	r3, r7, #31
 8000520:	0a64      	lsrs	r4, r4, #9
 8000522:	0e12      	lsrs	r2, r2, #24
 8000524:	4698      	mov	r8, r3
 8000526:	d023      	beq.n	8000570 <__aeabi_fmul+0x8c>
 8000528:	2aff      	cmp	r2, #255	; 0xff
 800052a:	d04b      	beq.n	80005c4 <__aeabi_fmul+0xe0>
 800052c:	00e3      	lsls	r3, r4, #3
 800052e:	2480      	movs	r4, #128	; 0x80
 8000530:	2000      	movs	r0, #0
 8000532:	04e4      	lsls	r4, r4, #19
 8000534:	3a7f      	subs	r2, #127	; 0x7f
 8000536:	431c      	orrs	r4, r3
 8000538:	18ad      	adds	r5, r5, r2
 800053a:	1c6b      	adds	r3, r5, #1
 800053c:	4647      	mov	r7, r8
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	4653      	mov	r3, sl
 8000542:	4077      	eors	r7, r6
 8000544:	003a      	movs	r2, r7
 8000546:	2b0f      	cmp	r3, #15
 8000548:	d848      	bhi.n	80005dc <__aeabi_fmul+0xf8>
 800054a:	497d      	ldr	r1, [pc, #500]	; (8000740 <__aeabi_fmul+0x25c>)
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	58cb      	ldr	r3, [r1, r3]
 8000550:	469f      	mov	pc, r3
 8000552:	2b00      	cmp	r3, #0
 8000554:	d000      	beq.n	8000558 <__aeabi_fmul+0x74>
 8000556:	e085      	b.n	8000664 <__aeabi_fmul+0x180>
 8000558:	3308      	adds	r3, #8
 800055a:	469a      	mov	sl, r3
 800055c:	3b06      	subs	r3, #6
 800055e:	469b      	mov	fp, r3
 8000560:	027c      	lsls	r4, r7, #9
 8000562:	007a      	lsls	r2, r7, #1
 8000564:	0ffb      	lsrs	r3, r7, #31
 8000566:	25ff      	movs	r5, #255	; 0xff
 8000568:	0a64      	lsrs	r4, r4, #9
 800056a:	0e12      	lsrs	r2, r2, #24
 800056c:	4698      	mov	r8, r3
 800056e:	d1db      	bne.n	8000528 <__aeabi_fmul+0x44>
 8000570:	2c00      	cmp	r4, #0
 8000572:	d000      	beq.n	8000576 <__aeabi_fmul+0x92>
 8000574:	e090      	b.n	8000698 <__aeabi_fmul+0x1b4>
 8000576:	4652      	mov	r2, sl
 8000578:	2301      	movs	r3, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4692      	mov	sl, r2
 800057e:	2001      	movs	r0, #1
 8000580:	e7db      	b.n	800053a <__aeabi_fmul+0x56>
 8000582:	464c      	mov	r4, r9
 8000584:	4658      	mov	r0, fp
 8000586:	0017      	movs	r7, r2
 8000588:	2802      	cmp	r0, #2
 800058a:	d024      	beq.n	80005d6 <__aeabi_fmul+0xf2>
 800058c:	2803      	cmp	r0, #3
 800058e:	d100      	bne.n	8000592 <__aeabi_fmul+0xae>
 8000590:	e0cf      	b.n	8000732 <__aeabi_fmul+0x24e>
 8000592:	2200      	movs	r2, #0
 8000594:	2300      	movs	r3, #0
 8000596:	2801      	cmp	r0, #1
 8000598:	d14d      	bne.n	8000636 <__aeabi_fmul+0x152>
 800059a:	0258      	lsls	r0, r3, #9
 800059c:	05d2      	lsls	r2, r2, #23
 800059e:	0a40      	lsrs	r0, r0, #9
 80005a0:	07ff      	lsls	r7, r7, #31
 80005a2:	4310      	orrs	r0, r2
 80005a4:	4338      	orrs	r0, r7
 80005a6:	b003      	add	sp, #12
 80005a8:	bc3c      	pop	{r2, r3, r4, r5}
 80005aa:	4690      	mov	r8, r2
 80005ac:	4699      	mov	r9, r3
 80005ae:	46a2      	mov	sl, r4
 80005b0:	46ab      	mov	fp, r5
 80005b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d15b      	bne.n	8000670 <__aeabi_fmul+0x18c>
 80005b8:	2304      	movs	r3, #4
 80005ba:	469a      	mov	sl, r3
 80005bc:	3b03      	subs	r3, #3
 80005be:	2500      	movs	r5, #0
 80005c0:	469b      	mov	fp, r3
 80005c2:	e7aa      	b.n	800051a <__aeabi_fmul+0x36>
 80005c4:	35ff      	adds	r5, #255	; 0xff
 80005c6:	2c00      	cmp	r4, #0
 80005c8:	d160      	bne.n	800068c <__aeabi_fmul+0x1a8>
 80005ca:	4652      	mov	r2, sl
 80005cc:	2302      	movs	r3, #2
 80005ce:	431a      	orrs	r2, r3
 80005d0:	4692      	mov	sl, r2
 80005d2:	2002      	movs	r0, #2
 80005d4:	e7b1      	b.n	800053a <__aeabi_fmul+0x56>
 80005d6:	22ff      	movs	r2, #255	; 0xff
 80005d8:	2300      	movs	r3, #0
 80005da:	e7de      	b.n	800059a <__aeabi_fmul+0xb6>
 80005dc:	464b      	mov	r3, r9
 80005de:	0c1b      	lsrs	r3, r3, #16
 80005e0:	469c      	mov	ip, r3
 80005e2:	464b      	mov	r3, r9
 80005e4:	0426      	lsls	r6, r4, #16
 80005e6:	0c36      	lsrs	r6, r6, #16
 80005e8:	0418      	lsls	r0, r3, #16
 80005ea:	4661      	mov	r1, ip
 80005ec:	0033      	movs	r3, r6
 80005ee:	0c22      	lsrs	r2, r4, #16
 80005f0:	4664      	mov	r4, ip
 80005f2:	0c00      	lsrs	r0, r0, #16
 80005f4:	4343      	muls	r3, r0
 80005f6:	434e      	muls	r6, r1
 80005f8:	4350      	muls	r0, r2
 80005fa:	4354      	muls	r4, r2
 80005fc:	1980      	adds	r0, r0, r6
 80005fe:	0c1a      	lsrs	r2, r3, #16
 8000600:	1812      	adds	r2, r2, r0
 8000602:	4296      	cmp	r6, r2
 8000604:	d903      	bls.n	800060e <__aeabi_fmul+0x12a>
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	0249      	lsls	r1, r1, #9
 800060a:	468c      	mov	ip, r1
 800060c:	4464      	add	r4, ip
 800060e:	041b      	lsls	r3, r3, #16
 8000610:	0c1b      	lsrs	r3, r3, #16
 8000612:	0410      	lsls	r0, r2, #16
 8000614:	18c0      	adds	r0, r0, r3
 8000616:	0183      	lsls	r3, r0, #6
 8000618:	1e5e      	subs	r6, r3, #1
 800061a:	41b3      	sbcs	r3, r6
 800061c:	0e80      	lsrs	r0, r0, #26
 800061e:	4318      	orrs	r0, r3
 8000620:	0c13      	lsrs	r3, r2, #16
 8000622:	191b      	adds	r3, r3, r4
 8000624:	019b      	lsls	r3, r3, #6
 8000626:	4303      	orrs	r3, r0
 8000628:	001c      	movs	r4, r3
 800062a:	0123      	lsls	r3, r4, #4
 800062c:	d579      	bpl.n	8000722 <__aeabi_fmul+0x23e>
 800062e:	2301      	movs	r3, #1
 8000630:	0862      	lsrs	r2, r4, #1
 8000632:	401c      	ands	r4, r3
 8000634:	4314      	orrs	r4, r2
 8000636:	9a01      	ldr	r2, [sp, #4]
 8000638:	327f      	adds	r2, #127	; 0x7f
 800063a:	2a00      	cmp	r2, #0
 800063c:	dd4d      	ble.n	80006da <__aeabi_fmul+0x1f6>
 800063e:	0763      	lsls	r3, r4, #29
 8000640:	d004      	beq.n	800064c <__aeabi_fmul+0x168>
 8000642:	230f      	movs	r3, #15
 8000644:	4023      	ands	r3, r4
 8000646:	2b04      	cmp	r3, #4
 8000648:	d000      	beq.n	800064c <__aeabi_fmul+0x168>
 800064a:	3404      	adds	r4, #4
 800064c:	0123      	lsls	r3, r4, #4
 800064e:	d503      	bpl.n	8000658 <__aeabi_fmul+0x174>
 8000650:	4b3c      	ldr	r3, [pc, #240]	; (8000744 <__aeabi_fmul+0x260>)
 8000652:	9a01      	ldr	r2, [sp, #4]
 8000654:	401c      	ands	r4, r3
 8000656:	3280      	adds	r2, #128	; 0x80
 8000658:	2afe      	cmp	r2, #254	; 0xfe
 800065a:	dcbc      	bgt.n	80005d6 <__aeabi_fmul+0xf2>
 800065c:	01a3      	lsls	r3, r4, #6
 800065e:	0a5b      	lsrs	r3, r3, #9
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	e79a      	b.n	800059a <__aeabi_fmul+0xb6>
 8000664:	230c      	movs	r3, #12
 8000666:	469a      	mov	sl, r3
 8000668:	3b09      	subs	r3, #9
 800066a:	25ff      	movs	r5, #255	; 0xff
 800066c:	469b      	mov	fp, r3
 800066e:	e754      	b.n	800051a <__aeabi_fmul+0x36>
 8000670:	0018      	movs	r0, r3
 8000672:	f001 f813 	bl	800169c <__clzsi2>
 8000676:	464a      	mov	r2, r9
 8000678:	1f43      	subs	r3, r0, #5
 800067a:	2576      	movs	r5, #118	; 0x76
 800067c:	409a      	lsls	r2, r3
 800067e:	2300      	movs	r3, #0
 8000680:	426d      	negs	r5, r5
 8000682:	4691      	mov	r9, r2
 8000684:	1a2d      	subs	r5, r5, r0
 8000686:	469a      	mov	sl, r3
 8000688:	469b      	mov	fp, r3
 800068a:	e746      	b.n	800051a <__aeabi_fmul+0x36>
 800068c:	4652      	mov	r2, sl
 800068e:	2303      	movs	r3, #3
 8000690:	431a      	orrs	r2, r3
 8000692:	4692      	mov	sl, r2
 8000694:	2003      	movs	r0, #3
 8000696:	e750      	b.n	800053a <__aeabi_fmul+0x56>
 8000698:	0020      	movs	r0, r4
 800069a:	f000 ffff 	bl	800169c <__clzsi2>
 800069e:	1f43      	subs	r3, r0, #5
 80006a0:	1a2d      	subs	r5, r5, r0
 80006a2:	409c      	lsls	r4, r3
 80006a4:	3d76      	subs	r5, #118	; 0x76
 80006a6:	2000      	movs	r0, #0
 80006a8:	e747      	b.n	800053a <__aeabi_fmul+0x56>
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	2700      	movs	r7, #0
 80006ae:	03db      	lsls	r3, r3, #15
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	e772      	b.n	800059a <__aeabi_fmul+0xb6>
 80006b4:	4642      	mov	r2, r8
 80006b6:	e766      	b.n	8000586 <__aeabi_fmul+0xa2>
 80006b8:	464c      	mov	r4, r9
 80006ba:	0032      	movs	r2, r6
 80006bc:	4658      	mov	r0, fp
 80006be:	e762      	b.n	8000586 <__aeabi_fmul+0xa2>
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	464a      	mov	r2, r9
 80006c4:	03db      	lsls	r3, r3, #15
 80006c6:	421a      	tst	r2, r3
 80006c8:	d022      	beq.n	8000710 <__aeabi_fmul+0x22c>
 80006ca:	421c      	tst	r4, r3
 80006cc:	d120      	bne.n	8000710 <__aeabi_fmul+0x22c>
 80006ce:	4323      	orrs	r3, r4
 80006d0:	025b      	lsls	r3, r3, #9
 80006d2:	0a5b      	lsrs	r3, r3, #9
 80006d4:	4647      	mov	r7, r8
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	e75f      	b.n	800059a <__aeabi_fmul+0xb6>
 80006da:	2301      	movs	r3, #1
 80006dc:	1a9a      	subs	r2, r3, r2
 80006de:	2a1b      	cmp	r2, #27
 80006e0:	dc21      	bgt.n	8000726 <__aeabi_fmul+0x242>
 80006e2:	0023      	movs	r3, r4
 80006e4:	9901      	ldr	r1, [sp, #4]
 80006e6:	40d3      	lsrs	r3, r2
 80006e8:	319e      	adds	r1, #158	; 0x9e
 80006ea:	408c      	lsls	r4, r1
 80006ec:	001a      	movs	r2, r3
 80006ee:	0023      	movs	r3, r4
 80006f0:	1e5c      	subs	r4, r3, #1
 80006f2:	41a3      	sbcs	r3, r4
 80006f4:	4313      	orrs	r3, r2
 80006f6:	075a      	lsls	r2, r3, #29
 80006f8:	d004      	beq.n	8000704 <__aeabi_fmul+0x220>
 80006fa:	220f      	movs	r2, #15
 80006fc:	401a      	ands	r2, r3
 80006fe:	2a04      	cmp	r2, #4
 8000700:	d000      	beq.n	8000704 <__aeabi_fmul+0x220>
 8000702:	3304      	adds	r3, #4
 8000704:	015a      	lsls	r2, r3, #5
 8000706:	d411      	bmi.n	800072c <__aeabi_fmul+0x248>
 8000708:	019b      	lsls	r3, r3, #6
 800070a:	0a5b      	lsrs	r3, r3, #9
 800070c:	2200      	movs	r2, #0
 800070e:	e744      	b.n	800059a <__aeabi_fmul+0xb6>
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	464a      	mov	r2, r9
 8000714:	03db      	lsls	r3, r3, #15
 8000716:	4313      	orrs	r3, r2
 8000718:	025b      	lsls	r3, r3, #9
 800071a:	0a5b      	lsrs	r3, r3, #9
 800071c:	0037      	movs	r7, r6
 800071e:	22ff      	movs	r2, #255	; 0xff
 8000720:	e73b      	b.n	800059a <__aeabi_fmul+0xb6>
 8000722:	9501      	str	r5, [sp, #4]
 8000724:	e787      	b.n	8000636 <__aeabi_fmul+0x152>
 8000726:	2200      	movs	r2, #0
 8000728:	2300      	movs	r3, #0
 800072a:	e736      	b.n	800059a <__aeabi_fmul+0xb6>
 800072c:	2201      	movs	r2, #1
 800072e:	2300      	movs	r3, #0
 8000730:	e733      	b.n	800059a <__aeabi_fmul+0xb6>
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	03db      	lsls	r3, r3, #15
 8000736:	4323      	orrs	r3, r4
 8000738:	025b      	lsls	r3, r3, #9
 800073a:	0a5b      	lsrs	r3, r3, #9
 800073c:	22ff      	movs	r2, #255	; 0xff
 800073e:	e72c      	b.n	800059a <__aeabi_fmul+0xb6>
 8000740:	08006950 	.word	0x08006950
 8000744:	f7ffffff 	.word	0xf7ffffff

08000748 <__aeabi_f2iz>:
 8000748:	0241      	lsls	r1, r0, #9
 800074a:	0042      	lsls	r2, r0, #1
 800074c:	0fc3      	lsrs	r3, r0, #31
 800074e:	0a49      	lsrs	r1, r1, #9
 8000750:	0e12      	lsrs	r2, r2, #24
 8000752:	2000      	movs	r0, #0
 8000754:	2a7e      	cmp	r2, #126	; 0x7e
 8000756:	d90d      	bls.n	8000774 <__aeabi_f2iz+0x2c>
 8000758:	2a9d      	cmp	r2, #157	; 0x9d
 800075a:	d80c      	bhi.n	8000776 <__aeabi_f2iz+0x2e>
 800075c:	2080      	movs	r0, #128	; 0x80
 800075e:	0400      	lsls	r0, r0, #16
 8000760:	4301      	orrs	r1, r0
 8000762:	2a95      	cmp	r2, #149	; 0x95
 8000764:	dc0a      	bgt.n	800077c <__aeabi_f2iz+0x34>
 8000766:	2096      	movs	r0, #150	; 0x96
 8000768:	1a82      	subs	r2, r0, r2
 800076a:	40d1      	lsrs	r1, r2
 800076c:	4248      	negs	r0, r1
 800076e:	2b00      	cmp	r3, #0
 8000770:	d100      	bne.n	8000774 <__aeabi_f2iz+0x2c>
 8000772:	0008      	movs	r0, r1
 8000774:	4770      	bx	lr
 8000776:	4a03      	ldr	r2, [pc, #12]	; (8000784 <__aeabi_f2iz+0x3c>)
 8000778:	1898      	adds	r0, r3, r2
 800077a:	e7fb      	b.n	8000774 <__aeabi_f2iz+0x2c>
 800077c:	3a96      	subs	r2, #150	; 0x96
 800077e:	4091      	lsls	r1, r2
 8000780:	e7f4      	b.n	800076c <__aeabi_f2iz+0x24>
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	7fffffff 	.word	0x7fffffff

08000788 <__aeabi_ui2f>:
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	1e04      	subs	r4, r0, #0
 800078c:	d034      	beq.n	80007f8 <__aeabi_ui2f+0x70>
 800078e:	f000 ff85 	bl	800169c <__clzsi2>
 8000792:	229e      	movs	r2, #158	; 0x9e
 8000794:	1a12      	subs	r2, r2, r0
 8000796:	2a96      	cmp	r2, #150	; 0x96
 8000798:	dc07      	bgt.n	80007aa <__aeabi_ui2f+0x22>
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	2808      	cmp	r0, #8
 800079e:	dd2e      	ble.n	80007fe <__aeabi_ui2f+0x76>
 80007a0:	3808      	subs	r0, #8
 80007a2:	4084      	lsls	r4, r0
 80007a4:	0260      	lsls	r0, r4, #9
 80007a6:	0a40      	lsrs	r0, r0, #9
 80007a8:	e021      	b.n	80007ee <__aeabi_ui2f+0x66>
 80007aa:	2a99      	cmp	r2, #153	; 0x99
 80007ac:	dd09      	ble.n	80007c2 <__aeabi_ui2f+0x3a>
 80007ae:	0003      	movs	r3, r0
 80007b0:	0021      	movs	r1, r4
 80007b2:	331b      	adds	r3, #27
 80007b4:	4099      	lsls	r1, r3
 80007b6:	1e4b      	subs	r3, r1, #1
 80007b8:	4199      	sbcs	r1, r3
 80007ba:	2305      	movs	r3, #5
 80007bc:	1a1b      	subs	r3, r3, r0
 80007be:	40dc      	lsrs	r4, r3
 80007c0:	430c      	orrs	r4, r1
 80007c2:	2805      	cmp	r0, #5
 80007c4:	dd01      	ble.n	80007ca <__aeabi_ui2f+0x42>
 80007c6:	1f43      	subs	r3, r0, #5
 80007c8:	409c      	lsls	r4, r3
 80007ca:	0023      	movs	r3, r4
 80007cc:	490d      	ldr	r1, [pc, #52]	; (8000804 <__aeabi_ui2f+0x7c>)
 80007ce:	400b      	ands	r3, r1
 80007d0:	0765      	lsls	r5, r4, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_ui2f+0x60>
 80007d4:	250f      	movs	r5, #15
 80007d6:	402c      	ands	r4, r5
 80007d8:	2c04      	cmp	r4, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_ui2f+0x60>
 80007dc:	3304      	adds	r3, #4
 80007de:	015c      	lsls	r4, r3, #5
 80007e0:	d502      	bpl.n	80007e8 <__aeabi_ui2f+0x60>
 80007e2:	229f      	movs	r2, #159	; 0x9f
 80007e4:	400b      	ands	r3, r1
 80007e6:	1a12      	subs	r2, r2, r0
 80007e8:	019b      	lsls	r3, r3, #6
 80007ea:	0a58      	lsrs	r0, r3, #9
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	0240      	lsls	r0, r0, #9
 80007f0:	05d2      	lsls	r2, r2, #23
 80007f2:	0a40      	lsrs	r0, r0, #9
 80007f4:	4310      	orrs	r0, r2
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	2200      	movs	r2, #0
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7f7      	b.n	80007ee <__aeabi_ui2f+0x66>
 80007fe:	0260      	lsls	r0, r4, #9
 8000800:	0a40      	lsrs	r0, r0, #9
 8000802:	e7f4      	b.n	80007ee <__aeabi_ui2f+0x66>
 8000804:	fbffffff 	.word	0xfbffffff

08000808 <__eqdf2>:
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	464f      	mov	r7, r9
 800080c:	4646      	mov	r6, r8
 800080e:	46d6      	mov	lr, sl
 8000810:	4684      	mov	ip, r0
 8000812:	b5c0      	push	{r6, r7, lr}
 8000814:	4680      	mov	r8, r0
 8000816:	4e19      	ldr	r6, [pc, #100]	; (800087c <__eqdf2+0x74>)
 8000818:	0318      	lsls	r0, r3, #12
 800081a:	030f      	lsls	r7, r1, #12
 800081c:	004d      	lsls	r5, r1, #1
 800081e:	0b00      	lsrs	r0, r0, #12
 8000820:	005c      	lsls	r4, r3, #1
 8000822:	4682      	mov	sl, r0
 8000824:	0b3f      	lsrs	r7, r7, #12
 8000826:	0d6d      	lsrs	r5, r5, #21
 8000828:	0fc9      	lsrs	r1, r1, #31
 800082a:	4691      	mov	r9, r2
 800082c:	0d64      	lsrs	r4, r4, #21
 800082e:	0fdb      	lsrs	r3, r3, #31
 8000830:	2001      	movs	r0, #1
 8000832:	42b5      	cmp	r5, r6
 8000834:	d00a      	beq.n	800084c <__eqdf2+0x44>
 8000836:	42b4      	cmp	r4, r6
 8000838:	d003      	beq.n	8000842 <__eqdf2+0x3a>
 800083a:	42a5      	cmp	r5, r4
 800083c:	d101      	bne.n	8000842 <__eqdf2+0x3a>
 800083e:	4557      	cmp	r7, sl
 8000840:	d00c      	beq.n	800085c <__eqdf2+0x54>
 8000842:	bc1c      	pop	{r2, r3, r4}
 8000844:	4690      	mov	r8, r2
 8000846:	4699      	mov	r9, r3
 8000848:	46a2      	mov	sl, r4
 800084a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800084c:	4666      	mov	r6, ip
 800084e:	433e      	orrs	r6, r7
 8000850:	d1f7      	bne.n	8000842 <__eqdf2+0x3a>
 8000852:	42ac      	cmp	r4, r5
 8000854:	d1f5      	bne.n	8000842 <__eqdf2+0x3a>
 8000856:	4654      	mov	r4, sl
 8000858:	4314      	orrs	r4, r2
 800085a:	d1f2      	bne.n	8000842 <__eqdf2+0x3a>
 800085c:	2001      	movs	r0, #1
 800085e:	45c8      	cmp	r8, r9
 8000860:	d1ef      	bne.n	8000842 <__eqdf2+0x3a>
 8000862:	4299      	cmp	r1, r3
 8000864:	d007      	beq.n	8000876 <__eqdf2+0x6e>
 8000866:	2d00      	cmp	r5, #0
 8000868:	d1eb      	bne.n	8000842 <__eqdf2+0x3a>
 800086a:	4663      	mov	r3, ip
 800086c:	431f      	orrs	r7, r3
 800086e:	0038      	movs	r0, r7
 8000870:	1e47      	subs	r7, r0, #1
 8000872:	41b8      	sbcs	r0, r7
 8000874:	e7e5      	b.n	8000842 <__eqdf2+0x3a>
 8000876:	2000      	movs	r0, #0
 8000878:	e7e3      	b.n	8000842 <__eqdf2+0x3a>
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	000007ff 	.word	0x000007ff

08000880 <__gedf2>:
 8000880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000882:	464f      	mov	r7, r9
 8000884:	4646      	mov	r6, r8
 8000886:	46d6      	mov	lr, sl
 8000888:	004d      	lsls	r5, r1, #1
 800088a:	b5c0      	push	{r6, r7, lr}
 800088c:	030e      	lsls	r6, r1, #12
 800088e:	0fc9      	lsrs	r1, r1, #31
 8000890:	468a      	mov	sl, r1
 8000892:	492c      	ldr	r1, [pc, #176]	; (8000944 <__gedf2+0xc4>)
 8000894:	031f      	lsls	r7, r3, #12
 8000896:	005c      	lsls	r4, r3, #1
 8000898:	4680      	mov	r8, r0
 800089a:	0b36      	lsrs	r6, r6, #12
 800089c:	0d6d      	lsrs	r5, r5, #21
 800089e:	4691      	mov	r9, r2
 80008a0:	0b3f      	lsrs	r7, r7, #12
 80008a2:	0d64      	lsrs	r4, r4, #21
 80008a4:	0fdb      	lsrs	r3, r3, #31
 80008a6:	428d      	cmp	r5, r1
 80008a8:	d01e      	beq.n	80008e8 <__gedf2+0x68>
 80008aa:	428c      	cmp	r4, r1
 80008ac:	d016      	beq.n	80008dc <__gedf2+0x5c>
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d11e      	bne.n	80008f0 <__gedf2+0x70>
 80008b2:	4330      	orrs	r0, r6
 80008b4:	4684      	mov	ip, r0
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d101      	bne.n	80008be <__gedf2+0x3e>
 80008ba:	433a      	orrs	r2, r7
 80008bc:	d023      	beq.n	8000906 <__gedf2+0x86>
 80008be:	4662      	mov	r2, ip
 80008c0:	2a00      	cmp	r2, #0
 80008c2:	d01a      	beq.n	80008fa <__gedf2+0x7a>
 80008c4:	459a      	cmp	sl, r3
 80008c6:	d029      	beq.n	800091c <__gedf2+0x9c>
 80008c8:	4651      	mov	r1, sl
 80008ca:	2002      	movs	r0, #2
 80008cc:	3901      	subs	r1, #1
 80008ce:	4008      	ands	r0, r1
 80008d0:	3801      	subs	r0, #1
 80008d2:	bc1c      	pop	{r2, r3, r4}
 80008d4:	4690      	mov	r8, r2
 80008d6:	4699      	mov	r9, r3
 80008d8:	46a2      	mov	sl, r4
 80008da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008dc:	0039      	movs	r1, r7
 80008de:	4311      	orrs	r1, r2
 80008e0:	d0e5      	beq.n	80008ae <__gedf2+0x2e>
 80008e2:	2002      	movs	r0, #2
 80008e4:	4240      	negs	r0, r0
 80008e6:	e7f4      	b.n	80008d2 <__gedf2+0x52>
 80008e8:	4330      	orrs	r0, r6
 80008ea:	d1fa      	bne.n	80008e2 <__gedf2+0x62>
 80008ec:	42ac      	cmp	r4, r5
 80008ee:	d00f      	beq.n	8000910 <__gedf2+0x90>
 80008f0:	2c00      	cmp	r4, #0
 80008f2:	d10f      	bne.n	8000914 <__gedf2+0x94>
 80008f4:	433a      	orrs	r2, r7
 80008f6:	d0e7      	beq.n	80008c8 <__gedf2+0x48>
 80008f8:	e00c      	b.n	8000914 <__gedf2+0x94>
 80008fa:	2201      	movs	r2, #1
 80008fc:	3b01      	subs	r3, #1
 80008fe:	4393      	bics	r3, r2
 8000900:	0018      	movs	r0, r3
 8000902:	3001      	adds	r0, #1
 8000904:	e7e5      	b.n	80008d2 <__gedf2+0x52>
 8000906:	4663      	mov	r3, ip
 8000908:	2000      	movs	r0, #0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0e1      	beq.n	80008d2 <__gedf2+0x52>
 800090e:	e7db      	b.n	80008c8 <__gedf2+0x48>
 8000910:	433a      	orrs	r2, r7
 8000912:	d1e6      	bne.n	80008e2 <__gedf2+0x62>
 8000914:	459a      	cmp	sl, r3
 8000916:	d1d7      	bne.n	80008c8 <__gedf2+0x48>
 8000918:	42a5      	cmp	r5, r4
 800091a:	dcd5      	bgt.n	80008c8 <__gedf2+0x48>
 800091c:	42a5      	cmp	r5, r4
 800091e:	db05      	blt.n	800092c <__gedf2+0xac>
 8000920:	42be      	cmp	r6, r7
 8000922:	d8d1      	bhi.n	80008c8 <__gedf2+0x48>
 8000924:	d008      	beq.n	8000938 <__gedf2+0xb8>
 8000926:	2000      	movs	r0, #0
 8000928:	42be      	cmp	r6, r7
 800092a:	d2d2      	bcs.n	80008d2 <__gedf2+0x52>
 800092c:	4650      	mov	r0, sl
 800092e:	2301      	movs	r3, #1
 8000930:	3801      	subs	r0, #1
 8000932:	4398      	bics	r0, r3
 8000934:	3001      	adds	r0, #1
 8000936:	e7cc      	b.n	80008d2 <__gedf2+0x52>
 8000938:	45c8      	cmp	r8, r9
 800093a:	d8c5      	bhi.n	80008c8 <__gedf2+0x48>
 800093c:	2000      	movs	r0, #0
 800093e:	45c8      	cmp	r8, r9
 8000940:	d3f4      	bcc.n	800092c <__gedf2+0xac>
 8000942:	e7c6      	b.n	80008d2 <__gedf2+0x52>
 8000944:	000007ff 	.word	0x000007ff

08000948 <__ledf2>:
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	464f      	mov	r7, r9
 800094c:	4646      	mov	r6, r8
 800094e:	46d6      	mov	lr, sl
 8000950:	004d      	lsls	r5, r1, #1
 8000952:	b5c0      	push	{r6, r7, lr}
 8000954:	030e      	lsls	r6, r1, #12
 8000956:	0fc9      	lsrs	r1, r1, #31
 8000958:	468a      	mov	sl, r1
 800095a:	492e      	ldr	r1, [pc, #184]	; (8000a14 <__ledf2+0xcc>)
 800095c:	031f      	lsls	r7, r3, #12
 800095e:	005c      	lsls	r4, r3, #1
 8000960:	4680      	mov	r8, r0
 8000962:	0b36      	lsrs	r6, r6, #12
 8000964:	0d6d      	lsrs	r5, r5, #21
 8000966:	4691      	mov	r9, r2
 8000968:	0b3f      	lsrs	r7, r7, #12
 800096a:	0d64      	lsrs	r4, r4, #21
 800096c:	0fdb      	lsrs	r3, r3, #31
 800096e:	428d      	cmp	r5, r1
 8000970:	d018      	beq.n	80009a4 <__ledf2+0x5c>
 8000972:	428c      	cmp	r4, r1
 8000974:	d011      	beq.n	800099a <__ledf2+0x52>
 8000976:	2d00      	cmp	r5, #0
 8000978:	d118      	bne.n	80009ac <__ledf2+0x64>
 800097a:	4330      	orrs	r0, r6
 800097c:	4684      	mov	ip, r0
 800097e:	2c00      	cmp	r4, #0
 8000980:	d11e      	bne.n	80009c0 <__ledf2+0x78>
 8000982:	433a      	orrs	r2, r7
 8000984:	d11c      	bne.n	80009c0 <__ledf2+0x78>
 8000986:	4663      	mov	r3, ip
 8000988:	2000      	movs	r0, #0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d030      	beq.n	80009f0 <__ledf2+0xa8>
 800098e:	4651      	mov	r1, sl
 8000990:	2002      	movs	r0, #2
 8000992:	3901      	subs	r1, #1
 8000994:	4008      	ands	r0, r1
 8000996:	3801      	subs	r0, #1
 8000998:	e02a      	b.n	80009f0 <__ledf2+0xa8>
 800099a:	0039      	movs	r1, r7
 800099c:	4311      	orrs	r1, r2
 800099e:	d0ea      	beq.n	8000976 <__ledf2+0x2e>
 80009a0:	2002      	movs	r0, #2
 80009a2:	e025      	b.n	80009f0 <__ledf2+0xa8>
 80009a4:	4330      	orrs	r0, r6
 80009a6:	d1fb      	bne.n	80009a0 <__ledf2+0x58>
 80009a8:	42ac      	cmp	r4, r5
 80009aa:	d026      	beq.n	80009fa <__ledf2+0xb2>
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	d126      	bne.n	80009fe <__ledf2+0xb6>
 80009b0:	433a      	orrs	r2, r7
 80009b2:	d124      	bne.n	80009fe <__ledf2+0xb6>
 80009b4:	4651      	mov	r1, sl
 80009b6:	2002      	movs	r0, #2
 80009b8:	3901      	subs	r1, #1
 80009ba:	4008      	ands	r0, r1
 80009bc:	3801      	subs	r0, #1
 80009be:	e017      	b.n	80009f0 <__ledf2+0xa8>
 80009c0:	4662      	mov	r2, ip
 80009c2:	2a00      	cmp	r2, #0
 80009c4:	d00f      	beq.n	80009e6 <__ledf2+0x9e>
 80009c6:	459a      	cmp	sl, r3
 80009c8:	d1e1      	bne.n	800098e <__ledf2+0x46>
 80009ca:	42a5      	cmp	r5, r4
 80009cc:	db05      	blt.n	80009da <__ledf2+0x92>
 80009ce:	42be      	cmp	r6, r7
 80009d0:	d8dd      	bhi.n	800098e <__ledf2+0x46>
 80009d2:	d019      	beq.n	8000a08 <__ledf2+0xc0>
 80009d4:	2000      	movs	r0, #0
 80009d6:	42be      	cmp	r6, r7
 80009d8:	d20a      	bcs.n	80009f0 <__ledf2+0xa8>
 80009da:	4650      	mov	r0, sl
 80009dc:	2301      	movs	r3, #1
 80009de:	3801      	subs	r0, #1
 80009e0:	4398      	bics	r0, r3
 80009e2:	3001      	adds	r0, #1
 80009e4:	e004      	b.n	80009f0 <__ledf2+0xa8>
 80009e6:	2201      	movs	r2, #1
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4393      	bics	r3, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	3001      	adds	r0, #1
 80009f0:	bc1c      	pop	{r2, r3, r4}
 80009f2:	4690      	mov	r8, r2
 80009f4:	4699      	mov	r9, r3
 80009f6:	46a2      	mov	sl, r4
 80009f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fa:	433a      	orrs	r2, r7
 80009fc:	d1d0      	bne.n	80009a0 <__ledf2+0x58>
 80009fe:	459a      	cmp	sl, r3
 8000a00:	d1c5      	bne.n	800098e <__ledf2+0x46>
 8000a02:	42a5      	cmp	r5, r4
 8000a04:	dcc3      	bgt.n	800098e <__ledf2+0x46>
 8000a06:	e7e0      	b.n	80009ca <__ledf2+0x82>
 8000a08:	45c8      	cmp	r8, r9
 8000a0a:	d8c0      	bhi.n	800098e <__ledf2+0x46>
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	45c8      	cmp	r8, r9
 8000a10:	d3e3      	bcc.n	80009da <__ledf2+0x92>
 8000a12:	e7ed      	b.n	80009f0 <__ledf2+0xa8>
 8000a14:	000007ff 	.word	0x000007ff

08000a18 <__aeabi_dmul>:
 8000a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1a:	4657      	mov	r7, sl
 8000a1c:	46de      	mov	lr, fp
 8000a1e:	464e      	mov	r6, r9
 8000a20:	4645      	mov	r5, r8
 8000a22:	b5e0      	push	{r5, r6, r7, lr}
 8000a24:	4683      	mov	fp, r0
 8000a26:	0006      	movs	r6, r0
 8000a28:	030f      	lsls	r7, r1, #12
 8000a2a:	0048      	lsls	r0, r1, #1
 8000a2c:	b087      	sub	sp, #28
 8000a2e:	4692      	mov	sl, r2
 8000a30:	001d      	movs	r5, r3
 8000a32:	0b3f      	lsrs	r7, r7, #12
 8000a34:	0d40      	lsrs	r0, r0, #21
 8000a36:	0fcc      	lsrs	r4, r1, #31
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dmul+0x26>
 8000a3c:	e06f      	b.n	8000b1e <__aeabi_dmul+0x106>
 8000a3e:	4bde      	ldr	r3, [pc, #888]	; (8000db8 <__aeabi_dmul+0x3a0>)
 8000a40:	4298      	cmp	r0, r3
 8000a42:	d038      	beq.n	8000ab6 <__aeabi_dmul+0x9e>
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	00ff      	lsls	r7, r7, #3
 8000a48:	041b      	lsls	r3, r3, #16
 8000a4a:	431f      	orrs	r7, r3
 8000a4c:	0f73      	lsrs	r3, r6, #29
 8000a4e:	433b      	orrs	r3, r7
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	4bda      	ldr	r3, [pc, #872]	; (8000dbc <__aeabi_dmul+0x3a4>)
 8000a54:	2700      	movs	r7, #0
 8000a56:	4699      	mov	r9, r3
 8000a58:	2300      	movs	r3, #0
 8000a5a:	469b      	mov	fp, r3
 8000a5c:	00f6      	lsls	r6, r6, #3
 8000a5e:	4481      	add	r9, r0
 8000a60:	032b      	lsls	r3, r5, #12
 8000a62:	0069      	lsls	r1, r5, #1
 8000a64:	0b1b      	lsrs	r3, r3, #12
 8000a66:	4652      	mov	r2, sl
 8000a68:	4698      	mov	r8, r3
 8000a6a:	0d49      	lsrs	r1, r1, #21
 8000a6c:	0fed      	lsrs	r5, r5, #31
 8000a6e:	2900      	cmp	r1, #0
 8000a70:	d100      	bne.n	8000a74 <__aeabi_dmul+0x5c>
 8000a72:	e085      	b.n	8000b80 <__aeabi_dmul+0x168>
 8000a74:	4bd0      	ldr	r3, [pc, #832]	; (8000db8 <__aeabi_dmul+0x3a0>)
 8000a76:	4299      	cmp	r1, r3
 8000a78:	d100      	bne.n	8000a7c <__aeabi_dmul+0x64>
 8000a7a:	e073      	b.n	8000b64 <__aeabi_dmul+0x14c>
 8000a7c:	4643      	mov	r3, r8
 8000a7e:	00da      	lsls	r2, r3, #3
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	041b      	lsls	r3, r3, #16
 8000a84:	4313      	orrs	r3, r2
 8000a86:	4652      	mov	r2, sl
 8000a88:	48cc      	ldr	r0, [pc, #816]	; (8000dbc <__aeabi_dmul+0x3a4>)
 8000a8a:	0f52      	lsrs	r2, r2, #29
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	4652      	mov	r2, sl
 8000a92:	2000      	movs	r0, #0
 8000a94:	4461      	add	r1, ip
 8000a96:	00d2      	lsls	r2, r2, #3
 8000a98:	4489      	add	r9, r1
 8000a9a:	0021      	movs	r1, r4
 8000a9c:	4069      	eors	r1, r5
 8000a9e:	9100      	str	r1, [sp, #0]
 8000aa0:	468c      	mov	ip, r1
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4449      	add	r1, r9
 8000aa6:	468a      	mov	sl, r1
 8000aa8:	2f0f      	cmp	r7, #15
 8000aaa:	d900      	bls.n	8000aae <__aeabi_dmul+0x96>
 8000aac:	e090      	b.n	8000bd0 <__aeabi_dmul+0x1b8>
 8000aae:	49c4      	ldr	r1, [pc, #784]	; (8000dc0 <__aeabi_dmul+0x3a8>)
 8000ab0:	00bf      	lsls	r7, r7, #2
 8000ab2:	59cf      	ldr	r7, [r1, r7]
 8000ab4:	46bf      	mov	pc, r7
 8000ab6:	465b      	mov	r3, fp
 8000ab8:	433b      	orrs	r3, r7
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_dmul+0xa8>
 8000abe:	e16a      	b.n	8000d96 <__aeabi_dmul+0x37e>
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	2708      	movs	r7, #8
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	4681      	mov	r9, r0
 8000ac8:	469b      	mov	fp, r3
 8000aca:	e7c9      	b.n	8000a60 <__aeabi_dmul+0x48>
 8000acc:	0032      	movs	r2, r6
 8000ace:	4658      	mov	r0, fp
 8000ad0:	9b01      	ldr	r3, [sp, #4]
 8000ad2:	4661      	mov	r1, ip
 8000ad4:	9100      	str	r1, [sp, #0]
 8000ad6:	2802      	cmp	r0, #2
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dmul+0xc4>
 8000ada:	e075      	b.n	8000bc8 <__aeabi_dmul+0x1b0>
 8000adc:	2803      	cmp	r0, #3
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dmul+0xca>
 8000ae0:	e1fe      	b.n	8000ee0 <__aeabi_dmul+0x4c8>
 8000ae2:	2801      	cmp	r0, #1
 8000ae4:	d000      	beq.n	8000ae8 <__aeabi_dmul+0xd0>
 8000ae6:	e12c      	b.n	8000d42 <__aeabi_dmul+0x32a>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2700      	movs	r7, #0
 8000aec:	2600      	movs	r6, #0
 8000aee:	2500      	movs	r5, #0
 8000af0:	033f      	lsls	r7, r7, #12
 8000af2:	0d2a      	lsrs	r2, r5, #20
 8000af4:	0b3f      	lsrs	r7, r7, #12
 8000af6:	48b3      	ldr	r0, [pc, #716]	; (8000dc4 <__aeabi_dmul+0x3ac>)
 8000af8:	0512      	lsls	r2, r2, #20
 8000afa:	433a      	orrs	r2, r7
 8000afc:	4002      	ands	r2, r0
 8000afe:	051b      	lsls	r3, r3, #20
 8000b00:	4313      	orrs	r3, r2
 8000b02:	9a00      	ldr	r2, [sp, #0]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	07d1      	lsls	r1, r2, #31
 8000b08:	085b      	lsrs	r3, r3, #1
 8000b0a:	430b      	orrs	r3, r1
 8000b0c:	0030      	movs	r0, r6
 8000b0e:	0019      	movs	r1, r3
 8000b10:	b007      	add	sp, #28
 8000b12:	bc3c      	pop	{r2, r3, r4, r5}
 8000b14:	4690      	mov	r8, r2
 8000b16:	4699      	mov	r9, r3
 8000b18:	46a2      	mov	sl, r4
 8000b1a:	46ab      	mov	fp, r5
 8000b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b1e:	465b      	mov	r3, fp
 8000b20:	433b      	orrs	r3, r7
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dmul+0x110>
 8000b26:	e12f      	b.n	8000d88 <__aeabi_dmul+0x370>
 8000b28:	2f00      	cmp	r7, #0
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dmul+0x116>
 8000b2c:	e1a5      	b.n	8000e7a <__aeabi_dmul+0x462>
 8000b2e:	0038      	movs	r0, r7
 8000b30:	f000 fdb4 	bl	800169c <__clzsi2>
 8000b34:	0003      	movs	r3, r0
 8000b36:	3b0b      	subs	r3, #11
 8000b38:	2b1c      	cmp	r3, #28
 8000b3a:	dd00      	ble.n	8000b3e <__aeabi_dmul+0x126>
 8000b3c:	e196      	b.n	8000e6c <__aeabi_dmul+0x454>
 8000b3e:	221d      	movs	r2, #29
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	465a      	mov	r2, fp
 8000b44:	0001      	movs	r1, r0
 8000b46:	40da      	lsrs	r2, r3
 8000b48:	465e      	mov	r6, fp
 8000b4a:	3908      	subs	r1, #8
 8000b4c:	408f      	lsls	r7, r1
 8000b4e:	0013      	movs	r3, r2
 8000b50:	408e      	lsls	r6, r1
 8000b52:	433b      	orrs	r3, r7
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	4b9c      	ldr	r3, [pc, #624]	; (8000dc8 <__aeabi_dmul+0x3b0>)
 8000b58:	2700      	movs	r7, #0
 8000b5a:	1a1b      	subs	r3, r3, r0
 8000b5c:	4699      	mov	r9, r3
 8000b5e:	2300      	movs	r3, #0
 8000b60:	469b      	mov	fp, r3
 8000b62:	e77d      	b.n	8000a60 <__aeabi_dmul+0x48>
 8000b64:	4641      	mov	r1, r8
 8000b66:	4653      	mov	r3, sl
 8000b68:	430b      	orrs	r3, r1
 8000b6a:	4993      	ldr	r1, [pc, #588]	; (8000db8 <__aeabi_dmul+0x3a0>)
 8000b6c:	468c      	mov	ip, r1
 8000b6e:	44e1      	add	r9, ip
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d000      	beq.n	8000b76 <__aeabi_dmul+0x15e>
 8000b74:	e11a      	b.n	8000dac <__aeabi_dmul+0x394>
 8000b76:	2202      	movs	r2, #2
 8000b78:	2002      	movs	r0, #2
 8000b7a:	4317      	orrs	r7, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e78c      	b.n	8000a9a <__aeabi_dmul+0x82>
 8000b80:	4313      	orrs	r3, r2
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dmul+0x16e>
 8000b84:	e10d      	b.n	8000da2 <__aeabi_dmul+0x38a>
 8000b86:	4643      	mov	r3, r8
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_dmul+0x176>
 8000b8c:	e181      	b.n	8000e92 <__aeabi_dmul+0x47a>
 8000b8e:	4640      	mov	r0, r8
 8000b90:	f000 fd84 	bl	800169c <__clzsi2>
 8000b94:	0002      	movs	r2, r0
 8000b96:	3a0b      	subs	r2, #11
 8000b98:	2a1c      	cmp	r2, #28
 8000b9a:	dd00      	ble.n	8000b9e <__aeabi_dmul+0x186>
 8000b9c:	e172      	b.n	8000e84 <__aeabi_dmul+0x46c>
 8000b9e:	0001      	movs	r1, r0
 8000ba0:	4643      	mov	r3, r8
 8000ba2:	3908      	subs	r1, #8
 8000ba4:	408b      	lsls	r3, r1
 8000ba6:	4698      	mov	r8, r3
 8000ba8:	231d      	movs	r3, #29
 8000baa:	1a9a      	subs	r2, r3, r2
 8000bac:	4653      	mov	r3, sl
 8000bae:	40d3      	lsrs	r3, r2
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	4643      	mov	r3, r8
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	4652      	mov	r2, sl
 8000bb8:	408a      	lsls	r2, r1
 8000bba:	4649      	mov	r1, r9
 8000bbc:	1a08      	subs	r0, r1, r0
 8000bbe:	4982      	ldr	r1, [pc, #520]	; (8000dc8 <__aeabi_dmul+0x3b0>)
 8000bc0:	4689      	mov	r9, r1
 8000bc2:	4481      	add	r9, r0
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	e768      	b.n	8000a9a <__aeabi_dmul+0x82>
 8000bc8:	4b7b      	ldr	r3, [pc, #492]	; (8000db8 <__aeabi_dmul+0x3a0>)
 8000bca:	2700      	movs	r7, #0
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e78e      	b.n	8000aee <__aeabi_dmul+0xd6>
 8000bd0:	0c14      	lsrs	r4, r2, #16
 8000bd2:	0412      	lsls	r2, r2, #16
 8000bd4:	0c12      	lsrs	r2, r2, #16
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0c37      	lsrs	r7, r6, #16
 8000bda:	0436      	lsls	r6, r6, #16
 8000bdc:	0c35      	lsrs	r5, r6, #16
 8000bde:	4379      	muls	r1, r7
 8000be0:	0028      	movs	r0, r5
 8000be2:	468c      	mov	ip, r1
 8000be4:	002e      	movs	r6, r5
 8000be6:	4360      	muls	r0, r4
 8000be8:	4460      	add	r0, ip
 8000bea:	4683      	mov	fp, r0
 8000bec:	4356      	muls	r6, r2
 8000bee:	0021      	movs	r1, r4
 8000bf0:	0c30      	lsrs	r0, r6, #16
 8000bf2:	4680      	mov	r8, r0
 8000bf4:	4658      	mov	r0, fp
 8000bf6:	4379      	muls	r1, r7
 8000bf8:	4440      	add	r0, r8
 8000bfa:	9102      	str	r1, [sp, #8]
 8000bfc:	4584      	cmp	ip, r0
 8000bfe:	d906      	bls.n	8000c0e <__aeabi_dmul+0x1f6>
 8000c00:	4688      	mov	r8, r1
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	0249      	lsls	r1, r1, #9
 8000c06:	468c      	mov	ip, r1
 8000c08:	44e0      	add	r8, ip
 8000c0a:	4641      	mov	r1, r8
 8000c0c:	9102      	str	r1, [sp, #8]
 8000c0e:	0436      	lsls	r6, r6, #16
 8000c10:	0c01      	lsrs	r1, r0, #16
 8000c12:	0c36      	lsrs	r6, r6, #16
 8000c14:	0400      	lsls	r0, r0, #16
 8000c16:	468b      	mov	fp, r1
 8000c18:	1981      	adds	r1, r0, r6
 8000c1a:	0c1e      	lsrs	r6, r3, #16
 8000c1c:	041b      	lsls	r3, r3, #16
 8000c1e:	0c1b      	lsrs	r3, r3, #16
 8000c20:	9103      	str	r1, [sp, #12]
 8000c22:	0019      	movs	r1, r3
 8000c24:	4379      	muls	r1, r7
 8000c26:	468c      	mov	ip, r1
 8000c28:	0028      	movs	r0, r5
 8000c2a:	4375      	muls	r5, r6
 8000c2c:	4465      	add	r5, ip
 8000c2e:	46a8      	mov	r8, r5
 8000c30:	4358      	muls	r0, r3
 8000c32:	0c05      	lsrs	r5, r0, #16
 8000c34:	4445      	add	r5, r8
 8000c36:	4377      	muls	r7, r6
 8000c38:	42a9      	cmp	r1, r5
 8000c3a:	d903      	bls.n	8000c44 <__aeabi_dmul+0x22c>
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	0249      	lsls	r1, r1, #9
 8000c40:	468c      	mov	ip, r1
 8000c42:	4467      	add	r7, ip
 8000c44:	0c29      	lsrs	r1, r5, #16
 8000c46:	468c      	mov	ip, r1
 8000c48:	0039      	movs	r1, r7
 8000c4a:	0400      	lsls	r0, r0, #16
 8000c4c:	0c00      	lsrs	r0, r0, #16
 8000c4e:	042d      	lsls	r5, r5, #16
 8000c50:	182d      	adds	r5, r5, r0
 8000c52:	4461      	add	r1, ip
 8000c54:	44ab      	add	fp, r5
 8000c56:	9105      	str	r1, [sp, #20]
 8000c58:	4659      	mov	r1, fp
 8000c5a:	9104      	str	r1, [sp, #16]
 8000c5c:	9901      	ldr	r1, [sp, #4]
 8000c5e:	040f      	lsls	r7, r1, #16
 8000c60:	0c3f      	lsrs	r7, r7, #16
 8000c62:	0c08      	lsrs	r0, r1, #16
 8000c64:	0039      	movs	r1, r7
 8000c66:	4351      	muls	r1, r2
 8000c68:	4342      	muls	r2, r0
 8000c6a:	4690      	mov	r8, r2
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	468c      	mov	ip, r1
 8000c70:	0c09      	lsrs	r1, r1, #16
 8000c72:	468b      	mov	fp, r1
 8000c74:	4362      	muls	r2, r4
 8000c76:	437c      	muls	r4, r7
 8000c78:	4444      	add	r4, r8
 8000c7a:	445c      	add	r4, fp
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	d903      	bls.n	8000c88 <__aeabi_dmul+0x270>
 8000c80:	2180      	movs	r1, #128	; 0x80
 8000c82:	0249      	lsls	r1, r1, #9
 8000c84:	4688      	mov	r8, r1
 8000c86:	4442      	add	r2, r8
 8000c88:	0c21      	lsrs	r1, r4, #16
 8000c8a:	4688      	mov	r8, r1
 8000c8c:	4661      	mov	r1, ip
 8000c8e:	0409      	lsls	r1, r1, #16
 8000c90:	0c09      	lsrs	r1, r1, #16
 8000c92:	468c      	mov	ip, r1
 8000c94:	0039      	movs	r1, r7
 8000c96:	4359      	muls	r1, r3
 8000c98:	4343      	muls	r3, r0
 8000c9a:	4370      	muls	r0, r6
 8000c9c:	437e      	muls	r6, r7
 8000c9e:	0c0f      	lsrs	r7, r1, #16
 8000ca0:	18f6      	adds	r6, r6, r3
 8000ca2:	0424      	lsls	r4, r4, #16
 8000ca4:	19be      	adds	r6, r7, r6
 8000ca6:	4464      	add	r4, ip
 8000ca8:	4442      	add	r2, r8
 8000caa:	468c      	mov	ip, r1
 8000cac:	42b3      	cmp	r3, r6
 8000cae:	d903      	bls.n	8000cb8 <__aeabi_dmul+0x2a0>
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	025b      	lsls	r3, r3, #9
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	4440      	add	r0, r8
 8000cb8:	9b02      	ldr	r3, [sp, #8]
 8000cba:	4661      	mov	r1, ip
 8000cbc:	4698      	mov	r8, r3
 8000cbe:	9b04      	ldr	r3, [sp, #16]
 8000cc0:	0437      	lsls	r7, r6, #16
 8000cc2:	4443      	add	r3, r8
 8000cc4:	469b      	mov	fp, r3
 8000cc6:	45ab      	cmp	fp, r5
 8000cc8:	41ad      	sbcs	r5, r5
 8000cca:	426b      	negs	r3, r5
 8000ccc:	040d      	lsls	r5, r1, #16
 8000cce:	9905      	ldr	r1, [sp, #20]
 8000cd0:	0c2d      	lsrs	r5, r5, #16
 8000cd2:	468c      	mov	ip, r1
 8000cd4:	197f      	adds	r7, r7, r5
 8000cd6:	4467      	add	r7, ip
 8000cd8:	18fd      	adds	r5, r7, r3
 8000cda:	46a8      	mov	r8, r5
 8000cdc:	465d      	mov	r5, fp
 8000cde:	192d      	adds	r5, r5, r4
 8000ce0:	42a5      	cmp	r5, r4
 8000ce2:	41a4      	sbcs	r4, r4
 8000ce4:	4693      	mov	fp, r2
 8000ce6:	4264      	negs	r4, r4
 8000ce8:	46a4      	mov	ip, r4
 8000cea:	44c3      	add	fp, r8
 8000cec:	44dc      	add	ip, fp
 8000cee:	428f      	cmp	r7, r1
 8000cf0:	41bf      	sbcs	r7, r7
 8000cf2:	4598      	cmp	r8, r3
 8000cf4:	419b      	sbcs	r3, r3
 8000cf6:	4593      	cmp	fp, r2
 8000cf8:	4192      	sbcs	r2, r2
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	41a4      	sbcs	r4, r4
 8000cfe:	425b      	negs	r3, r3
 8000d00:	427f      	negs	r7, r7
 8000d02:	431f      	orrs	r7, r3
 8000d04:	0c36      	lsrs	r6, r6, #16
 8000d06:	4252      	negs	r2, r2
 8000d08:	4264      	negs	r4, r4
 8000d0a:	19bf      	adds	r7, r7, r6
 8000d0c:	4322      	orrs	r2, r4
 8000d0e:	18bf      	adds	r7, r7, r2
 8000d10:	4662      	mov	r2, ip
 8000d12:	1838      	adds	r0, r7, r0
 8000d14:	0243      	lsls	r3, r0, #9
 8000d16:	0dd2      	lsrs	r2, r2, #23
 8000d18:	9903      	ldr	r1, [sp, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	026a      	lsls	r2, r5, #9
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	1e50      	subs	r0, r2, #1
 8000d22:	4182      	sbcs	r2, r0
 8000d24:	4661      	mov	r1, ip
 8000d26:	0ded      	lsrs	r5, r5, #23
 8000d28:	432a      	orrs	r2, r5
 8000d2a:	024e      	lsls	r6, r1, #9
 8000d2c:	4332      	orrs	r2, r6
 8000d2e:	01d9      	lsls	r1, r3, #7
 8000d30:	d400      	bmi.n	8000d34 <__aeabi_dmul+0x31c>
 8000d32:	e0b3      	b.n	8000e9c <__aeabi_dmul+0x484>
 8000d34:	2601      	movs	r6, #1
 8000d36:	0850      	lsrs	r0, r2, #1
 8000d38:	4032      	ands	r2, r6
 8000d3a:	4302      	orrs	r2, r0
 8000d3c:	07de      	lsls	r6, r3, #31
 8000d3e:	4332      	orrs	r2, r6
 8000d40:	085b      	lsrs	r3, r3, #1
 8000d42:	4c22      	ldr	r4, [pc, #136]	; (8000dcc <__aeabi_dmul+0x3b4>)
 8000d44:	4454      	add	r4, sl
 8000d46:	2c00      	cmp	r4, #0
 8000d48:	dd62      	ble.n	8000e10 <__aeabi_dmul+0x3f8>
 8000d4a:	0751      	lsls	r1, r2, #29
 8000d4c:	d009      	beq.n	8000d62 <__aeabi_dmul+0x34a>
 8000d4e:	200f      	movs	r0, #15
 8000d50:	4010      	ands	r0, r2
 8000d52:	2804      	cmp	r0, #4
 8000d54:	d005      	beq.n	8000d62 <__aeabi_dmul+0x34a>
 8000d56:	1d10      	adds	r0, r2, #4
 8000d58:	4290      	cmp	r0, r2
 8000d5a:	4192      	sbcs	r2, r2
 8000d5c:	4252      	negs	r2, r2
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	0002      	movs	r2, r0
 8000d62:	01d9      	lsls	r1, r3, #7
 8000d64:	d504      	bpl.n	8000d70 <__aeabi_dmul+0x358>
 8000d66:	2480      	movs	r4, #128	; 0x80
 8000d68:	4819      	ldr	r0, [pc, #100]	; (8000dd0 <__aeabi_dmul+0x3b8>)
 8000d6a:	00e4      	lsls	r4, r4, #3
 8000d6c:	4003      	ands	r3, r0
 8000d6e:	4454      	add	r4, sl
 8000d70:	4818      	ldr	r0, [pc, #96]	; (8000dd4 <__aeabi_dmul+0x3bc>)
 8000d72:	4284      	cmp	r4, r0
 8000d74:	dd00      	ble.n	8000d78 <__aeabi_dmul+0x360>
 8000d76:	e727      	b.n	8000bc8 <__aeabi_dmul+0x1b0>
 8000d78:	075e      	lsls	r6, r3, #29
 8000d7a:	025b      	lsls	r3, r3, #9
 8000d7c:	08d2      	lsrs	r2, r2, #3
 8000d7e:	0b1f      	lsrs	r7, r3, #12
 8000d80:	0563      	lsls	r3, r4, #21
 8000d82:	4316      	orrs	r6, r2
 8000d84:	0d5b      	lsrs	r3, r3, #21
 8000d86:	e6b2      	b.n	8000aee <__aeabi_dmul+0xd6>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4699      	mov	r9, r3
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	2704      	movs	r7, #4
 8000d90:	2600      	movs	r6, #0
 8000d92:	469b      	mov	fp, r3
 8000d94:	e664      	b.n	8000a60 <__aeabi_dmul+0x48>
 8000d96:	2303      	movs	r3, #3
 8000d98:	9701      	str	r7, [sp, #4]
 8000d9a:	4681      	mov	r9, r0
 8000d9c:	270c      	movs	r7, #12
 8000d9e:	469b      	mov	fp, r3
 8000da0:	e65e      	b.n	8000a60 <__aeabi_dmul+0x48>
 8000da2:	2201      	movs	r2, #1
 8000da4:	2001      	movs	r0, #1
 8000da6:	4317      	orrs	r7, r2
 8000da8:	2200      	movs	r2, #0
 8000daa:	e676      	b.n	8000a9a <__aeabi_dmul+0x82>
 8000dac:	2303      	movs	r3, #3
 8000dae:	2003      	movs	r0, #3
 8000db0:	431f      	orrs	r7, r3
 8000db2:	4643      	mov	r3, r8
 8000db4:	e671      	b.n	8000a9a <__aeabi_dmul+0x82>
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	000007ff 	.word	0x000007ff
 8000dbc:	fffffc01 	.word	0xfffffc01
 8000dc0:	08006990 	.word	0x08006990
 8000dc4:	800fffff 	.word	0x800fffff
 8000dc8:	fffffc0d 	.word	0xfffffc0d
 8000dcc:	000003ff 	.word	0x000003ff
 8000dd0:	feffffff 	.word	0xfeffffff
 8000dd4:	000007fe 	.word	0x000007fe
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2780      	movs	r7, #128	; 0x80
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	033f      	lsls	r7, r7, #12
 8000de0:	2600      	movs	r6, #0
 8000de2:	4b43      	ldr	r3, [pc, #268]	; (8000ef0 <__aeabi_dmul+0x4d8>)
 8000de4:	e683      	b.n	8000aee <__aeabi_dmul+0xd6>
 8000de6:	9b01      	ldr	r3, [sp, #4]
 8000de8:	0032      	movs	r2, r6
 8000dea:	46a4      	mov	ip, r4
 8000dec:	4658      	mov	r0, fp
 8000dee:	e670      	b.n	8000ad2 <__aeabi_dmul+0xba>
 8000df0:	46ac      	mov	ip, r5
 8000df2:	e66e      	b.n	8000ad2 <__aeabi_dmul+0xba>
 8000df4:	2780      	movs	r7, #128	; 0x80
 8000df6:	9901      	ldr	r1, [sp, #4]
 8000df8:	033f      	lsls	r7, r7, #12
 8000dfa:	4239      	tst	r1, r7
 8000dfc:	d02d      	beq.n	8000e5a <__aeabi_dmul+0x442>
 8000dfe:	423b      	tst	r3, r7
 8000e00:	d12b      	bne.n	8000e5a <__aeabi_dmul+0x442>
 8000e02:	431f      	orrs	r7, r3
 8000e04:	033f      	lsls	r7, r7, #12
 8000e06:	0b3f      	lsrs	r7, r7, #12
 8000e08:	9500      	str	r5, [sp, #0]
 8000e0a:	0016      	movs	r6, r2
 8000e0c:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <__aeabi_dmul+0x4d8>)
 8000e0e:	e66e      	b.n	8000aee <__aeabi_dmul+0xd6>
 8000e10:	2501      	movs	r5, #1
 8000e12:	1b2d      	subs	r5, r5, r4
 8000e14:	2d38      	cmp	r5, #56	; 0x38
 8000e16:	dd00      	ble.n	8000e1a <__aeabi_dmul+0x402>
 8000e18:	e666      	b.n	8000ae8 <__aeabi_dmul+0xd0>
 8000e1a:	2d1f      	cmp	r5, #31
 8000e1c:	dc40      	bgt.n	8000ea0 <__aeabi_dmul+0x488>
 8000e1e:	4835      	ldr	r0, [pc, #212]	; (8000ef4 <__aeabi_dmul+0x4dc>)
 8000e20:	001c      	movs	r4, r3
 8000e22:	4450      	add	r0, sl
 8000e24:	0016      	movs	r6, r2
 8000e26:	4082      	lsls	r2, r0
 8000e28:	4084      	lsls	r4, r0
 8000e2a:	40ee      	lsrs	r6, r5
 8000e2c:	1e50      	subs	r0, r2, #1
 8000e2e:	4182      	sbcs	r2, r0
 8000e30:	4334      	orrs	r4, r6
 8000e32:	4314      	orrs	r4, r2
 8000e34:	40eb      	lsrs	r3, r5
 8000e36:	0762      	lsls	r2, r4, #29
 8000e38:	d009      	beq.n	8000e4e <__aeabi_dmul+0x436>
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	4022      	ands	r2, r4
 8000e3e:	2a04      	cmp	r2, #4
 8000e40:	d005      	beq.n	8000e4e <__aeabi_dmul+0x436>
 8000e42:	0022      	movs	r2, r4
 8000e44:	1d14      	adds	r4, r2, #4
 8000e46:	4294      	cmp	r4, r2
 8000e48:	4180      	sbcs	r0, r0
 8000e4a:	4240      	negs	r0, r0
 8000e4c:	181b      	adds	r3, r3, r0
 8000e4e:	021a      	lsls	r2, r3, #8
 8000e50:	d53e      	bpl.n	8000ed0 <__aeabi_dmul+0x4b8>
 8000e52:	2301      	movs	r3, #1
 8000e54:	2700      	movs	r7, #0
 8000e56:	2600      	movs	r6, #0
 8000e58:	e649      	b.n	8000aee <__aeabi_dmul+0xd6>
 8000e5a:	2780      	movs	r7, #128	; 0x80
 8000e5c:	9b01      	ldr	r3, [sp, #4]
 8000e5e:	033f      	lsls	r7, r7, #12
 8000e60:	431f      	orrs	r7, r3
 8000e62:	033f      	lsls	r7, r7, #12
 8000e64:	0b3f      	lsrs	r7, r7, #12
 8000e66:	9400      	str	r4, [sp, #0]
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <__aeabi_dmul+0x4d8>)
 8000e6a:	e640      	b.n	8000aee <__aeabi_dmul+0xd6>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	465a      	mov	r2, fp
 8000e70:	3b28      	subs	r3, #40	; 0x28
 8000e72:	409a      	lsls	r2, r3
 8000e74:	2600      	movs	r6, #0
 8000e76:	9201      	str	r2, [sp, #4]
 8000e78:	e66d      	b.n	8000b56 <__aeabi_dmul+0x13e>
 8000e7a:	4658      	mov	r0, fp
 8000e7c:	f000 fc0e 	bl	800169c <__clzsi2>
 8000e80:	3020      	adds	r0, #32
 8000e82:	e657      	b.n	8000b34 <__aeabi_dmul+0x11c>
 8000e84:	0003      	movs	r3, r0
 8000e86:	4652      	mov	r2, sl
 8000e88:	3b28      	subs	r3, #40	; 0x28
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	2200      	movs	r2, #0
 8000e90:	e693      	b.n	8000bba <__aeabi_dmul+0x1a2>
 8000e92:	4650      	mov	r0, sl
 8000e94:	f000 fc02 	bl	800169c <__clzsi2>
 8000e98:	3020      	adds	r0, #32
 8000e9a:	e67b      	b.n	8000b94 <__aeabi_dmul+0x17c>
 8000e9c:	46ca      	mov	sl, r9
 8000e9e:	e750      	b.n	8000d42 <__aeabi_dmul+0x32a>
 8000ea0:	201f      	movs	r0, #31
 8000ea2:	001e      	movs	r6, r3
 8000ea4:	4240      	negs	r0, r0
 8000ea6:	1b04      	subs	r4, r0, r4
 8000ea8:	40e6      	lsrs	r6, r4
 8000eaa:	2d20      	cmp	r5, #32
 8000eac:	d003      	beq.n	8000eb6 <__aeabi_dmul+0x49e>
 8000eae:	4c12      	ldr	r4, [pc, #72]	; (8000ef8 <__aeabi_dmul+0x4e0>)
 8000eb0:	4454      	add	r4, sl
 8000eb2:	40a3      	lsls	r3, r4
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	1e50      	subs	r0, r2, #1
 8000eb8:	4182      	sbcs	r2, r0
 8000eba:	4332      	orrs	r2, r6
 8000ebc:	2607      	movs	r6, #7
 8000ebe:	2700      	movs	r7, #0
 8000ec0:	4016      	ands	r6, r2
 8000ec2:	d009      	beq.n	8000ed8 <__aeabi_dmul+0x4c0>
 8000ec4:	200f      	movs	r0, #15
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	4010      	ands	r0, r2
 8000eca:	0014      	movs	r4, r2
 8000ecc:	2804      	cmp	r0, #4
 8000ece:	d1b9      	bne.n	8000e44 <__aeabi_dmul+0x42c>
 8000ed0:	0022      	movs	r2, r4
 8000ed2:	075e      	lsls	r6, r3, #29
 8000ed4:	025b      	lsls	r3, r3, #9
 8000ed6:	0b1f      	lsrs	r7, r3, #12
 8000ed8:	08d2      	lsrs	r2, r2, #3
 8000eda:	4316      	orrs	r6, r2
 8000edc:	2300      	movs	r3, #0
 8000ede:	e606      	b.n	8000aee <__aeabi_dmul+0xd6>
 8000ee0:	2780      	movs	r7, #128	; 0x80
 8000ee2:	033f      	lsls	r7, r7, #12
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	033f      	lsls	r7, r7, #12
 8000ee8:	0b3f      	lsrs	r7, r7, #12
 8000eea:	0016      	movs	r6, r2
 8000eec:	4b00      	ldr	r3, [pc, #0]	; (8000ef0 <__aeabi_dmul+0x4d8>)
 8000eee:	e5fe      	b.n	8000aee <__aeabi_dmul+0xd6>
 8000ef0:	000007ff 	.word	0x000007ff
 8000ef4:	0000041e 	.word	0x0000041e
 8000ef8:	0000043e 	.word	0x0000043e

08000efc <__aeabi_dsub>:
 8000efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efe:	4657      	mov	r7, sl
 8000f00:	464e      	mov	r6, r9
 8000f02:	4645      	mov	r5, r8
 8000f04:	46de      	mov	lr, fp
 8000f06:	000c      	movs	r4, r1
 8000f08:	0309      	lsls	r1, r1, #12
 8000f0a:	b5e0      	push	{r5, r6, r7, lr}
 8000f0c:	0a49      	lsrs	r1, r1, #9
 8000f0e:	0f46      	lsrs	r6, r0, #29
 8000f10:	005f      	lsls	r7, r3, #1
 8000f12:	4331      	orrs	r1, r6
 8000f14:	031e      	lsls	r6, r3, #12
 8000f16:	0fdb      	lsrs	r3, r3, #31
 8000f18:	0a76      	lsrs	r6, r6, #9
 8000f1a:	469b      	mov	fp, r3
 8000f1c:	0f53      	lsrs	r3, r2, #29
 8000f1e:	4333      	orrs	r3, r6
 8000f20:	4ec8      	ldr	r6, [pc, #800]	; (8001244 <__aeabi_dsub+0x348>)
 8000f22:	0065      	lsls	r5, r4, #1
 8000f24:	00c0      	lsls	r0, r0, #3
 8000f26:	0fe4      	lsrs	r4, r4, #31
 8000f28:	00d2      	lsls	r2, r2, #3
 8000f2a:	0d6d      	lsrs	r5, r5, #21
 8000f2c:	46a2      	mov	sl, r4
 8000f2e:	4681      	mov	r9, r0
 8000f30:	0d7f      	lsrs	r7, r7, #21
 8000f32:	469c      	mov	ip, r3
 8000f34:	4690      	mov	r8, r2
 8000f36:	42b7      	cmp	r7, r6
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dsub+0x40>
 8000f3a:	e0b9      	b.n	80010b0 <__aeabi_dsub+0x1b4>
 8000f3c:	465b      	mov	r3, fp
 8000f3e:	2601      	movs	r6, #1
 8000f40:	4073      	eors	r3, r6
 8000f42:	469b      	mov	fp, r3
 8000f44:	1bee      	subs	r6, r5, r7
 8000f46:	45a3      	cmp	fp, r4
 8000f48:	d100      	bne.n	8000f4c <__aeabi_dsub+0x50>
 8000f4a:	e083      	b.n	8001054 <__aeabi_dsub+0x158>
 8000f4c:	2e00      	cmp	r6, #0
 8000f4e:	dd63      	ble.n	8001018 <__aeabi_dsub+0x11c>
 8000f50:	2f00      	cmp	r7, #0
 8000f52:	d000      	beq.n	8000f56 <__aeabi_dsub+0x5a>
 8000f54:	e0b1      	b.n	80010ba <__aeabi_dsub+0x1be>
 8000f56:	4663      	mov	r3, ip
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_dsub+0x62>
 8000f5c:	e123      	b.n	80011a6 <__aeabi_dsub+0x2aa>
 8000f5e:	1e73      	subs	r3, r6, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d000      	beq.n	8000f66 <__aeabi_dsub+0x6a>
 8000f64:	e1ba      	b.n	80012dc <__aeabi_dsub+0x3e0>
 8000f66:	1a86      	subs	r6, r0, r2
 8000f68:	4663      	mov	r3, ip
 8000f6a:	42b0      	cmp	r0, r6
 8000f6c:	4180      	sbcs	r0, r0
 8000f6e:	2501      	movs	r5, #1
 8000f70:	1ac9      	subs	r1, r1, r3
 8000f72:	4240      	negs	r0, r0
 8000f74:	1a09      	subs	r1, r1, r0
 8000f76:	020b      	lsls	r3, r1, #8
 8000f78:	d400      	bmi.n	8000f7c <__aeabi_dsub+0x80>
 8000f7a:	e147      	b.n	800120c <__aeabi_dsub+0x310>
 8000f7c:	0249      	lsls	r1, r1, #9
 8000f7e:	0a4b      	lsrs	r3, r1, #9
 8000f80:	4698      	mov	r8, r3
 8000f82:	4643      	mov	r3, r8
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dsub+0x8e>
 8000f88:	e189      	b.n	800129e <__aeabi_dsub+0x3a2>
 8000f8a:	4640      	mov	r0, r8
 8000f8c:	f000 fb86 	bl	800169c <__clzsi2>
 8000f90:	0003      	movs	r3, r0
 8000f92:	3b08      	subs	r3, #8
 8000f94:	2b1f      	cmp	r3, #31
 8000f96:	dd00      	ble.n	8000f9a <__aeabi_dsub+0x9e>
 8000f98:	e17c      	b.n	8001294 <__aeabi_dsub+0x398>
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	0030      	movs	r0, r6
 8000f9e:	1ad2      	subs	r2, r2, r3
 8000fa0:	4641      	mov	r1, r8
 8000fa2:	40d0      	lsrs	r0, r2
 8000fa4:	4099      	lsls	r1, r3
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	409e      	lsls	r6, r3
 8000faa:	430a      	orrs	r2, r1
 8000fac:	429d      	cmp	r5, r3
 8000fae:	dd00      	ble.n	8000fb2 <__aeabi_dsub+0xb6>
 8000fb0:	e16a      	b.n	8001288 <__aeabi_dsub+0x38c>
 8000fb2:	1b5d      	subs	r5, r3, r5
 8000fb4:	1c6b      	adds	r3, r5, #1
 8000fb6:	2b1f      	cmp	r3, #31
 8000fb8:	dd00      	ble.n	8000fbc <__aeabi_dsub+0xc0>
 8000fba:	e194      	b.n	80012e6 <__aeabi_dsub+0x3ea>
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	0035      	movs	r5, r6
 8000fc2:	1ac9      	subs	r1, r1, r3
 8000fc4:	408e      	lsls	r6, r1
 8000fc6:	40da      	lsrs	r2, r3
 8000fc8:	4088      	lsls	r0, r1
 8000fca:	40dd      	lsrs	r5, r3
 8000fcc:	1e71      	subs	r1, r6, #1
 8000fce:	418e      	sbcs	r6, r1
 8000fd0:	0011      	movs	r1, r2
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	4328      	orrs	r0, r5
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	4306      	orrs	r6, r0
 8000fda:	4032      	ands	r2, r6
 8000fdc:	2a00      	cmp	r2, #0
 8000fde:	d009      	beq.n	8000ff4 <__aeabi_dsub+0xf8>
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	4033      	ands	r3, r6
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d005      	beq.n	8000ff4 <__aeabi_dsub+0xf8>
 8000fe8:	1d33      	adds	r3, r6, #4
 8000fea:	42b3      	cmp	r3, r6
 8000fec:	41b6      	sbcs	r6, r6
 8000fee:	4276      	negs	r6, r6
 8000ff0:	1989      	adds	r1, r1, r6
 8000ff2:	001e      	movs	r6, r3
 8000ff4:	020b      	lsls	r3, r1, #8
 8000ff6:	d400      	bmi.n	8000ffa <__aeabi_dsub+0xfe>
 8000ff8:	e23d      	b.n	8001476 <__aeabi_dsub+0x57a>
 8000ffa:	1c6a      	adds	r2, r5, #1
 8000ffc:	4b91      	ldr	r3, [pc, #580]	; (8001244 <__aeabi_dsub+0x348>)
 8000ffe:	0555      	lsls	r5, r2, #21
 8001000:	0d6d      	lsrs	r5, r5, #21
 8001002:	429a      	cmp	r2, r3
 8001004:	d100      	bne.n	8001008 <__aeabi_dsub+0x10c>
 8001006:	e119      	b.n	800123c <__aeabi_dsub+0x340>
 8001008:	4a8f      	ldr	r2, [pc, #572]	; (8001248 <__aeabi_dsub+0x34c>)
 800100a:	08f6      	lsrs	r6, r6, #3
 800100c:	400a      	ands	r2, r1
 800100e:	0757      	lsls	r7, r2, #29
 8001010:	0252      	lsls	r2, r2, #9
 8001012:	4337      	orrs	r7, r6
 8001014:	0b12      	lsrs	r2, r2, #12
 8001016:	e09b      	b.n	8001150 <__aeabi_dsub+0x254>
 8001018:	2e00      	cmp	r6, #0
 800101a:	d000      	beq.n	800101e <__aeabi_dsub+0x122>
 800101c:	e0c5      	b.n	80011aa <__aeabi_dsub+0x2ae>
 800101e:	1c6e      	adds	r6, r5, #1
 8001020:	0576      	lsls	r6, r6, #21
 8001022:	0d76      	lsrs	r6, r6, #21
 8001024:	2e01      	cmp	r6, #1
 8001026:	dc00      	bgt.n	800102a <__aeabi_dsub+0x12e>
 8001028:	e148      	b.n	80012bc <__aeabi_dsub+0x3c0>
 800102a:	4667      	mov	r7, ip
 800102c:	1a86      	subs	r6, r0, r2
 800102e:	1bcb      	subs	r3, r1, r7
 8001030:	42b0      	cmp	r0, r6
 8001032:	41bf      	sbcs	r7, r7
 8001034:	427f      	negs	r7, r7
 8001036:	46b8      	mov	r8, r7
 8001038:	001f      	movs	r7, r3
 800103a:	4643      	mov	r3, r8
 800103c:	1aff      	subs	r7, r7, r3
 800103e:	003b      	movs	r3, r7
 8001040:	46b8      	mov	r8, r7
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	d500      	bpl.n	8001048 <__aeabi_dsub+0x14c>
 8001046:	e15f      	b.n	8001308 <__aeabi_dsub+0x40c>
 8001048:	4337      	orrs	r7, r6
 800104a:	d19a      	bne.n	8000f82 <__aeabi_dsub+0x86>
 800104c:	2200      	movs	r2, #0
 800104e:	2400      	movs	r4, #0
 8001050:	2500      	movs	r5, #0
 8001052:	e079      	b.n	8001148 <__aeabi_dsub+0x24c>
 8001054:	2e00      	cmp	r6, #0
 8001056:	dc00      	bgt.n	800105a <__aeabi_dsub+0x15e>
 8001058:	e0fa      	b.n	8001250 <__aeabi_dsub+0x354>
 800105a:	2f00      	cmp	r7, #0
 800105c:	d100      	bne.n	8001060 <__aeabi_dsub+0x164>
 800105e:	e08d      	b.n	800117c <__aeabi_dsub+0x280>
 8001060:	4b78      	ldr	r3, [pc, #480]	; (8001244 <__aeabi_dsub+0x348>)
 8001062:	429d      	cmp	r5, r3
 8001064:	d067      	beq.n	8001136 <__aeabi_dsub+0x23a>
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	4667      	mov	r7, ip
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	431f      	orrs	r7, r3
 800106e:	46bc      	mov	ip, r7
 8001070:	2e38      	cmp	r6, #56	; 0x38
 8001072:	dc00      	bgt.n	8001076 <__aeabi_dsub+0x17a>
 8001074:	e152      	b.n	800131c <__aeabi_dsub+0x420>
 8001076:	4663      	mov	r3, ip
 8001078:	4313      	orrs	r3, r2
 800107a:	1e5a      	subs	r2, r3, #1
 800107c:	4193      	sbcs	r3, r2
 800107e:	181e      	adds	r6, r3, r0
 8001080:	4286      	cmp	r6, r0
 8001082:	4180      	sbcs	r0, r0
 8001084:	4240      	negs	r0, r0
 8001086:	1809      	adds	r1, r1, r0
 8001088:	020b      	lsls	r3, r1, #8
 800108a:	d400      	bmi.n	800108e <__aeabi_dsub+0x192>
 800108c:	e0be      	b.n	800120c <__aeabi_dsub+0x310>
 800108e:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <__aeabi_dsub+0x348>)
 8001090:	3501      	adds	r5, #1
 8001092:	429d      	cmp	r5, r3
 8001094:	d100      	bne.n	8001098 <__aeabi_dsub+0x19c>
 8001096:	e0d2      	b.n	800123e <__aeabi_dsub+0x342>
 8001098:	4a6b      	ldr	r2, [pc, #428]	; (8001248 <__aeabi_dsub+0x34c>)
 800109a:	0873      	lsrs	r3, r6, #1
 800109c:	400a      	ands	r2, r1
 800109e:	2101      	movs	r1, #1
 80010a0:	400e      	ands	r6, r1
 80010a2:	431e      	orrs	r6, r3
 80010a4:	0851      	lsrs	r1, r2, #1
 80010a6:	07d3      	lsls	r3, r2, #31
 80010a8:	2207      	movs	r2, #7
 80010aa:	431e      	orrs	r6, r3
 80010ac:	4032      	ands	r2, r6
 80010ae:	e795      	b.n	8000fdc <__aeabi_dsub+0xe0>
 80010b0:	001e      	movs	r6, r3
 80010b2:	4316      	orrs	r6, r2
 80010b4:	d000      	beq.n	80010b8 <__aeabi_dsub+0x1bc>
 80010b6:	e745      	b.n	8000f44 <__aeabi_dsub+0x48>
 80010b8:	e740      	b.n	8000f3c <__aeabi_dsub+0x40>
 80010ba:	4b62      	ldr	r3, [pc, #392]	; (8001244 <__aeabi_dsub+0x348>)
 80010bc:	429d      	cmp	r5, r3
 80010be:	d03a      	beq.n	8001136 <__aeabi_dsub+0x23a>
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	4667      	mov	r7, ip
 80010c4:	041b      	lsls	r3, r3, #16
 80010c6:	431f      	orrs	r7, r3
 80010c8:	46bc      	mov	ip, r7
 80010ca:	2e38      	cmp	r6, #56	; 0x38
 80010cc:	dd00      	ble.n	80010d0 <__aeabi_dsub+0x1d4>
 80010ce:	e0eb      	b.n	80012a8 <__aeabi_dsub+0x3ac>
 80010d0:	2e1f      	cmp	r6, #31
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_dsub+0x1da>
 80010d4:	e13a      	b.n	800134c <__aeabi_dsub+0x450>
 80010d6:	0033      	movs	r3, r6
 80010d8:	4667      	mov	r7, ip
 80010da:	3b20      	subs	r3, #32
 80010dc:	40df      	lsrs	r7, r3
 80010de:	003b      	movs	r3, r7
 80010e0:	2e20      	cmp	r6, #32
 80010e2:	d005      	beq.n	80010f0 <__aeabi_dsub+0x1f4>
 80010e4:	2740      	movs	r7, #64	; 0x40
 80010e6:	1bbf      	subs	r7, r7, r6
 80010e8:	4666      	mov	r6, ip
 80010ea:	40be      	lsls	r6, r7
 80010ec:	4332      	orrs	r2, r6
 80010ee:	4690      	mov	r8, r2
 80010f0:	4646      	mov	r6, r8
 80010f2:	1e72      	subs	r2, r6, #1
 80010f4:	4196      	sbcs	r6, r2
 80010f6:	4333      	orrs	r3, r6
 80010f8:	e0da      	b.n	80012b0 <__aeabi_dsub+0x3b4>
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d100      	bne.n	8001100 <__aeabi_dsub+0x204>
 80010fe:	e214      	b.n	800152a <__aeabi_dsub+0x62e>
 8001100:	4663      	mov	r3, ip
 8001102:	4313      	orrs	r3, r2
 8001104:	d100      	bne.n	8001108 <__aeabi_dsub+0x20c>
 8001106:	e168      	b.n	80013da <__aeabi_dsub+0x4de>
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	074e      	lsls	r6, r1, #29
 800110c:	08c0      	lsrs	r0, r0, #3
 800110e:	08c9      	lsrs	r1, r1, #3
 8001110:	031b      	lsls	r3, r3, #12
 8001112:	4306      	orrs	r6, r0
 8001114:	4219      	tst	r1, r3
 8001116:	d008      	beq.n	800112a <__aeabi_dsub+0x22e>
 8001118:	4660      	mov	r0, ip
 800111a:	08c0      	lsrs	r0, r0, #3
 800111c:	4218      	tst	r0, r3
 800111e:	d104      	bne.n	800112a <__aeabi_dsub+0x22e>
 8001120:	4663      	mov	r3, ip
 8001122:	0001      	movs	r1, r0
 8001124:	08d2      	lsrs	r2, r2, #3
 8001126:	075e      	lsls	r6, r3, #29
 8001128:	4316      	orrs	r6, r2
 800112a:	00f3      	lsls	r3, r6, #3
 800112c:	4699      	mov	r9, r3
 800112e:	00c9      	lsls	r1, r1, #3
 8001130:	0f72      	lsrs	r2, r6, #29
 8001132:	4d44      	ldr	r5, [pc, #272]	; (8001244 <__aeabi_dsub+0x348>)
 8001134:	4311      	orrs	r1, r2
 8001136:	464b      	mov	r3, r9
 8001138:	08de      	lsrs	r6, r3, #3
 800113a:	4b42      	ldr	r3, [pc, #264]	; (8001244 <__aeabi_dsub+0x348>)
 800113c:	074f      	lsls	r7, r1, #29
 800113e:	4337      	orrs	r7, r6
 8001140:	08ca      	lsrs	r2, r1, #3
 8001142:	429d      	cmp	r5, r3
 8001144:	d100      	bne.n	8001148 <__aeabi_dsub+0x24c>
 8001146:	e06e      	b.n	8001226 <__aeabi_dsub+0x32a>
 8001148:	0312      	lsls	r2, r2, #12
 800114a:	056d      	lsls	r5, r5, #21
 800114c:	0b12      	lsrs	r2, r2, #12
 800114e:	0d6d      	lsrs	r5, r5, #21
 8001150:	2100      	movs	r1, #0
 8001152:	0312      	lsls	r2, r2, #12
 8001154:	0b13      	lsrs	r3, r2, #12
 8001156:	0d0a      	lsrs	r2, r1, #20
 8001158:	0512      	lsls	r2, r2, #20
 800115a:	431a      	orrs	r2, r3
 800115c:	4b3b      	ldr	r3, [pc, #236]	; (800124c <__aeabi_dsub+0x350>)
 800115e:	052d      	lsls	r5, r5, #20
 8001160:	4013      	ands	r3, r2
 8001162:	432b      	orrs	r3, r5
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	07e4      	lsls	r4, r4, #31
 8001168:	085b      	lsrs	r3, r3, #1
 800116a:	4323      	orrs	r3, r4
 800116c:	0038      	movs	r0, r7
 800116e:	0019      	movs	r1, r3
 8001170:	bc3c      	pop	{r2, r3, r4, r5}
 8001172:	4690      	mov	r8, r2
 8001174:	4699      	mov	r9, r3
 8001176:	46a2      	mov	sl, r4
 8001178:	46ab      	mov	fp, r5
 800117a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800117c:	4663      	mov	r3, ip
 800117e:	4313      	orrs	r3, r2
 8001180:	d011      	beq.n	80011a6 <__aeabi_dsub+0x2aa>
 8001182:	1e73      	subs	r3, r6, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d000      	beq.n	800118a <__aeabi_dsub+0x28e>
 8001188:	e107      	b.n	800139a <__aeabi_dsub+0x49e>
 800118a:	1886      	adds	r6, r0, r2
 800118c:	4286      	cmp	r6, r0
 800118e:	4180      	sbcs	r0, r0
 8001190:	4461      	add	r1, ip
 8001192:	4240      	negs	r0, r0
 8001194:	1809      	adds	r1, r1, r0
 8001196:	2501      	movs	r5, #1
 8001198:	020b      	lsls	r3, r1, #8
 800119a:	d537      	bpl.n	800120c <__aeabi_dsub+0x310>
 800119c:	2502      	movs	r5, #2
 800119e:	e77b      	b.n	8001098 <__aeabi_dsub+0x19c>
 80011a0:	003e      	movs	r6, r7
 80011a2:	4661      	mov	r1, ip
 80011a4:	4691      	mov	r9, r2
 80011a6:	0035      	movs	r5, r6
 80011a8:	e7c5      	b.n	8001136 <__aeabi_dsub+0x23a>
 80011aa:	465c      	mov	r4, fp
 80011ac:	2d00      	cmp	r5, #0
 80011ae:	d000      	beq.n	80011b2 <__aeabi_dsub+0x2b6>
 80011b0:	e0e1      	b.n	8001376 <__aeabi_dsub+0x47a>
 80011b2:	000b      	movs	r3, r1
 80011b4:	4303      	orrs	r3, r0
 80011b6:	d0f3      	beq.n	80011a0 <__aeabi_dsub+0x2a4>
 80011b8:	1c73      	adds	r3, r6, #1
 80011ba:	d100      	bne.n	80011be <__aeabi_dsub+0x2c2>
 80011bc:	e1ac      	b.n	8001518 <__aeabi_dsub+0x61c>
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <__aeabi_dsub+0x348>)
 80011c0:	429f      	cmp	r7, r3
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dsub+0x2ca>
 80011c4:	e13a      	b.n	800143c <__aeabi_dsub+0x540>
 80011c6:	43f3      	mvns	r3, r6
 80011c8:	2b38      	cmp	r3, #56	; 0x38
 80011ca:	dd00      	ble.n	80011ce <__aeabi_dsub+0x2d2>
 80011cc:	e16f      	b.n	80014ae <__aeabi_dsub+0x5b2>
 80011ce:	2b1f      	cmp	r3, #31
 80011d0:	dd00      	ble.n	80011d4 <__aeabi_dsub+0x2d8>
 80011d2:	e18c      	b.n	80014ee <__aeabi_dsub+0x5f2>
 80011d4:	2520      	movs	r5, #32
 80011d6:	000e      	movs	r6, r1
 80011d8:	1aed      	subs	r5, r5, r3
 80011da:	40ae      	lsls	r6, r5
 80011dc:	46b0      	mov	r8, r6
 80011de:	0006      	movs	r6, r0
 80011e0:	46aa      	mov	sl, r5
 80011e2:	40de      	lsrs	r6, r3
 80011e4:	4645      	mov	r5, r8
 80011e6:	4335      	orrs	r5, r6
 80011e8:	002e      	movs	r6, r5
 80011ea:	4655      	mov	r5, sl
 80011ec:	40d9      	lsrs	r1, r3
 80011ee:	40a8      	lsls	r0, r5
 80011f0:	4663      	mov	r3, ip
 80011f2:	1e45      	subs	r5, r0, #1
 80011f4:	41a8      	sbcs	r0, r5
 80011f6:	1a5b      	subs	r3, r3, r1
 80011f8:	469c      	mov	ip, r3
 80011fa:	4330      	orrs	r0, r6
 80011fc:	1a16      	subs	r6, r2, r0
 80011fe:	42b2      	cmp	r2, r6
 8001200:	4192      	sbcs	r2, r2
 8001202:	4663      	mov	r3, ip
 8001204:	4252      	negs	r2, r2
 8001206:	1a99      	subs	r1, r3, r2
 8001208:	003d      	movs	r5, r7
 800120a:	e6b4      	b.n	8000f76 <__aeabi_dsub+0x7a>
 800120c:	2207      	movs	r2, #7
 800120e:	4032      	ands	r2, r6
 8001210:	2a00      	cmp	r2, #0
 8001212:	d000      	beq.n	8001216 <__aeabi_dsub+0x31a>
 8001214:	e6e4      	b.n	8000fe0 <__aeabi_dsub+0xe4>
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <__aeabi_dsub+0x348>)
 8001218:	08f6      	lsrs	r6, r6, #3
 800121a:	074f      	lsls	r7, r1, #29
 800121c:	4337      	orrs	r7, r6
 800121e:	08ca      	lsrs	r2, r1, #3
 8001220:	429d      	cmp	r5, r3
 8001222:	d000      	beq.n	8001226 <__aeabi_dsub+0x32a>
 8001224:	e790      	b.n	8001148 <__aeabi_dsub+0x24c>
 8001226:	003b      	movs	r3, r7
 8001228:	4313      	orrs	r3, r2
 800122a:	d100      	bne.n	800122e <__aeabi_dsub+0x332>
 800122c:	e1a6      	b.n	800157c <__aeabi_dsub+0x680>
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	031b      	lsls	r3, r3, #12
 8001232:	431a      	orrs	r2, r3
 8001234:	0312      	lsls	r2, r2, #12
 8001236:	0b12      	lsrs	r2, r2, #12
 8001238:	4d02      	ldr	r5, [pc, #8]	; (8001244 <__aeabi_dsub+0x348>)
 800123a:	e789      	b.n	8001150 <__aeabi_dsub+0x254>
 800123c:	0015      	movs	r5, r2
 800123e:	2200      	movs	r2, #0
 8001240:	2700      	movs	r7, #0
 8001242:	e785      	b.n	8001150 <__aeabi_dsub+0x254>
 8001244:	000007ff 	.word	0x000007ff
 8001248:	ff7fffff 	.word	0xff7fffff
 800124c:	800fffff 	.word	0x800fffff
 8001250:	2e00      	cmp	r6, #0
 8001252:	d000      	beq.n	8001256 <__aeabi_dsub+0x35a>
 8001254:	e0c7      	b.n	80013e6 <__aeabi_dsub+0x4ea>
 8001256:	1c6b      	adds	r3, r5, #1
 8001258:	055e      	lsls	r6, r3, #21
 800125a:	0d76      	lsrs	r6, r6, #21
 800125c:	2e01      	cmp	r6, #1
 800125e:	dc00      	bgt.n	8001262 <__aeabi_dsub+0x366>
 8001260:	e0f0      	b.n	8001444 <__aeabi_dsub+0x548>
 8001262:	4dc8      	ldr	r5, [pc, #800]	; (8001584 <__aeabi_dsub+0x688>)
 8001264:	42ab      	cmp	r3, r5
 8001266:	d100      	bne.n	800126a <__aeabi_dsub+0x36e>
 8001268:	e0b9      	b.n	80013de <__aeabi_dsub+0x4e2>
 800126a:	1885      	adds	r5, r0, r2
 800126c:	000a      	movs	r2, r1
 800126e:	4285      	cmp	r5, r0
 8001270:	4189      	sbcs	r1, r1
 8001272:	4462      	add	r2, ip
 8001274:	4249      	negs	r1, r1
 8001276:	1851      	adds	r1, r2, r1
 8001278:	2207      	movs	r2, #7
 800127a:	07ce      	lsls	r6, r1, #31
 800127c:	086d      	lsrs	r5, r5, #1
 800127e:	432e      	orrs	r6, r5
 8001280:	0849      	lsrs	r1, r1, #1
 8001282:	4032      	ands	r2, r6
 8001284:	001d      	movs	r5, r3
 8001286:	e6a9      	b.n	8000fdc <__aeabi_dsub+0xe0>
 8001288:	49bf      	ldr	r1, [pc, #764]	; (8001588 <__aeabi_dsub+0x68c>)
 800128a:	1aed      	subs	r5, r5, r3
 800128c:	4011      	ands	r1, r2
 800128e:	2207      	movs	r2, #7
 8001290:	4032      	ands	r2, r6
 8001292:	e6a3      	b.n	8000fdc <__aeabi_dsub+0xe0>
 8001294:	0032      	movs	r2, r6
 8001296:	3828      	subs	r0, #40	; 0x28
 8001298:	4082      	lsls	r2, r0
 800129a:	2600      	movs	r6, #0
 800129c:	e686      	b.n	8000fac <__aeabi_dsub+0xb0>
 800129e:	0030      	movs	r0, r6
 80012a0:	f000 f9fc 	bl	800169c <__clzsi2>
 80012a4:	3020      	adds	r0, #32
 80012a6:	e673      	b.n	8000f90 <__aeabi_dsub+0x94>
 80012a8:	4663      	mov	r3, ip
 80012aa:	4313      	orrs	r3, r2
 80012ac:	1e5a      	subs	r2, r3, #1
 80012ae:	4193      	sbcs	r3, r2
 80012b0:	1ac6      	subs	r6, r0, r3
 80012b2:	42b0      	cmp	r0, r6
 80012b4:	4180      	sbcs	r0, r0
 80012b6:	4240      	negs	r0, r0
 80012b8:	1a09      	subs	r1, r1, r0
 80012ba:	e65c      	b.n	8000f76 <__aeabi_dsub+0x7a>
 80012bc:	000e      	movs	r6, r1
 80012be:	4667      	mov	r7, ip
 80012c0:	4306      	orrs	r6, r0
 80012c2:	4317      	orrs	r7, r2
 80012c4:	2d00      	cmp	r5, #0
 80012c6:	d15e      	bne.n	8001386 <__aeabi_dsub+0x48a>
 80012c8:	2e00      	cmp	r6, #0
 80012ca:	d000      	beq.n	80012ce <__aeabi_dsub+0x3d2>
 80012cc:	e0f3      	b.n	80014b6 <__aeabi_dsub+0x5ba>
 80012ce:	2f00      	cmp	r7, #0
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dsub+0x3d8>
 80012d2:	e11e      	b.n	8001512 <__aeabi_dsub+0x616>
 80012d4:	465c      	mov	r4, fp
 80012d6:	4661      	mov	r1, ip
 80012d8:	4691      	mov	r9, r2
 80012da:	e72c      	b.n	8001136 <__aeabi_dsub+0x23a>
 80012dc:	4fa9      	ldr	r7, [pc, #676]	; (8001584 <__aeabi_dsub+0x688>)
 80012de:	42be      	cmp	r6, r7
 80012e0:	d07b      	beq.n	80013da <__aeabi_dsub+0x4de>
 80012e2:	001e      	movs	r6, r3
 80012e4:	e6f1      	b.n	80010ca <__aeabi_dsub+0x1ce>
 80012e6:	0010      	movs	r0, r2
 80012e8:	3d1f      	subs	r5, #31
 80012ea:	40e8      	lsrs	r0, r5
 80012ec:	2b20      	cmp	r3, #32
 80012ee:	d003      	beq.n	80012f8 <__aeabi_dsub+0x3fc>
 80012f0:	2140      	movs	r1, #64	; 0x40
 80012f2:	1acb      	subs	r3, r1, r3
 80012f4:	409a      	lsls	r2, r3
 80012f6:	4316      	orrs	r6, r2
 80012f8:	1e73      	subs	r3, r6, #1
 80012fa:	419e      	sbcs	r6, r3
 80012fc:	2207      	movs	r2, #7
 80012fe:	4306      	orrs	r6, r0
 8001300:	4032      	ands	r2, r6
 8001302:	2100      	movs	r1, #0
 8001304:	2500      	movs	r5, #0
 8001306:	e783      	b.n	8001210 <__aeabi_dsub+0x314>
 8001308:	1a16      	subs	r6, r2, r0
 800130a:	4663      	mov	r3, ip
 800130c:	42b2      	cmp	r2, r6
 800130e:	4180      	sbcs	r0, r0
 8001310:	1a59      	subs	r1, r3, r1
 8001312:	4240      	negs	r0, r0
 8001314:	1a0b      	subs	r3, r1, r0
 8001316:	4698      	mov	r8, r3
 8001318:	465c      	mov	r4, fp
 800131a:	e632      	b.n	8000f82 <__aeabi_dsub+0x86>
 800131c:	2e1f      	cmp	r6, #31
 800131e:	dd00      	ble.n	8001322 <__aeabi_dsub+0x426>
 8001320:	e0ab      	b.n	800147a <__aeabi_dsub+0x57e>
 8001322:	2720      	movs	r7, #32
 8001324:	1bbb      	subs	r3, r7, r6
 8001326:	469a      	mov	sl, r3
 8001328:	4663      	mov	r3, ip
 800132a:	4657      	mov	r7, sl
 800132c:	40bb      	lsls	r3, r7
 800132e:	4699      	mov	r9, r3
 8001330:	0013      	movs	r3, r2
 8001332:	464f      	mov	r7, r9
 8001334:	40f3      	lsrs	r3, r6
 8001336:	431f      	orrs	r7, r3
 8001338:	003b      	movs	r3, r7
 800133a:	4657      	mov	r7, sl
 800133c:	40ba      	lsls	r2, r7
 800133e:	1e57      	subs	r7, r2, #1
 8001340:	41ba      	sbcs	r2, r7
 8001342:	4313      	orrs	r3, r2
 8001344:	4662      	mov	r2, ip
 8001346:	40f2      	lsrs	r2, r6
 8001348:	1889      	adds	r1, r1, r2
 800134a:	e698      	b.n	800107e <__aeabi_dsub+0x182>
 800134c:	2720      	movs	r7, #32
 800134e:	1bbb      	subs	r3, r7, r6
 8001350:	469a      	mov	sl, r3
 8001352:	4663      	mov	r3, ip
 8001354:	4657      	mov	r7, sl
 8001356:	40bb      	lsls	r3, r7
 8001358:	4699      	mov	r9, r3
 800135a:	0013      	movs	r3, r2
 800135c:	464f      	mov	r7, r9
 800135e:	40f3      	lsrs	r3, r6
 8001360:	431f      	orrs	r7, r3
 8001362:	003b      	movs	r3, r7
 8001364:	4657      	mov	r7, sl
 8001366:	40ba      	lsls	r2, r7
 8001368:	1e57      	subs	r7, r2, #1
 800136a:	41ba      	sbcs	r2, r7
 800136c:	4313      	orrs	r3, r2
 800136e:	4662      	mov	r2, ip
 8001370:	40f2      	lsrs	r2, r6
 8001372:	1a89      	subs	r1, r1, r2
 8001374:	e79c      	b.n	80012b0 <__aeabi_dsub+0x3b4>
 8001376:	4b83      	ldr	r3, [pc, #524]	; (8001584 <__aeabi_dsub+0x688>)
 8001378:	429f      	cmp	r7, r3
 800137a:	d05f      	beq.n	800143c <__aeabi_dsub+0x540>
 800137c:	2580      	movs	r5, #128	; 0x80
 800137e:	042d      	lsls	r5, r5, #16
 8001380:	4273      	negs	r3, r6
 8001382:	4329      	orrs	r1, r5
 8001384:	e720      	b.n	80011c8 <__aeabi_dsub+0x2cc>
 8001386:	2e00      	cmp	r6, #0
 8001388:	d10c      	bne.n	80013a4 <__aeabi_dsub+0x4a8>
 800138a:	2f00      	cmp	r7, #0
 800138c:	d100      	bne.n	8001390 <__aeabi_dsub+0x494>
 800138e:	e0d0      	b.n	8001532 <__aeabi_dsub+0x636>
 8001390:	465c      	mov	r4, fp
 8001392:	4661      	mov	r1, ip
 8001394:	4691      	mov	r9, r2
 8001396:	4d7b      	ldr	r5, [pc, #492]	; (8001584 <__aeabi_dsub+0x688>)
 8001398:	e6cd      	b.n	8001136 <__aeabi_dsub+0x23a>
 800139a:	4f7a      	ldr	r7, [pc, #488]	; (8001584 <__aeabi_dsub+0x688>)
 800139c:	42be      	cmp	r6, r7
 800139e:	d01c      	beq.n	80013da <__aeabi_dsub+0x4de>
 80013a0:	001e      	movs	r6, r3
 80013a2:	e665      	b.n	8001070 <__aeabi_dsub+0x174>
 80013a4:	2f00      	cmp	r7, #0
 80013a6:	d018      	beq.n	80013da <__aeabi_dsub+0x4de>
 80013a8:	08c0      	lsrs	r0, r0, #3
 80013aa:	074e      	lsls	r6, r1, #29
 80013ac:	4306      	orrs	r6, r0
 80013ae:	2080      	movs	r0, #128	; 0x80
 80013b0:	08c9      	lsrs	r1, r1, #3
 80013b2:	0300      	lsls	r0, r0, #12
 80013b4:	4201      	tst	r1, r0
 80013b6:	d008      	beq.n	80013ca <__aeabi_dsub+0x4ce>
 80013b8:	4663      	mov	r3, ip
 80013ba:	08dc      	lsrs	r4, r3, #3
 80013bc:	4204      	tst	r4, r0
 80013be:	d104      	bne.n	80013ca <__aeabi_dsub+0x4ce>
 80013c0:	0021      	movs	r1, r4
 80013c2:	46da      	mov	sl, fp
 80013c4:	08d2      	lsrs	r2, r2, #3
 80013c6:	075e      	lsls	r6, r3, #29
 80013c8:	4316      	orrs	r6, r2
 80013ca:	00f3      	lsls	r3, r6, #3
 80013cc:	4699      	mov	r9, r3
 80013ce:	2401      	movs	r4, #1
 80013d0:	4653      	mov	r3, sl
 80013d2:	00c9      	lsls	r1, r1, #3
 80013d4:	0f72      	lsrs	r2, r6, #29
 80013d6:	4311      	orrs	r1, r2
 80013d8:	401c      	ands	r4, r3
 80013da:	4d6a      	ldr	r5, [pc, #424]	; (8001584 <__aeabi_dsub+0x688>)
 80013dc:	e6ab      	b.n	8001136 <__aeabi_dsub+0x23a>
 80013de:	001d      	movs	r5, r3
 80013e0:	2200      	movs	r2, #0
 80013e2:	2700      	movs	r7, #0
 80013e4:	e6b4      	b.n	8001150 <__aeabi_dsub+0x254>
 80013e6:	2d00      	cmp	r5, #0
 80013e8:	d159      	bne.n	800149e <__aeabi_dsub+0x5a2>
 80013ea:	000b      	movs	r3, r1
 80013ec:	4303      	orrs	r3, r0
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dsub+0x4f6>
 80013f0:	e6d6      	b.n	80011a0 <__aeabi_dsub+0x2a4>
 80013f2:	1c73      	adds	r3, r6, #1
 80013f4:	d100      	bne.n	80013f8 <__aeabi_dsub+0x4fc>
 80013f6:	e0b2      	b.n	800155e <__aeabi_dsub+0x662>
 80013f8:	4b62      	ldr	r3, [pc, #392]	; (8001584 <__aeabi_dsub+0x688>)
 80013fa:	429f      	cmp	r7, r3
 80013fc:	d01e      	beq.n	800143c <__aeabi_dsub+0x540>
 80013fe:	43f3      	mvns	r3, r6
 8001400:	2b38      	cmp	r3, #56	; 0x38
 8001402:	dc6f      	bgt.n	80014e4 <__aeabi_dsub+0x5e8>
 8001404:	2b1f      	cmp	r3, #31
 8001406:	dd00      	ble.n	800140a <__aeabi_dsub+0x50e>
 8001408:	e097      	b.n	800153a <__aeabi_dsub+0x63e>
 800140a:	2520      	movs	r5, #32
 800140c:	000e      	movs	r6, r1
 800140e:	1aed      	subs	r5, r5, r3
 8001410:	40ae      	lsls	r6, r5
 8001412:	46b0      	mov	r8, r6
 8001414:	0006      	movs	r6, r0
 8001416:	46aa      	mov	sl, r5
 8001418:	40de      	lsrs	r6, r3
 800141a:	4645      	mov	r5, r8
 800141c:	4335      	orrs	r5, r6
 800141e:	002e      	movs	r6, r5
 8001420:	4655      	mov	r5, sl
 8001422:	40a8      	lsls	r0, r5
 8001424:	40d9      	lsrs	r1, r3
 8001426:	1e45      	subs	r5, r0, #1
 8001428:	41a8      	sbcs	r0, r5
 800142a:	448c      	add	ip, r1
 800142c:	4306      	orrs	r6, r0
 800142e:	18b6      	adds	r6, r6, r2
 8001430:	4296      	cmp	r6, r2
 8001432:	4192      	sbcs	r2, r2
 8001434:	4251      	negs	r1, r2
 8001436:	4461      	add	r1, ip
 8001438:	003d      	movs	r5, r7
 800143a:	e625      	b.n	8001088 <__aeabi_dsub+0x18c>
 800143c:	003d      	movs	r5, r7
 800143e:	4661      	mov	r1, ip
 8001440:	4691      	mov	r9, r2
 8001442:	e678      	b.n	8001136 <__aeabi_dsub+0x23a>
 8001444:	000b      	movs	r3, r1
 8001446:	4303      	orrs	r3, r0
 8001448:	2d00      	cmp	r5, #0
 800144a:	d000      	beq.n	800144e <__aeabi_dsub+0x552>
 800144c:	e655      	b.n	80010fa <__aeabi_dsub+0x1fe>
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f5      	beq.n	800143e <__aeabi_dsub+0x542>
 8001452:	4663      	mov	r3, ip
 8001454:	4313      	orrs	r3, r2
 8001456:	d100      	bne.n	800145a <__aeabi_dsub+0x55e>
 8001458:	e66d      	b.n	8001136 <__aeabi_dsub+0x23a>
 800145a:	1886      	adds	r6, r0, r2
 800145c:	4286      	cmp	r6, r0
 800145e:	4180      	sbcs	r0, r0
 8001460:	4461      	add	r1, ip
 8001462:	4240      	negs	r0, r0
 8001464:	1809      	adds	r1, r1, r0
 8001466:	2200      	movs	r2, #0
 8001468:	020b      	lsls	r3, r1, #8
 800146a:	d400      	bmi.n	800146e <__aeabi_dsub+0x572>
 800146c:	e6d0      	b.n	8001210 <__aeabi_dsub+0x314>
 800146e:	4b46      	ldr	r3, [pc, #280]	; (8001588 <__aeabi_dsub+0x68c>)
 8001470:	3501      	adds	r5, #1
 8001472:	4019      	ands	r1, r3
 8001474:	e5b2      	b.n	8000fdc <__aeabi_dsub+0xe0>
 8001476:	46b1      	mov	r9, r6
 8001478:	e65d      	b.n	8001136 <__aeabi_dsub+0x23a>
 800147a:	0033      	movs	r3, r6
 800147c:	4667      	mov	r7, ip
 800147e:	3b20      	subs	r3, #32
 8001480:	40df      	lsrs	r7, r3
 8001482:	003b      	movs	r3, r7
 8001484:	2e20      	cmp	r6, #32
 8001486:	d005      	beq.n	8001494 <__aeabi_dsub+0x598>
 8001488:	2740      	movs	r7, #64	; 0x40
 800148a:	1bbf      	subs	r7, r7, r6
 800148c:	4666      	mov	r6, ip
 800148e:	40be      	lsls	r6, r7
 8001490:	4332      	orrs	r2, r6
 8001492:	4690      	mov	r8, r2
 8001494:	4646      	mov	r6, r8
 8001496:	1e72      	subs	r2, r6, #1
 8001498:	4196      	sbcs	r6, r2
 800149a:	4333      	orrs	r3, r6
 800149c:	e5ef      	b.n	800107e <__aeabi_dsub+0x182>
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <__aeabi_dsub+0x688>)
 80014a0:	429f      	cmp	r7, r3
 80014a2:	d0cb      	beq.n	800143c <__aeabi_dsub+0x540>
 80014a4:	2580      	movs	r5, #128	; 0x80
 80014a6:	042d      	lsls	r5, r5, #16
 80014a8:	4273      	negs	r3, r6
 80014aa:	4329      	orrs	r1, r5
 80014ac:	e7a8      	b.n	8001400 <__aeabi_dsub+0x504>
 80014ae:	4308      	orrs	r0, r1
 80014b0:	1e41      	subs	r1, r0, #1
 80014b2:	4188      	sbcs	r0, r1
 80014b4:	e6a2      	b.n	80011fc <__aeabi_dsub+0x300>
 80014b6:	2f00      	cmp	r7, #0
 80014b8:	d100      	bne.n	80014bc <__aeabi_dsub+0x5c0>
 80014ba:	e63c      	b.n	8001136 <__aeabi_dsub+0x23a>
 80014bc:	4663      	mov	r3, ip
 80014be:	1a86      	subs	r6, r0, r2
 80014c0:	1acf      	subs	r7, r1, r3
 80014c2:	42b0      	cmp	r0, r6
 80014c4:	419b      	sbcs	r3, r3
 80014c6:	425b      	negs	r3, r3
 80014c8:	1afb      	subs	r3, r7, r3
 80014ca:	4698      	mov	r8, r3
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	d54e      	bpl.n	800156e <__aeabi_dsub+0x672>
 80014d0:	1a16      	subs	r6, r2, r0
 80014d2:	4663      	mov	r3, ip
 80014d4:	42b2      	cmp	r2, r6
 80014d6:	4192      	sbcs	r2, r2
 80014d8:	1a59      	subs	r1, r3, r1
 80014da:	4252      	negs	r2, r2
 80014dc:	1a89      	subs	r1, r1, r2
 80014de:	465c      	mov	r4, fp
 80014e0:	2200      	movs	r2, #0
 80014e2:	e57b      	b.n	8000fdc <__aeabi_dsub+0xe0>
 80014e4:	4301      	orrs	r1, r0
 80014e6:	000e      	movs	r6, r1
 80014e8:	1e71      	subs	r1, r6, #1
 80014ea:	418e      	sbcs	r6, r1
 80014ec:	e79f      	b.n	800142e <__aeabi_dsub+0x532>
 80014ee:	001d      	movs	r5, r3
 80014f0:	000e      	movs	r6, r1
 80014f2:	3d20      	subs	r5, #32
 80014f4:	40ee      	lsrs	r6, r5
 80014f6:	46b0      	mov	r8, r6
 80014f8:	2b20      	cmp	r3, #32
 80014fa:	d004      	beq.n	8001506 <__aeabi_dsub+0x60a>
 80014fc:	2540      	movs	r5, #64	; 0x40
 80014fe:	1aeb      	subs	r3, r5, r3
 8001500:	4099      	lsls	r1, r3
 8001502:	4308      	orrs	r0, r1
 8001504:	4681      	mov	r9, r0
 8001506:	4648      	mov	r0, r9
 8001508:	4643      	mov	r3, r8
 800150a:	1e41      	subs	r1, r0, #1
 800150c:	4188      	sbcs	r0, r1
 800150e:	4318      	orrs	r0, r3
 8001510:	e674      	b.n	80011fc <__aeabi_dsub+0x300>
 8001512:	2200      	movs	r2, #0
 8001514:	2400      	movs	r4, #0
 8001516:	e617      	b.n	8001148 <__aeabi_dsub+0x24c>
 8001518:	1a16      	subs	r6, r2, r0
 800151a:	4663      	mov	r3, ip
 800151c:	42b2      	cmp	r2, r6
 800151e:	4192      	sbcs	r2, r2
 8001520:	1a59      	subs	r1, r3, r1
 8001522:	4252      	negs	r2, r2
 8001524:	1a89      	subs	r1, r1, r2
 8001526:	003d      	movs	r5, r7
 8001528:	e525      	b.n	8000f76 <__aeabi_dsub+0x7a>
 800152a:	4661      	mov	r1, ip
 800152c:	4691      	mov	r9, r2
 800152e:	4d15      	ldr	r5, [pc, #84]	; (8001584 <__aeabi_dsub+0x688>)
 8001530:	e601      	b.n	8001136 <__aeabi_dsub+0x23a>
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	2400      	movs	r4, #0
 8001536:	0312      	lsls	r2, r2, #12
 8001538:	e679      	b.n	800122e <__aeabi_dsub+0x332>
 800153a:	001d      	movs	r5, r3
 800153c:	000e      	movs	r6, r1
 800153e:	3d20      	subs	r5, #32
 8001540:	40ee      	lsrs	r6, r5
 8001542:	46b0      	mov	r8, r6
 8001544:	2b20      	cmp	r3, #32
 8001546:	d004      	beq.n	8001552 <__aeabi_dsub+0x656>
 8001548:	2540      	movs	r5, #64	; 0x40
 800154a:	1aeb      	subs	r3, r5, r3
 800154c:	4099      	lsls	r1, r3
 800154e:	4308      	orrs	r0, r1
 8001550:	4681      	mov	r9, r0
 8001552:	464e      	mov	r6, r9
 8001554:	4643      	mov	r3, r8
 8001556:	1e71      	subs	r1, r6, #1
 8001558:	418e      	sbcs	r6, r1
 800155a:	431e      	orrs	r6, r3
 800155c:	e767      	b.n	800142e <__aeabi_dsub+0x532>
 800155e:	1886      	adds	r6, r0, r2
 8001560:	4296      	cmp	r6, r2
 8001562:	419b      	sbcs	r3, r3
 8001564:	4461      	add	r1, ip
 8001566:	425b      	negs	r3, r3
 8001568:	18c9      	adds	r1, r1, r3
 800156a:	003d      	movs	r5, r7
 800156c:	e58c      	b.n	8001088 <__aeabi_dsub+0x18c>
 800156e:	4647      	mov	r7, r8
 8001570:	4337      	orrs	r7, r6
 8001572:	d0ce      	beq.n	8001512 <__aeabi_dsub+0x616>
 8001574:	2207      	movs	r2, #7
 8001576:	4641      	mov	r1, r8
 8001578:	4032      	ands	r2, r6
 800157a:	e649      	b.n	8001210 <__aeabi_dsub+0x314>
 800157c:	2700      	movs	r7, #0
 800157e:	003a      	movs	r2, r7
 8001580:	e5e6      	b.n	8001150 <__aeabi_dsub+0x254>
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	000007ff 	.word	0x000007ff
 8001588:	ff7fffff 	.word	0xff7fffff

0800158c <__aeabi_d2iz>:
 800158c:	b530      	push	{r4, r5, lr}
 800158e:	4d14      	ldr	r5, [pc, #80]	; (80015e0 <__aeabi_d2iz+0x54>)
 8001590:	030a      	lsls	r2, r1, #12
 8001592:	004b      	lsls	r3, r1, #1
 8001594:	0b12      	lsrs	r2, r2, #12
 8001596:	0d5b      	lsrs	r3, r3, #21
 8001598:	0fc9      	lsrs	r1, r1, #31
 800159a:	2400      	movs	r4, #0
 800159c:	42ab      	cmp	r3, r5
 800159e:	dd11      	ble.n	80015c4 <__aeabi_d2iz+0x38>
 80015a0:	4c10      	ldr	r4, [pc, #64]	; (80015e4 <__aeabi_d2iz+0x58>)
 80015a2:	42a3      	cmp	r3, r4
 80015a4:	dc10      	bgt.n	80015c8 <__aeabi_d2iz+0x3c>
 80015a6:	2480      	movs	r4, #128	; 0x80
 80015a8:	0364      	lsls	r4, r4, #13
 80015aa:	4322      	orrs	r2, r4
 80015ac:	4c0e      	ldr	r4, [pc, #56]	; (80015e8 <__aeabi_d2iz+0x5c>)
 80015ae:	1ae4      	subs	r4, r4, r3
 80015b0:	2c1f      	cmp	r4, #31
 80015b2:	dd0c      	ble.n	80015ce <__aeabi_d2iz+0x42>
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <__aeabi_d2iz+0x60>)
 80015b6:	1ac3      	subs	r3, r0, r3
 80015b8:	40da      	lsrs	r2, r3
 80015ba:	0013      	movs	r3, r2
 80015bc:	425c      	negs	r4, r3
 80015be:	2900      	cmp	r1, #0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_d2iz+0x38>
 80015c2:	001c      	movs	r4, r3
 80015c4:	0020      	movs	r0, r4
 80015c6:	bd30      	pop	{r4, r5, pc}
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <__aeabi_d2iz+0x64>)
 80015ca:	18cc      	adds	r4, r1, r3
 80015cc:	e7fa      	b.n	80015c4 <__aeabi_d2iz+0x38>
 80015ce:	4d09      	ldr	r5, [pc, #36]	; (80015f4 <__aeabi_d2iz+0x68>)
 80015d0:	40e0      	lsrs	r0, r4
 80015d2:	46ac      	mov	ip, r5
 80015d4:	4463      	add	r3, ip
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	4303      	orrs	r3, r0
 80015dc:	e7ee      	b.n	80015bc <__aeabi_d2iz+0x30>
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	000003fe 	.word	0x000003fe
 80015e4:	0000041d 	.word	0x0000041d
 80015e8:	00000433 	.word	0x00000433
 80015ec:	00000413 	.word	0x00000413
 80015f0:	7fffffff 	.word	0x7fffffff
 80015f4:	fffffbed 	.word	0xfffffbed

080015f8 <__aeabi_f2d>:
 80015f8:	0041      	lsls	r1, r0, #1
 80015fa:	0e09      	lsrs	r1, r1, #24
 80015fc:	1c4b      	adds	r3, r1, #1
 80015fe:	b570      	push	{r4, r5, r6, lr}
 8001600:	b2db      	uxtb	r3, r3
 8001602:	0246      	lsls	r6, r0, #9
 8001604:	0a75      	lsrs	r5, r6, #9
 8001606:	0fc4      	lsrs	r4, r0, #31
 8001608:	2b01      	cmp	r3, #1
 800160a:	dd14      	ble.n	8001636 <__aeabi_f2d+0x3e>
 800160c:	23e0      	movs	r3, #224	; 0xe0
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	076d      	lsls	r5, r5, #29
 8001612:	0b36      	lsrs	r6, r6, #12
 8001614:	18cb      	adds	r3, r1, r3
 8001616:	2100      	movs	r1, #0
 8001618:	0d0a      	lsrs	r2, r1, #20
 800161a:	0028      	movs	r0, r5
 800161c:	0512      	lsls	r2, r2, #20
 800161e:	4d1c      	ldr	r5, [pc, #112]	; (8001690 <__aeabi_f2d+0x98>)
 8001620:	4332      	orrs	r2, r6
 8001622:	055b      	lsls	r3, r3, #21
 8001624:	402a      	ands	r2, r5
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	4313      	orrs	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	07e4      	lsls	r4, r4, #31
 800162e:	085b      	lsrs	r3, r3, #1
 8001630:	4323      	orrs	r3, r4
 8001632:	0019      	movs	r1, r3
 8001634:	bd70      	pop	{r4, r5, r6, pc}
 8001636:	2900      	cmp	r1, #0
 8001638:	d114      	bne.n	8001664 <__aeabi_f2d+0x6c>
 800163a:	2d00      	cmp	r5, #0
 800163c:	d01e      	beq.n	800167c <__aeabi_f2d+0x84>
 800163e:	0028      	movs	r0, r5
 8001640:	f000 f82c 	bl	800169c <__clzsi2>
 8001644:	280a      	cmp	r0, #10
 8001646:	dc1c      	bgt.n	8001682 <__aeabi_f2d+0x8a>
 8001648:	230b      	movs	r3, #11
 800164a:	002a      	movs	r2, r5
 800164c:	1a1b      	subs	r3, r3, r0
 800164e:	40da      	lsrs	r2, r3
 8001650:	0003      	movs	r3, r0
 8001652:	3315      	adds	r3, #21
 8001654:	409d      	lsls	r5, r3
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <__aeabi_f2d+0x9c>)
 8001658:	0312      	lsls	r2, r2, #12
 800165a:	1a1b      	subs	r3, r3, r0
 800165c:	055b      	lsls	r3, r3, #21
 800165e:	0b16      	lsrs	r6, r2, #12
 8001660:	0d5b      	lsrs	r3, r3, #21
 8001662:	e7d8      	b.n	8001616 <__aeabi_f2d+0x1e>
 8001664:	2d00      	cmp	r5, #0
 8001666:	d006      	beq.n	8001676 <__aeabi_f2d+0x7e>
 8001668:	0b32      	lsrs	r2, r6, #12
 800166a:	2680      	movs	r6, #128	; 0x80
 800166c:	0336      	lsls	r6, r6, #12
 800166e:	076d      	lsls	r5, r5, #29
 8001670:	4316      	orrs	r6, r2
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <__aeabi_f2d+0xa0>)
 8001674:	e7cf      	b.n	8001616 <__aeabi_f2d+0x1e>
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <__aeabi_f2d+0xa0>)
 8001678:	2600      	movs	r6, #0
 800167a:	e7cc      	b.n	8001616 <__aeabi_f2d+0x1e>
 800167c:	2300      	movs	r3, #0
 800167e:	2600      	movs	r6, #0
 8001680:	e7c9      	b.n	8001616 <__aeabi_f2d+0x1e>
 8001682:	0003      	movs	r3, r0
 8001684:	002a      	movs	r2, r5
 8001686:	3b0b      	subs	r3, #11
 8001688:	409a      	lsls	r2, r3
 800168a:	2500      	movs	r5, #0
 800168c:	e7e3      	b.n	8001656 <__aeabi_f2d+0x5e>
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	800fffff 	.word	0x800fffff
 8001694:	00000389 	.word	0x00000389
 8001698:	000007ff 	.word	0x000007ff

0800169c <__clzsi2>:
 800169c:	211c      	movs	r1, #28
 800169e:	2301      	movs	r3, #1
 80016a0:	041b      	lsls	r3, r3, #16
 80016a2:	4298      	cmp	r0, r3
 80016a4:	d301      	bcc.n	80016aa <__clzsi2+0xe>
 80016a6:	0c00      	lsrs	r0, r0, #16
 80016a8:	3910      	subs	r1, #16
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	4298      	cmp	r0, r3
 80016ae:	d301      	bcc.n	80016b4 <__clzsi2+0x18>
 80016b0:	0a00      	lsrs	r0, r0, #8
 80016b2:	3908      	subs	r1, #8
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	4298      	cmp	r0, r3
 80016b8:	d301      	bcc.n	80016be <__clzsi2+0x22>
 80016ba:	0900      	lsrs	r0, r0, #4
 80016bc:	3904      	subs	r1, #4
 80016be:	a202      	add	r2, pc, #8	; (adr r2, 80016c8 <__clzsi2+0x2c>)
 80016c0:	5c10      	ldrb	r0, [r2, r0]
 80016c2:	1840      	adds	r0, r0, r1
 80016c4:	4770      	bx	lr
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	02020304 	.word	0x02020304
 80016cc:	01010101 	.word	0x01010101
	...

080016d8 <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <LL_AHB1_GRP1_EnableClock+0x18>)
{
 80016da:	b082      	sub	sp, #8
  SET_BIT(RCC->AHBENR, Periphs);
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	4302      	orrs	r2, r0
 80016e0:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	4018      	ands	r0, r3
 80016e6:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80016e8:	9b01      	ldr	r3, [sp, #4]
}
 80016ea:	b002      	add	sp, #8
 80016ec:	4770      	bx	lr
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	static uint16_t now = 13;
	if (htim->Instance == TIM1)
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80016f6:	6802      	ldr	r2, [r0, #0]
{
 80016f8:	b510      	push	{r4, lr}
	if (htim->Instance == TIM1)
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d124      	bne.n	8001748 <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		HAL_GPIO_WritePin(GPIOC, (1 << now), SET);
 80016fe:	2201      	movs	r2, #1
 8001700:	0011      	movs	r1, r2
 8001702:	4c14      	ldr	r4, [pc, #80]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001704:	4814      	ldr	r0, [pc, #80]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001706:	8823      	ldrh	r3, [r4, #0]
 8001708:	4099      	lsls	r1, r3
 800170a:	b289      	uxth	r1, r1
 800170c:	f001 fc2a 	bl	8002f64 <HAL_GPIO_WritePin>
		now++;
 8001710:	8823      	ldrh	r3, [r4, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b29b      	uxth	r3, r3
		if (now >= 16)
 8001716:	2b0f      	cmp	r3, #15
 8001718:	d817      	bhi.n	800174a <HAL_TIM_PeriodElapsedCallback+0x56>
		{
			now = 13;
		}
		HAL_GPIO_WritePin(GPIOB, 0x00FF, RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	21ff      	movs	r1, #255	; 0xff
 800171e:	480f      	ldr	r0, [pc, #60]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x68>)
			now = 13;
 8001720:	8023      	strh	r3, [r4, #0]
		HAL_GPIO_WritePin(GPIOB, 0x00FF, RESET);
 8001722:	f001 fc1f 	bl	8002f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SegVar[now - 13], SET);
 8001726:	8822      	ldrh	r2, [r4, #0]
 8001728:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800172c:	189b      	adds	r3, r3, r2
 800172e:	3b0d      	subs	r3, #13
 8001730:	7819      	ldrb	r1, [r3, #0]
 8001732:	2201      	movs	r2, #1
 8001734:	f001 fc16 	bl	8002f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, (1 << now), RESET);
 8001738:	2101      	movs	r1, #1
 800173a:	8823      	ldrh	r3, [r4, #0]
 800173c:	2200      	movs	r2, #0
 800173e:	4099      	lsls	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001742:	b289      	uxth	r1, r1
 8001744:	f001 fc0e 	bl	8002f64 <HAL_GPIO_WritePin>
	}
}
 8001748:	bd10      	pop	{r4, pc}
			now = 13;
 800174a:	230d      	movs	r3, #13
 800174c:	e7e5      	b.n	800171a <HAL_TIM_PeriodElapsedCallback+0x26>
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	40012c00 	.word	0x40012c00
 8001754:	20000008 	.word	0x20000008
 8001758:	48000800 	.word	0x48000800
 800175c:	48000400 	.word	0x48000400
 8001760:	20000a74 	.word	0x20000a74

08001764 <setSegVal>:

void setSegVal(uint16_t val, uint8_t ptDigit)
{
 8001764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001766:	000d      	movs	r5, r1
	SegVar[0] = SegmentArrInfo[val / 100]; // 100
 8001768:	2164      	movs	r1, #100	; 0x64
{
 800176a:	0007      	movs	r7, r0
	SegVar[0] = SegmentArrInfo[val / 100]; // 100
 800176c:	f7fe fce8 	bl	8000140 <__udivsi3>
 8001770:	4e13      	ldr	r6, [pc, #76]	; (80017c0 <setSegVal+0x5c>)
 8001772:	b280      	uxth	r0, r0
 8001774:	5c33      	ldrb	r3, [r6, r0]
 8001776:	4c13      	ldr	r4, [pc, #76]	; (80017c4 <setSegVal+0x60>)
	SegVar[1] = SegmentArrInfo[((val % 100)) / 10]; // 10
 8001778:	2164      	movs	r1, #100	; 0x64
	SegVar[0] = SegmentArrInfo[val / 100]; // 100
 800177a:	7023      	strb	r3, [r4, #0]
	SegVar[1] = SegmentArrInfo[((val % 100)) / 10]; // 10
 800177c:	0038      	movs	r0, r7
 800177e:	f7fe fd65 	bl	800024c <__aeabi_uidivmod>
 8001782:	b288      	uxth	r0, r1
 8001784:	210a      	movs	r1, #10
 8001786:	f7fe fcdb 	bl	8000140 <__udivsi3>
 800178a:	b280      	uxth	r0, r0
 800178c:	5c33      	ldrb	r3, [r6, r0]
	SegVar[2] = SegmentArrInfo[val % 10]; // 1
 800178e:	210a      	movs	r1, #10
	SegVar[1] = SegmentArrInfo[((val % 100)) / 10]; // 10
 8001790:	7063      	strb	r3, [r4, #1]
	SegVar[2] = SegmentArrInfo[val % 10]; // 1
 8001792:	0038      	movs	r0, r7
 8001794:	f7fe fd5a 	bl	800024c <__aeabi_uidivmod>
 8001798:	b289      	uxth	r1, r1
 800179a:	5c73      	ldrb	r3, [r6, r1]

	for (uint8_t i = 0; i < 3; i++)
	{
		if (ptDigit & (1 << i))
		{
			SegVar[i] |= 0x80;
 800179c:	2680      	movs	r6, #128	; 0x80
	SegVar[2] = SegmentArrInfo[val % 10]; // 1
 800179e:	70a3      	strb	r3, [r4, #2]
		if (ptDigit & (1 << i))
 80017a0:	2001      	movs	r0, #1
	SegVar[2] = SegmentArrInfo[val % 10]; // 1
 80017a2:	2300      	movs	r3, #0
			SegVar[i] |= 0x80;
 80017a4:	4276      	negs	r6, r6
		if (ptDigit & (1 << i))
 80017a6:	002a      	movs	r2, r5
 80017a8:	411a      	asrs	r2, r3
 80017aa:	4202      	tst	r2, r0
 80017ac:	d003      	beq.n	80017b6 <setSegVal+0x52>
			SegVar[i] |= 0x80;
 80017ae:	18e1      	adds	r1, r4, r3
 80017b0:	780a      	ldrb	r2, [r1, #0]
 80017b2:	4332      	orrs	r2, r6
 80017b4:	700a      	strb	r2, [r1, #0]
 80017b6:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 3; i++)
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d1f4      	bne.n	80017a6 <setSegVal+0x42>
		}
	}
}
 80017bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	08007774 	.word	0x08007774
 80017c4:	20000a74 	.word	0x20000a74

080017c8 <ADC_PRINT>:

void ADC_PRINT(uint16_t i)
{
 80017c8:	b570      	push	{r4, r5, r6, lr}

	HAL_ADC_Start_DMA(&hadc, adcValue, 2); // ADC1 3????????
 80017ca:	4c23      	ldr	r4, [pc, #140]	; (8001858 <ADC_PRINT+0x90>)
 80017cc:	4d23      	ldr	r5, [pc, #140]	; (800185c <ADC_PRINT+0x94>)
 80017ce:	0021      	movs	r1, r4
 80017d0:	2202      	movs	r2, #2
 80017d2:	0028      	movs	r0, r5
 80017d4:	f000 ff9e 	bl	8002714 <HAL_ADC_Start_DMA>
	for (int i = 0; i < 2; i++)
	{ // ADC 3???? ??????????????? DMA??? ?????????
		HAL_DMA_PollForTransfer(&hdma_adc, HAL_DMA_FULL_TRANSFER, 1000); // ?????? ??? ????????????
 80017d8:	22fa      	movs	r2, #250	; 0xfa
 80017da:	4e21      	ldr	r6, [pc, #132]	; (8001860 <ADC_PRINT+0x98>)
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	2100      	movs	r1, #0
 80017e0:	0030      	movs	r0, r6
 80017e2:	f001 fa68 	bl	8002cb6 <HAL_DMA_PollForTransfer>
 80017e6:	22fa      	movs	r2, #250	; 0xfa
 80017e8:	2100      	movs	r1, #0
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	0030      	movs	r0, r6
 80017ee:	f001 fa62 	bl	8002cb6 <HAL_DMA_PollForTransfer>
	}
	HAL_ADC_Stop_DMA(&hadc); // ????? ???
 80017f2:	0028      	movs	r0, r5
 80017f4:	f000 ffd8 	bl	80027a8 <HAL_ADC_Stop_DMA>
	 LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);

	 LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
	 */

	_bresult = ((bMAX_VOLTAGE) / (MAX_ADC_VAL)) * ((float) adcValue[0]);
 80017f8:	8820      	ldrh	r0, [r4, #0]
 80017fa:	f7fe ffc5 	bl	8000788 <__aeabi_ui2f>
 80017fe:	4919      	ldr	r1, [pc, #100]	; (8001864 <ADC_PRINT+0x9c>)
 8001800:	f7fe fe70 	bl	80004e4 <__aeabi_fmul>
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <ADC_PRINT+0xa0>)
 8001806:	6018      	str	r0, [r3, #0]
	_cresult = ((cMAX_VOLTAGE) / (MAX_ADC_VAL)) * ((float) adcValue[1]);
 8001808:	8860      	ldrh	r0, [r4, #2]
 800180a:	f7fe ffbd 	bl	8000788 <__aeabi_ui2f>
 800180e:	4917      	ldr	r1, [pc, #92]	; (800186c <ADC_PRINT+0xa4>)
 8001810:	f7fe fe68 	bl	80004e4 <__aeabi_fmul>
 8001814:	4c16      	ldr	r4, [pc, #88]	; (8001870 <ADC_PRINT+0xa8>)
 8001816:	6020      	str	r0, [r4, #0]
	if (_cresult >= 5.3)
 8001818:	f7ff feee 	bl	80015f8 <__aeabi_f2d>
 800181c:	4a15      	ldr	r2, [pc, #84]	; (8001874 <ADC_PRINT+0xac>)
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <ADC_PRINT+0xb0>)
 8001820:	f7fe fe38 	bl	8000494 <__aeabi_dcmpge>
 8001824:	1e02      	subs	r2, r0, #0
 8001826:	d000      	beq.n	800182a <ADC_PRINT+0x62>
	{
		HAL_GPIO_WritePin(S_CAP_CTRL_GPIO_Port, S_CAP_CTRL_Pin, SET);
 8001828:	2201      	movs	r2, #1
	}
	else
	{
		HAL_GPIO_WritePin(S_CAP_CTRL_GPIO_Port, S_CAP_CTRL_Pin, RESET);
 800182a:	2090      	movs	r0, #144	; 0x90
 800182c:	2104      	movs	r1, #4
 800182e:	05c0      	lsls	r0, r0, #23
 8001830:	f001 fb98 	bl	8002f64 <HAL_GPIO_WritePin>
	}
	setSegVal((uint16_t) (_cresult * 100.0), 1 << 0);
 8001834:	6820      	ldr	r0, [r4, #0]
 8001836:	f7ff fedf 	bl	80015f8 <__aeabi_f2d>
 800183a:	2200      	movs	r2, #0
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <ADC_PRINT+0xb4>)
 800183e:	f7ff f8eb 	bl	8000a18 <__aeabi_dmul>
 8001842:	f7fe fe31 	bl	80004a8 <__aeabi_d2uiz>
 8001846:	2101      	movs	r1, #1
 8001848:	b280      	uxth	r0, r0
 800184a:	f7ff ff8b 	bl	8001764 <setSegVal>
	HAL_Delay(1000);
 800184e:	20fa      	movs	r0, #250	; 0xfa
 8001850:	0080      	lsls	r0, r0, #2
 8001852:	f000 fdf7 	bl	8002444 <HAL_Delay>
	i++;
}
 8001856:	bd70      	pop	{r4, r5, r6, pc}
 8001858:	20000abc 	.word	0x20000abc
 800185c:	20000ac0 	.word	0x20000ac0
 8001860:	20000a78 	.word	0x20000a78
 8001864:	3b6e6666 	.word	0x3b6e6666
 8001868:	20000a1c 	.word	0x20000a1c
 800186c:	3b1e6666 	.word	0x3b1e6666
 8001870:	20000a04 	.word	0x20000a04
 8001874:	33333333 	.word	0x33333333
 8001878:	40153333 	.word	0x40153333
 800187c:	40590000 	.word	0x40590000

08001880 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001880:	2301      	movs	r3, #1
 8001882:	4a2a      	ldr	r2, [pc, #168]	; (800192c <SystemClock_Config+0xac>)
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001884:	b510      	push	{r4, lr}
 8001886:	6811      	ldr	r1, [r2, #0]
 8001888:	4399      	bics	r1, r3
 800188a:	4319      	orrs	r1, r3
 800188c:	6011      	str	r1, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800188e:	6811      	ldr	r1, [r2, #0]
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8001890:	4219      	tst	r1, r3
 8001892:	d0fc      	beq.n	800188e <SystemClock_Config+0xe>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001894:	4c26      	ldr	r4, [pc, #152]	; (8001930 <SystemClock_Config+0xb0>)
 8001896:	6822      	ldr	r2, [r4, #0]
 8001898:	4313      	orrs	r3, r2
 800189a:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800189c:	2302      	movs	r3, #2
 800189e:	6822      	ldr	r2, [r4, #0]
	{
	}
	LL_RCC_HSI_Enable();

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1)
 80018a0:	421a      	tst	r2, r3
 80018a2:	d0fc      	beq.n	800189e <SystemClock_Config+0x1e>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80018a4:	22f8      	movs	r2, #248	; 0xf8
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	4393      	bics	r3, r2
 80018aa:	001a      	movs	r2, r3
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	4313      	orrs	r3, r2
 80018b0:	6023      	str	r3, [r4, #0]
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 80018b2:	2301      	movs	r3, #1
 80018b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80018b6:	4313      	orrs	r3, r2
 80018b8:	6363      	str	r3, [r4, #52]	; 0x34
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 80018ba:	2302      	movs	r3, #2
 80018bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
	}
	LL_RCC_HSI_SetCalibTrimming(16);
	LL_RCC_HSI14_Enable();

	/* Wait till HSI14 is ready */
	while (LL_RCC_HSI14_IsReady() != 1)
 80018be:	421a      	tst	r2, r3
 80018c0:	d0fc      	beq.n	80018bc <SystemClock_Config+0x3c>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 80018c2:	22f8      	movs	r2, #248	; 0xf8
 80018c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80018c6:	4393      	bics	r3, r2
 80018c8:	001a      	movs	r2, r3
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	4313      	orrs	r3, r2
 80018ce:	6363      	str	r3, [r4, #52]	; 0x34
  SET_BIT(RCC->CR2, RCC_CR2_HSI48ON);
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80018d4:	025b      	lsls	r3, r3, #9
 80018d6:	4313      	orrs	r3, r2
 80018d8:	6363      	str	r3, [r4, #52]	; 0x34
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI48RDY) == (RCC_CR2_HSI48RDY));
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	029b      	lsls	r3, r3, #10
 80018de:	6b62      	ldr	r2, [r4, #52]	; 0x34
	}
	LL_RCC_HSI14_SetCalibTrimming(16);
	LL_RCC_HSI48_Enable();

	/* Wait till HSI48 is ready */
	while (LL_RCC_HSI48_IsReady() != 1)
 80018e0:	421a      	tst	r2, r3
 80018e2:	d0fc      	beq.n	80018de <SystemClock_Config+0x5e>
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80018e4:	22f0      	movs	r2, #240	; 0xf0
 80018e6:	6863      	ldr	r3, [r4, #4]
 80018e8:	4393      	bics	r3, r2
 80018ea:	6063      	str	r3, [r4, #4]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80018ec:	6863      	ldr	r3, [r4, #4]
 80018ee:	4a11      	ldr	r2, [pc, #68]	; (8001934 <SystemClock_Config+0xb4>)
 80018f0:	4013      	ands	r3, r2
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018f2:	2203      	movs	r2, #3
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80018f4:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018f6:	6863      	ldr	r3, [r4, #4]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018fc:	3209      	adds	r2, #9
 80018fe:	6863      	ldr	r3, [r4, #4]
 8001900:	4013      	ands	r3, r2
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI48);

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI48)
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d1fb      	bne.n	80018fe <SystemClock_Config+0x7e>
	{

	}
	LL_SetSystemCoreClock(48000000);
 8001906:	480c      	ldr	r0, [pc, #48]	; (8001938 <SystemClock_Config+0xb8>)
 8001908:	f003 fa98 	bl	8004e3c <LL_SetSystemCoreClock>

	/* Update the time base */
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800190c:	2000      	movs	r0, #0
 800190e:	f000 fd53 	bl	80023b8 <HAL_InitTick>
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 8001912:	2204      	movs	r2, #4
 8001914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001916:	4393      	bics	r3, r2
 8001918:	6363      	str	r3, [r4, #52]	; 0x34
  *         @arg @ref LL_RCC_I2C1_CLKSOURCE_SYSCLK
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
  MODIFY_REG(RCC->CFGR3, RCC_CFGR3_I2C1SW, I2CxSource);
 800191a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800191c:	320c      	adds	r2, #12
 800191e:	4393      	bics	r3, r2
 8001920:	6323      	str	r3, [r4, #48]	; 0x30
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
{
  MODIFY_REG(RCC->CFGR3, RCC_CFGR3_USBSW, USBxSource);
 8001922:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001924:	3270      	adds	r2, #112	; 0x70
 8001926:	4393      	bics	r3, r2
 8001928:	6323      	str	r3, [r4, #48]	; 0x30
		Error_Handler();
	}
	LL_RCC_HSI14_EnableADCControl();
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
	LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_HSI48);
}
 800192a:	bd10      	pop	{r4, pc}
 800192c:	40022000 	.word	0x40022000
 8001930:	40021000 	.word	0x40021000
 8001934:	fffff8ff 	.word	0xfffff8ff
 8001938:	02dc6c00 	.word	0x02dc6c00

0800193c <main>:
{
 800193c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193e:	b08f      	sub	sp, #60	; 0x3c
	HAL_Init();
 8001940:	f000 fd5e 	bl	8002400 <HAL_Init>
	SystemClock_Config();
 8001944:	f7ff ff9c 	bl	8001880 <SystemClock_Config>
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	LL_EXTI_InitTypeDef EXTI_InitStruct =
 8001948:	2208      	movs	r2, #8
 800194a:	2100      	movs	r1, #0
 800194c:	a806      	add	r0, sp, #24
 800194e:	f004 fbec 	bl	800612a <memset>
	{ 0 };
	LL_GPIO_InitTypeDef GPIO_InitStruct =
 8001952:	2218      	movs	r2, #24
 8001954:	2100      	movs	r1, #0
 8001956:	a808      	add	r0, sp, #32
 8001958:	f004 fbe7 	bl	800612a <memset>
	{ 0 };

	/* GPIO Ports Clock Enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800195c:	2080      	movs	r0, #128	; 0x80
 800195e:	0300      	lsls	r0, r0, #12
 8001960:	f7ff feba 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8001964:	2080      	movs	r0, #128	; 0x80
 8001966:	03c0      	lsls	r0, r0, #15
 8001968:	f7ff feb6 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800196c:	2080      	movs	r0, #128	; 0x80
 800196e:	0280      	lsls	r0, r0, #10
 8001970:	f7ff feb2 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001974:	2080      	movs	r0, #128	; 0x80
 8001976:	02c0      	lsls	r0, r0, #11
 8001978:	f7ff feae 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	2080      	movs	r0, #128	; 0x80
 8001982:	4bfe      	ldr	r3, [pc, #1016]	; (8001d7c <main+0x440>)
 8001984:	0192      	lsls	r2, r2, #6
 8001986:	01c9      	lsls	r1, r1, #7
 8001988:	0200      	lsls	r0, r0, #8
 800198a:	2690      	movs	r6, #144	; 0x90
 800198c:	2701      	movs	r7, #1
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
 8001990:	2502      	movs	r5, #2
 8001992:	6299      	str	r1, [r3, #40]	; 0x28
 8001994:	6298      	str	r0, [r3, #40]	; 0x28
 8001996:	2304      	movs	r3, #4
 8001998:	4cf9      	ldr	r4, [pc, #996]	; (8001d80 <main+0x444>)
 800199a:	05f6      	lsls	r6, r6, #23
 800199c:	62b3      	str	r3, [r6, #40]	; 0x28
 800199e:	62a7      	str	r7, [r4, #40]	; 0x28
 80019a0:	62a5      	str	r5, [r4, #40]	; 0x28
 80019a2:	3506      	adds	r5, #6
 80019a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80019a6:	62a5      	str	r5, [r4, #40]	; 0x28
 80019a8:	331c      	adds	r3, #28
 80019aa:	3508      	adds	r5, #8
 80019ac:	62a5      	str	r5, [r4, #40]	; 0x28
 80019ae:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019b0:	2380      	movs	r3, #128	; 0x80
  WRITE_REG(GPIOx->BRR, PinMask);
 80019b2:	3530      	adds	r5, #48	; 0x30
 80019b4:	62a5      	str	r5, [r4, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019b6:	00db      	lsls	r3, r3, #3
  WRITE_REG(GPIOx->BRR, PinMask);
 80019b8:	3540      	adds	r5, #64	; 0x40
 80019ba:	62a5      	str	r5, [r4, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019bc:	61a3      	str	r3, [r4, #24]
 80019be:	2580      	movs	r5, #128	; 0x80
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	016d      	lsls	r5, r5, #5
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	61a3      	str	r3, [r4, #24]
 80019c8:	61a5      	str	r5, [r4, #24]
	LL_GPIO_SetOutputPin(PWR1_GPIO_Port, PWR1_Pin);

	/**/
	GPIO_InitStruct.Pin = FND_Select0_Pin;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019ca:	2500      	movs	r5, #0
 80019cc:	61a2      	str	r2, [r4, #24]
 80019ce:	61a1      	str	r1, [r4, #24]
 80019d0:	61a0      	str	r0, [r4, #24]
	GPIO_InitStruct.Pin = FND_Select0_Pin;
 80019d2:	9208      	str	r2, [sp, #32]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(FND_Select0_GPIO_Port, &GPIO_InitStruct);
 80019d4:	aa08      	add	r2, sp, #32
 80019d6:	0011      	movs	r1, r2
 80019d8:	48e8      	ldr	r0, [pc, #928]	; (8001d7c <main+0x440>)
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019da:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019dc:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019de:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019e0:	950c      	str	r5, [sp, #48]	; 0x30
	LL_GPIO_Init(FND_Select0_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f002 fe2f 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = FND_Select1_Pin;
 80019e6:	2180      	movs	r1, #128	; 0x80
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(FND_Select1_GPIO_Port, &GPIO_InitStruct);
 80019e8:	aa08      	add	r2, sp, #32
	GPIO_InitStruct.Pin = FND_Select1_Pin;
 80019ea:	01c9      	lsls	r1, r1, #7
 80019ec:	9108      	str	r1, [sp, #32]
	LL_GPIO_Init(FND_Select1_GPIO_Port, &GPIO_InitStruct);
 80019ee:	48e3      	ldr	r0, [pc, #908]	; (8001d7c <main+0x440>)
 80019f0:	0011      	movs	r1, r2
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019f2:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019f4:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019f6:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019f8:	950c      	str	r5, [sp, #48]	; 0x30
	LL_GPIO_Init(FND_Select1_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f002 fe23 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = FND_Select2_Pin;
 80019fe:	2080      	movs	r0, #128	; 0x80
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(FND_Select2_GPIO_Port, &GPIO_InitStruct);
 8001a00:	aa08      	add	r2, sp, #32
	GPIO_InitStruct.Pin = FND_Select2_Pin;
 8001a02:	0200      	lsls	r0, r0, #8
	LL_GPIO_Init(FND_Select2_GPIO_Port, &GPIO_InitStruct);
 8001a04:	0011      	movs	r1, r2
	GPIO_InitStruct.Pin = FND_Select2_Pin;
 8001a06:	9008      	str	r0, [sp, #32]
	LL_GPIO_Init(FND_Select2_GPIO_Port, &GPIO_InitStruct);
 8001a08:	48dc      	ldr	r0, [pc, #880]	; (8001d7c <main+0x440>)
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a0a:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a0c:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a0e:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a10:	950c      	str	r5, [sp, #48]	; 0x30
	LL_GPIO_Init(FND_Select2_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f002 fe17 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = S_CAP_CTRL_Pin;
 8001a16:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(S_CAP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a18:	aa08      	add	r2, sp, #32
 8001a1a:	0011      	movs	r1, r2
 8001a1c:	0030      	movs	r0, r6
	GPIO_InitStruct.Pin = S_CAP_CTRL_Pin;
 8001a1e:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a20:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a22:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a24:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a26:	950c      	str	r5, [sp, #48]	; 0x30
	LL_GPIO_Init(S_CAP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f002 fe0c 	bl	8004644 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = FND0_Pin;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(FND0_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	aa08      	add	r2, sp, #32
 8001a2e:	0011      	movs	r1, r2
 8001a30:	0020      	movs	r0, r4
	GPIO_InitStruct.Pin = FND0_Pin;
 8001a32:	9708      	str	r7, [sp, #32]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a34:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a36:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a38:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a3a:	950c      	str	r5, [sp, #48]	; 0x30
	LL_GPIO_Init(FND0_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f002 fe02 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = FND1_Pin;
 8001a40:	2102      	movs	r1, #2
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(FND1_GPIO_Port, &GPIO_InitStruct);
 8001a42:	aa08      	add	r2, sp, #32
	GPIO_InitStruct.Pin = FND1_Pin;
 8001a44:	9108      	str	r1, [sp, #32]
	LL_GPIO_Init(FND1_GPIO_Port, &GPIO_InitStruct);
 8001a46:	0020      	movs	r0, r4
 8001a48:	0011      	movs	r1, r2
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a4a:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a4c:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a4e:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a50:	950c      	str	r5, [sp, #48]	; 0x30
	LL_GPIO_Init(FND1_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f002 fdf7 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = FND2_Pin;
 8001a56:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(FND2_GPIO_Port, &GPIO_InitStruct);
 8001a58:	aa08      	add	r2, sp, #32
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	0020      	movs	r0, r4
	GPIO_InitStruct.Pin = FND2_Pin;
 8001a5e:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a60:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a62:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a64:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a66:	950c      	str	r5, [sp, #48]	; 0x30
	LL_GPIO_Init(FND2_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f002 fdec 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = PWR6_Pin;
 8001a6c:	2080      	movs	r0, #128	; 0x80
 8001a6e:	00c0      	lsls	r0, r0, #3
 8001a70:	9008      	str	r0, [sp, #32]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
	LL_GPIO_Init(PWR6_GPIO_Port, &GPIO_InitStruct);
 8001a72:	a808      	add	r0, sp, #32
 8001a74:	0001      	movs	r1, r0
 8001a76:	0020      	movs	r0, r4
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a78:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001a7a:	970b      	str	r7, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001a7c:	970c      	str	r7, [sp, #48]	; 0x30
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a7e:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(PWR6_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f002 fde0 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = PWR5_Pin;
 8001a84:	2080      	movs	r0, #128	; 0x80
 8001a86:	0100      	lsls	r0, r0, #4
 8001a88:	9008      	str	r0, [sp, #32]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
	LL_GPIO_Init(PWR5_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	a808      	add	r0, sp, #32
 8001a8c:	0001      	movs	r1, r0
 8001a8e:	0020      	movs	r0, r4
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a90:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001a92:	970b      	str	r7, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001a94:	970c      	str	r7, [sp, #48]	; 0x30
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a96:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(PWR5_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f002 fdd4 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = PWR4_Pin;
 8001a9c:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
	LL_GPIO_Init(PWR4_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	a808      	add	r0, sp, #32
	GPIO_InitStruct.Pin = PWR4_Pin;
 8001aa0:	015b      	lsls	r3, r3, #5
	LL_GPIO_Init(PWR4_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	0001      	movs	r1, r0
 8001aa4:	0020      	movs	r0, r4
	GPIO_InitStruct.Pin = PWR4_Pin;
 8001aa6:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001aa8:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001aaa:	970b      	str	r7, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001aac:	970c      	str	r7, [sp, #48]	; 0x30
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001aae:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(PWR4_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f002 fdc8 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = PWR3_Pin;
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	0192      	lsls	r2, r2, #6
 8001ab8:	9208      	str	r2, [sp, #32]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
	LL_GPIO_Init(PWR3_GPIO_Port, &GPIO_InitStruct);
 8001aba:	aa08      	add	r2, sp, #32
 8001abc:	0011      	movs	r1, r2
 8001abe:	0020      	movs	r0, r4
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ac0:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001ac2:	970b      	str	r7, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001ac4:	970c      	str	r7, [sp, #48]	; 0x30
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ac6:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(PWR3_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f002 fdbc 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = PWR2_Pin;
 8001acc:	2180      	movs	r1, #128	; 0x80
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
	LL_GPIO_Init(PWR2_GPIO_Port, &GPIO_InitStruct);
 8001ace:	aa08      	add	r2, sp, #32
	GPIO_InitStruct.Pin = PWR2_Pin;
 8001ad0:	01c9      	lsls	r1, r1, #7
 8001ad2:	9108      	str	r1, [sp, #32]
	LL_GPIO_Init(PWR2_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	0020      	movs	r0, r4
 8001ad6:	0011      	movs	r1, r2
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ad8:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001ada:	970b      	str	r7, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001adc:	970c      	str	r7, [sp, #48]	; 0x30
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ade:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(PWR2_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	f002 fdb0 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = PWR1_Pin;
 8001ae4:	2080      	movs	r0, #128	; 0x80
 8001ae6:	0200      	lsls	r0, r0, #8
 8001ae8:	9008      	str	r0, [sp, #32]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
	LL_GPIO_Init(PWR1_GPIO_Port, &GPIO_InitStruct);
 8001aea:	a808      	add	r0, sp, #32
 8001aec:	0001      	movs	r1, r0
 8001aee:	0020      	movs	r0, r4
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001af0:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001af2:	970b      	str	r7, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001af4:	970c      	str	r7, [sp, #48]	; 0x30
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001af6:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(PWR1_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f002 fda4 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = FND3_Pin;
 8001afc:	2108      	movs	r1, #8
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(FND3_GPIO_Port, &GPIO_InitStruct);
 8001afe:	a808      	add	r0, sp, #32
	GPIO_InitStruct.Pin = FND3_Pin;
 8001b00:	9108      	str	r1, [sp, #32]
	LL_GPIO_Init(FND3_GPIO_Port, &GPIO_InitStruct);
 8001b02:	0001      	movs	r1, r0
 8001b04:	0020      	movs	r0, r4
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b06:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b08:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b0a:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b0c:	950c      	str	r5, [sp, #48]	; 0x30
	LL_GPIO_Init(FND3_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	f002 fd99 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = FND4_Pin;
 8001b12:	2110      	movs	r1, #16
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(FND4_GPIO_Port, &GPIO_InitStruct);
 8001b14:	a808      	add	r0, sp, #32
	GPIO_InitStruct.Pin = FND4_Pin;
 8001b16:	9108      	str	r1, [sp, #32]
	LL_GPIO_Init(FND4_GPIO_Port, &GPIO_InitStruct);
 8001b18:	0001      	movs	r1, r0
 8001b1a:	0020      	movs	r0, r4
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b1c:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b1e:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b20:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b22:	950c      	str	r5, [sp, #48]	; 0x30
	LL_GPIO_Init(FND4_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f002 fd8e 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = FND5_Pin;
 8001b28:	2120      	movs	r1, #32
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(FND5_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	0020      	movs	r0, r4
	GPIO_InitStruct.Pin = FND5_Pin;
 8001b2c:	9108      	str	r1, [sp, #32]
	LL_GPIO_Init(FND5_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	a908      	add	r1, sp, #32
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b30:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b32:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b34:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b36:	950c      	str	r5, [sp, #48]	; 0x30
	LL_GPIO_Init(FND5_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f002 fd84 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = FND6_Pin;
 8001b3c:	2140      	movs	r1, #64	; 0x40
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(FND6_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	0020      	movs	r0, r4
	GPIO_InitStruct.Pin = FND6_Pin;
 8001b40:	9108      	str	r1, [sp, #32]
	LL_GPIO_Init(FND6_GPIO_Port, &GPIO_InitStruct);
 8001b42:	a908      	add	r1, sp, #32
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b44:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b46:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b48:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b4a:	950c      	str	r5, [sp, #48]	; 0x30
	LL_GPIO_Init(FND6_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f002 fd7a 	bl	8004644 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = FND7_Pin;
 8001b50:	2280      	movs	r2, #128	; 0x80
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(FND7_GPIO_Port, &GPIO_InitStruct);
 8001b52:	a908      	add	r1, sp, #32
 8001b54:	0020      	movs	r0, r4
	GPIO_InitStruct.Pin = FND7_Pin;
 8001b56:	9208      	str	r2, [sp, #32]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b58:	9709      	str	r7, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b5a:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b5c:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b5e:	950c      	str	r5, [sp, #48]	; 0x30
	LL_GPIO_Init(FND7_GPIO_Port, &GPIO_InitStruct);
 8001b60:	f002 fd70 	bl	8004644 <LL_GPIO_Init>
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 8001b64:	210f      	movs	r1, #15
 8001b66:	4a87      	ldr	r2, [pc, #540]	; (8001d84 <main+0x448>)
	/**/
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_8, LL_GPIO_MODE_INPUT);

	/**/
	EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
	EXTI_InitStruct.LineCommand = ENABLE;
 8001b68:	a802      	add	r0, sp, #8
 8001b6a:	6913      	ldr	r3, [r2, #16]
 8001b6c:	438b      	bics	r3, r1
 8001b6e:	6113      	str	r3, [r2, #16]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001b70:	68f2      	ldr	r2, [r6, #12]
 8001b72:	4985      	ldr	r1, [pc, #532]	; (8001d88 <main+0x44c>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	60f2      	str	r2, [r6, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001b78:	6833      	ldr	r3, [r6, #0]
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	6033      	str	r3, [r6, #0]
	EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	9306      	str	r3, [sp, #24]
	EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
	EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8001b84:	3bfd      	subs	r3, #253	; 0xfd
	EXTI_InitStruct.LineCommand = ENABLE;
 8001b86:	7507      	strb	r7, [r0, #20]
	EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8001b88:	7583      	strb	r3, [r0, #22]
	EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b8a:	7545      	strb	r5, [r0, #21]
	LL_EXTI_Init(&EXTI_InitStruct);
 8001b8c:	a806      	add	r0, sp, #24
 8001b8e:	f002 fd09 	bl	80045a4 <LL_EXTI_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b92:	21c1      	movs	r1, #193	; 0xc1
 8001b94:	4a7d      	ldr	r2, [pc, #500]	; (8001d8c <main+0x450>)
 8001b96:	0089      	lsls	r1, r1, #2
 8001b98:	5853      	ldr	r3, [r2, r1]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b9a:	2009      	movs	r0, #9
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001ba4:	4b7a      	ldr	r3, [pc, #488]	; (8001d90 <main+0x454>)
 8001ba6:	6011      	str	r1, [r2, #0]
 8001ba8:	695a      	ldr	r2, [r3, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001baa:	0029      	movs	r1, r5
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001bac:	433a      	orrs	r2, r7
 8001bae:	615a      	str	r2, [r3, #20]
 8001bb0:	695b      	ldr	r3, [r3, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bb2:	002a      	movs	r2, r5
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001bb4:	403b      	ands	r3, r7
 8001bb6:	9305      	str	r3, [sp, #20]
 8001bb8:	9b05      	ldr	r3, [sp, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bba:	f000 ff6d 	bl	8002a98 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bbe:	2009      	movs	r0, #9
 8001bc0:	f000 ff94 	bl	8002aec <HAL_NVIC_EnableIRQ>
	ADC_ChannelConfTypeDef sConfig =
 8001bc4:	220c      	movs	r2, #12
 8001bc6:	0029      	movs	r1, r5
 8001bc8:	a808      	add	r0, sp, #32
 8001bca:	f004 faae 	bl	800612a <memset>
	hadc.Instance = ADC1;
 8001bce:	4c71      	ldr	r4, [pc, #452]	; (8001d94 <main+0x458>)
 8001bd0:	4b71      	ldr	r3, [pc, #452]	; (8001d98 <main+0x45c>)
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001bd2:	0020      	movs	r0, r4
	hadc.Instance = ADC1;
 8001bd4:	6023      	str	r3, [r4, #0]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	6163      	str	r3, [r4, #20]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bda:	23c2      	movs	r3, #194	; 0xc2
 8001bdc:	33ff      	adds	r3, #255	; 0xff
 8001bde:	61e3      	str	r3, [r4, #28]
	hadc.Init.DMAContinuousRequests = DISABLE;
 8001be0:	1d63      	adds	r3, r4, #5
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001be2:	6127      	str	r7, [r4, #16]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001be4:	62a7      	str	r7, [r4, #40]	; 0x28
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001be6:	6065      	str	r5, [r4, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001be8:	60a5      	str	r5, [r4, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bea:	60e5      	str	r5, [r4, #12]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8001bec:	7625      	strb	r5, [r4, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001bee:	7665      	strb	r5, [r4, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8001bf0:	76a5      	strb	r5, [r4, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8001bf2:	76e5      	strb	r5, [r4, #27]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bf4:	6225      	str	r5, [r4, #32]
	hadc.Init.DMAContinuousRequests = DISABLE;
 8001bf6:	77dd      	strb	r5, [r3, #31]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001bf8:	2680      	movs	r6, #128	; 0x80
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001bfa:	f000 fce5 	bl	80025c8 <HAL_ADC_Init>
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001bfe:	2380      	movs	r3, #128	; 0x80
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001c00:	0176      	lsls	r6, r6, #5
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c02:	055b      	lsls	r3, r3, #21
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c04:	a908      	add	r1, sp, #32
 8001c06:	0020      	movs	r0, r4
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c08:	930a      	str	r3, [sp, #40]	; 0x28
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001c0a:	9609      	str	r6, [sp, #36]	; 0x24
	sConfig.Channel = ADC_CHANNEL_0;
 8001c0c:	9508      	str	r5, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c0e:	f000 fec3 	bl	8002998 <HAL_ADC_ConfigChannel>
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c12:	a908      	add	r1, sp, #32
 8001c14:	0020      	movs	r0, r4
	sConfig.Channel = ADC_CHANNEL_1;
 8001c16:	9708      	str	r7, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c18:	f000 febe 	bl	8002998 <HAL_ADC_ConfigChannel>
	MX_USB_DEVICE_Init();
 8001c1c:	f003 feb8 	bl	8005990 <MX_USB_DEVICE_Init>
	TIM_ClockConfigTypeDef sClockSourceConfig =
 8001c20:	2210      	movs	r2, #16
 8001c22:	0029      	movs	r1, r5
 8001c24:	a808      	add	r0, sp, #32
 8001c26:	f004 fa80 	bl	800612a <memset>
	TIM_MasterConfigTypeDef sMasterConfig =
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	0029      	movs	r1, r5
 8001c2e:	a806      	add	r0, sp, #24
 8001c30:	f004 fa7b 	bl	800612a <memset>
	htim1.Instance = TIM1;
 8001c34:	4c59      	ldr	r4, [pc, #356]	; (8001d9c <main+0x460>)
 8001c36:	4b5a      	ldr	r3, [pc, #360]	; (8001da0 <main+0x464>)
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c38:	0020      	movs	r0, r4
	htim1.Instance = TIM1;
 8001c3a:	6023      	str	r3, [r4, #0]
	htim1.Init.Prescaler = 79;
 8001c3c:	234f      	movs	r3, #79	; 0x4f
 8001c3e:	6063      	str	r3, [r4, #4]
	htim1.Init.Period = 600;
 8001c40:	2396      	movs	r3, #150	; 0x96
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	60e3      	str	r3, [r4, #12]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c46:	60a5      	str	r5, [r4, #8]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c48:	6125      	str	r5, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 8001c4a:	6165      	str	r5, [r4, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4c:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c4e:	f002 fbbb 	bl	80043c8 <HAL_TIM_Base_Init>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c52:	a908      	add	r1, sp, #32
 8001c54:	0020      	movs	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c56:	9608      	str	r6, [sp, #32]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c58:	f002 fbde 	bl	8004418 <HAL_TIM_ConfigClockSource>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c5c:	a906      	add	r1, sp, #24
 8001c5e:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c60:	9506      	str	r5, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c62:	9507      	str	r5, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c64:	f002 fc6e 	bl	8004544 <HAL_TIMEx_MasterConfigSynchronization>
	hi2c1.Instance = I2C1;
 8001c68:	4e4e      	ldr	r6, [pc, #312]	; (8001da4 <main+0x468>)
 8001c6a:	4b4f      	ldr	r3, [pc, #316]	; (8001da8 <main+0x46c>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c6c:	0030      	movs	r0, r6
	hi2c1.Instance = I2C1;
 8001c6e:	6033      	str	r3, [r6, #0]
	hi2c1.Init.Timing = 0x0000020B;
 8001c70:	4b4e      	ldr	r3, [pc, #312]	; (8001dac <main+0x470>)
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c72:	60f7      	str	r7, [r6, #12]
	hi2c1.Init.Timing = 0x0000020B;
 8001c74:	6073      	str	r3, [r6, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001c76:	60b5      	str	r5, [r6, #8]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c78:	6135      	str	r5, [r6, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001c7a:	6175      	str	r5, [r6, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c7c:	61b5      	str	r5, [r6, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c7e:	61f5      	str	r5, [r6, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c80:	6235      	str	r5, [r6, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c82:	f001 faa5 	bl	80031d0 <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c86:	0029      	movs	r1, r5
 8001c88:	0030      	movs	r0, r6
 8001c8a:	f001 fe2d 	bl	80038e8 <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c8e:	0029      	movs	r1, r5
 8001c90:	0030      	movs	r0, r6
 8001c92:	f001 fe4f 	bl	8003934 <HAL_I2CEx_ConfigDigitalFilter>
	HAL_TIM_Base_Start_IT(&htim1);
 8001c96:	0020      	movs	r0, r4
 8001c98:	f002 fa97 	bl	80041ca <HAL_TIM_Base_Start_IT>
	_Inited = 1;
 8001c9c:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <main+0x474>)
 8001c9e:	701f      	strb	r7, [r3, #0]
	ssd1306_Init();
 8001ca0:	f000 f91c 	bl	8001edc <ssd1306_Init>
	ssd1306_Fill(Black);
 8001ca4:	0028      	movs	r0, r5
 8001ca6:	f000 f8e7 	bl	8001e78 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001caa:	f000 f8f3 	bl	8001e94 <ssd1306_UpdateScreen>
	ssd1306_SetCursor(18, 0);
 8001cae:	0029      	movs	r1, r5
 8001cb0:	2012      	movs	r0, #18
 8001cb2:	f000 f9ff 	bl	80020b4 <ssd1306_SetCursor>
	ssd1306_WriteString("Stryx.INC", Font_11x18, White);
 8001cb6:	4c3f      	ldr	r4, [pc, #252]	; (8001db4 <main+0x478>)
 8001cb8:	003b      	movs	r3, r7
 8001cba:	6862      	ldr	r2, [r4, #4]
 8001cbc:	6821      	ldr	r1, [r4, #0]
 8001cbe:	483e      	ldr	r0, [pc, #248]	; (8001db8 <main+0x47c>)
 8001cc0:	f000 f9e4 	bl	800208c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 8001cc4:	2114      	movs	r1, #20
 8001cc6:	0028      	movs	r0, r5
 8001cc8:	f000 f9f4 	bl	80020b4 <ssd1306_SetCursor>
	ssd1306_WriteString("batV:", Font_11x18, White);
 8001ccc:	003b      	movs	r3, r7
 8001cce:	6862      	ldr	r2, [r4, #4]
 8001cd0:	6821      	ldr	r1, [r4, #0]
 8001cd2:	483a      	ldr	r0, [pc, #232]	; (8001dbc <main+0x480>)
 8001cd4:	f000 f9da 	bl	800208c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 40);
 8001cd8:	2128      	movs	r1, #40	; 0x28
 8001cda:	0028      	movs	r0, r5
 8001cdc:	f000 f9ea 	bl	80020b4 <ssd1306_SetCursor>
	ssd1306_WriteString("capV:", Font_11x18, White);
 8001ce0:	003b      	movs	r3, r7
 8001ce2:	6821      	ldr	r1, [r4, #0]
 8001ce4:	6862      	ldr	r2, [r4, #4]
 8001ce6:	4836      	ldr	r0, [pc, #216]	; (8001dc0 <main+0x484>)
 8001ce8:	f000 f9d0 	bl	800208c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001cec:	f000 f8d2 	bl	8001e94 <ssd1306_UpdateScreen>
		sprintf(bdata, "%d.%d%d", btmp / 100, (btmp % 100) / 10, btmp % 10);
 8001cf0:	3763      	adds	r7, #99	; 0x63
		ADC_PRINT(i);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f7ff fd68 	bl	80017c8 <ADC_PRINT>
		int btmp = _bresult * 100;
 8001cf8:	4b32      	ldr	r3, [pc, #200]	; (8001dc4 <main+0x488>)
 8001cfa:	4933      	ldr	r1, [pc, #204]	; (8001dc8 <main+0x48c>)
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	f7fe fbf1 	bl	80004e4 <__aeabi_fmul>
 8001d02:	f7fe fd21 	bl	8000748 <__aeabi_f2iz>
		int ctmp = _cresult * 100;
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <main+0x490>)
		int btmp = _bresult * 100;
 8001d08:	0006      	movs	r6, r0
		int ctmp = _cresult * 100;
 8001d0a:	492f      	ldr	r1, [pc, #188]	; (8001dc8 <main+0x48c>)
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	f7fe fbe9 	bl	80004e4 <__aeabi_fmul>
 8001d12:	f7fe fd19 	bl	8000748 <__aeabi_f2iz>
		sprintf(bdata, "%d.%d%d", btmp / 100, (btmp % 100) / 10, btmp % 10);
 8001d16:	0039      	movs	r1, r7
		int ctmp = _cresult * 100;
 8001d18:	0005      	movs	r5, r0
		sprintf(bdata, "%d.%d%d", btmp / 100, (btmp % 100) / 10, btmp % 10);
 8001d1a:	0030      	movs	r0, r6
 8001d1c:	f7fe fb80 	bl	8000420 <__aeabi_idivmod>
 8001d20:	0008      	movs	r0, r1
 8001d22:	210a      	movs	r1, #10
 8001d24:	f7fe fa96 	bl	8000254 <__divsi3>
 8001d28:	0039      	movs	r1, r7
 8001d2a:	9002      	str	r0, [sp, #8]
 8001d2c:	0030      	movs	r0, r6
 8001d2e:	f7fe fa91 	bl	8000254 <__divsi3>
 8001d32:	210a      	movs	r1, #10
 8001d34:	9003      	str	r0, [sp, #12]
 8001d36:	0030      	movs	r0, r6
 8001d38:	f7fe fb72 	bl	8000420 <__aeabi_idivmod>
 8001d3c:	9b02      	ldr	r3, [sp, #8]
 8001d3e:	9a03      	ldr	r2, [sp, #12]
 8001d40:	9100      	str	r1, [sp, #0]
 8001d42:	4823      	ldr	r0, [pc, #140]	; (8001dd0 <main+0x494>)
 8001d44:	4923      	ldr	r1, [pc, #140]	; (8001dd4 <main+0x498>)
 8001d46:	f004 f9f9 	bl	800613c <siprintf>
		sprintf(cdata, "%d.%d%d", ctmp / 100, (ctmp % 100) / 10, ctmp % 10);
 8001d4a:	0028      	movs	r0, r5
 8001d4c:	0039      	movs	r1, r7
 8001d4e:	f7fe fb67 	bl	8000420 <__aeabi_idivmod>
 8001d52:	0008      	movs	r0, r1
 8001d54:	210a      	movs	r1, #10
 8001d56:	f7fe fa7d 	bl	8000254 <__divsi3>
 8001d5a:	0039      	movs	r1, r7
 8001d5c:	9002      	str	r0, [sp, #8]
 8001d5e:	0028      	movs	r0, r5
 8001d60:	f7fe fa78 	bl	8000254 <__divsi3>
 8001d64:	210a      	movs	r1, #10
 8001d66:	9003      	str	r0, [sp, #12]
 8001d68:	0028      	movs	r0, r5
 8001d6a:	f7fe fb59 	bl	8000420 <__aeabi_idivmod>
 8001d6e:	4e1a      	ldr	r6, [pc, #104]	; (8001dd8 <main+0x49c>)
 8001d70:	9b02      	ldr	r3, [sp, #8]
 8001d72:	9a03      	ldr	r2, [sp, #12]
 8001d74:	9100      	str	r1, [sp, #0]
 8001d76:	0030      	movs	r0, r6
 8001d78:	e030      	b.n	8001ddc <main+0x4a0>
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	48000800 	.word	0x48000800
 8001d80:	48000400 	.word	0x48000400
 8001d84:	40010000 	.word	0x40010000
 8001d88:	fffcffff 	.word	0xfffcffff
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	40021000 	.word	0x40021000
 8001d94:	20000ac0 	.word	0x20000ac0
 8001d98:	40012400 	.word	0x40012400
 8001d9c:	20000a34 	.word	0x20000a34
 8001da0:	40012c00 	.word	0x40012c00
 8001da4:	200009b8 	.word	0x200009b8
 8001da8:	40005400 	.word	0x40005400
 8001dac:	0000020b 	.word	0x0000020b
 8001db0:	20000380 	.word	0x20000380
 8001db4:	20000000 	.word	0x20000000
 8001db8:	08007784 	.word	0x08007784
 8001dbc:	0800778e 	.word	0x0800778e
 8001dc0:	08007794 	.word	0x08007794
 8001dc4:	20000a1c 	.word	0x20000a1c
 8001dc8:	42c80000 	.word	0x42c80000
 8001dcc:	20000a04 	.word	0x20000a04
 8001dd0:	20000a20 	.word	0x20000a20
 8001dd4:	0800779a 	.word	0x0800779a
 8001dd8:	20000a08 	.word	0x20000a08
 8001ddc:	4917      	ldr	r1, [pc, #92]	; (8001e3c <main+0x500>)
 8001dde:	f004 f9ad 	bl	800613c <siprintf>
		ssd1306_SetCursor(60, 20);
 8001de2:	2114      	movs	r1, #20
 8001de4:	203c      	movs	r0, #60	; 0x3c
 8001de6:	f000 f965 	bl	80020b4 <ssd1306_SetCursor>
		ssd1306_WriteString(bdata, Font_11x18, White);
 8001dea:	2301      	movs	r3, #1
 8001dec:	6862      	ldr	r2, [r4, #4]
 8001dee:	6821      	ldr	r1, [r4, #0]
 8001df0:	4813      	ldr	r0, [pc, #76]	; (8001e40 <main+0x504>)
 8001df2:	f000 f94b 	bl	800208c <ssd1306_WriteString>
		ssd1306_SetCursor(60, 40);
 8001df6:	2128      	movs	r1, #40	; 0x28
 8001df8:	203c      	movs	r0, #60	; 0x3c
 8001dfa:	f000 f95b 	bl	80020b4 <ssd1306_SetCursor>
		ssd1306_WriteString(cdata, Font_11x18, White);
 8001dfe:	2301      	movs	r3, #1
 8001e00:	6821      	ldr	r1, [r4, #0]
 8001e02:	6862      	ldr	r2, [r4, #4]
 8001e04:	0030      	movs	r0, r6
 8001e06:	f000 f941 	bl	800208c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001e0a:	f000 f843 	bl	8001e94 <ssd1306_UpdateScreen>
		if (usbInitFlag == 1)
 8001e0e:	4d0d      	ldr	r5, [pc, #52]	; (8001e44 <main+0x508>)
 8001e10:	782b      	ldrb	r3, [r5, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d104      	bne.n	8001e20 <main+0x4e4>
			MX_USB_DEVICE_Init();
 8001e16:	f003 fdbb 	bl	8005990 <MX_USB_DEVICE_Init>
			usbInitFlag = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	702b      	strb	r3, [r5, #0]
 8001e1e:	e768      	b.n	8001cf2 <main+0x3b6>
		else if (usbInitFlag == 2)
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d000      	beq.n	8001e26 <main+0x4ea>
 8001e24:	e765      	b.n	8001cf2 <main+0x3b6>
			HAL_PCD_DevDisconnect(&hpcd_USB_FS);
 8001e26:	4808      	ldr	r0, [pc, #32]	; (8001e48 <main+0x50c>)
 8001e28:	f001 fe44 	bl	8003ab4 <HAL_PCD_DevDisconnect>
			USBD_Stop(&hUsbDeviceFS);
 8001e2c:	4e07      	ldr	r6, [pc, #28]	; (8001e4c <main+0x510>)
 8001e2e:	0030      	movs	r0, r6
 8001e30:	f003 f9e7 	bl	8005202 <USBD_Stop>
			USBD_DeInit(&hUsbDeviceFS);
 8001e34:	0030      	movs	r0, r6
 8001e36:	f003 f9c1 	bl	80051bc <USBD_DeInit>
 8001e3a:	e7ee      	b.n	8001e1a <main+0x4de>
 8001e3c:	0800779a 	.word	0x0800779a
 8001e40:	20000a20 	.word	0x20000a20
 8001e44:	20000381 	.word	0x20000381
 8001e48:	20001170 	.word	0x20001170
 8001e4c:	20000b04 	.word	0x20000b04

08001e50 <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001e50:	4770      	bx	lr
	...

08001e54 <ssd1306_WriteCommand>:
//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001e54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001e56:	2217      	movs	r2, #23
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001e58:	230a      	movs	r3, #10
{
 8001e5a:	446a      	add	r2, sp
 8001e5c:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	3b09      	subs	r3, #9
 8001e62:	9200      	str	r2, [sp, #0]
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	2178      	movs	r1, #120	; 0x78
 8001e6a:	4802      	ldr	r0, [pc, #8]	; (8001e74 <ssd1306_WriteCommand+0x20>)
 8001e6c:	f001 fa06 	bl	800327c <HAL_I2C_Mem_Write>
}
 8001e70:	b007      	add	sp, #28
 8001e72:	bd00      	pop	{pc}
 8001e74:	200009b8 	.word	0x200009b8

08001e78 <ssd1306_Fill>:
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001e78:	1e42      	subs	r2, r0, #1
 8001e7a:	4190      	sbcs	r0, r2
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	2300      	movs	r3, #0
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001e80:	4903      	ldr	r1, [pc, #12]	; (8001e90 <ssd1306_Fill+0x18>)
 8001e82:	4240      	negs	r0, r0
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001e84:	00d2      	lsls	r2, r2, #3
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001e86:	54c8      	strb	r0, [r1, r3]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001e88:	3301      	adds	r3, #1
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d1fb      	bne.n	8001e86 <ssd1306_Fill+0xe>
	}
}
 8001e8e:	4770      	bx	lr
 8001e90:	20000388 	.word	0x20000388

08001e94 <ssd1306_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void ssd1306_UpdateScreen(void) 
{
 8001e94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001e96:	2400      	movs	r4, #0
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		// We schrijven alles map per map weg
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8001e98:	2664      	movs	r6, #100	; 0x64
 8001e9a:	2580      	movs	r5, #128	; 0x80
		ssd1306_WriteCommand(0xB0 + i);
 8001e9c:	0020      	movs	r0, r4
 8001e9e:	3850      	subs	r0, #80	; 0x50
 8001ea0:	b2c0      	uxtb	r0, r0
 8001ea2:	f7ff ffd7 	bl	8001e54 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff ffd4 	bl	8001e54 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8001eac:	2010      	movs	r0, #16
 8001eae:	f7ff ffd1 	bl	8001e54 <ssd1306_WriteCommand>
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <ssd1306_UpdateScreen+0x40>)
 8001eb4:	01e3      	lsls	r3, r4, #7
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	9602      	str	r6, [sp, #8]
 8001ebc:	9501      	str	r5, [sp, #4]
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	2240      	movs	r2, #64	; 0x40
 8001ec2:	2178      	movs	r1, #120	; 0x78
 8001ec4:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <ssd1306_UpdateScreen+0x44>)
 8001ec6:	3401      	adds	r4, #1
 8001ec8:	f001 f9d8 	bl	800327c <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8001ecc:	2c08      	cmp	r4, #8
 8001ece:	d1e5      	bne.n	8001e9c <ssd1306_UpdateScreen+0x8>
	}
}
 8001ed0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	20000388 	.word	0x20000388
 8001ed8:	200009b8 	.word	0x200009b8

08001edc <ssd1306_Init>:
{	
 8001edc:	b510      	push	{r4, lr}
	HAL_Delay(100);
 8001ede:	2064      	movs	r0, #100	; 0x64
 8001ee0:	f000 fab0 	bl	8002444 <HAL_Delay>
	ssd1306_WriteCommand(0xAE); //display off
 8001ee4:	20ae      	movs	r0, #174	; 0xae
 8001ee6:	f7ff ffb5 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001eea:	2020      	movs	r0, #32
 8001eec:	f7ff ffb2 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001ef0:	2010      	movs	r0, #16
 8001ef2:	f7ff ffaf 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ef6:	20b0      	movs	r0, #176	; 0xb0
 8001ef8:	f7ff ffac 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001efc:	20c8      	movs	r0, #200	; 0xc8
 8001efe:	f7ff ffa9 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff ffa6 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001f08:	2010      	movs	r0, #16
 8001f0a:	f7ff ffa3 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8001f0e:	2040      	movs	r0, #64	; 0x40
 8001f10:	f7ff ffa0 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001f14:	2081      	movs	r0, #129	; 0x81
 8001f16:	f7ff ff9d 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001f1a:	20ff      	movs	r0, #255	; 0xff
 8001f1c:	f7ff ff9a 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001f20:	20a1      	movs	r0, #161	; 0xa1
 8001f22:	f7ff ff97 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8001f26:	20a6      	movs	r0, #166	; 0xa6
 8001f28:	f7ff ff94 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001f2c:	20a8      	movs	r0, #168	; 0xa8
 8001f2e:	f7ff ff91 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001f32:	203f      	movs	r0, #63	; 0x3f
 8001f34:	f7ff ff8e 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001f38:	20a4      	movs	r0, #164	; 0xa4
 8001f3a:	f7ff ff8b 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001f3e:	20d3      	movs	r0, #211	; 0xd3
 8001f40:	f7ff ff88 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff ff85 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f4a:	20d5      	movs	r0, #213	; 0xd5
 8001f4c:	f7ff ff82 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001f50:	20f0      	movs	r0, #240	; 0xf0
 8001f52:	f7ff ff7f 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001f56:	20d9      	movs	r0, #217	; 0xd9
 8001f58:	f7ff ff7c 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001f5c:	2022      	movs	r0, #34	; 0x22
 8001f5e:	f7ff ff79 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001f62:	20da      	movs	r0, #218	; 0xda
 8001f64:	f7ff ff76 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001f68:	2012      	movs	r0, #18
 8001f6a:	f7ff ff73 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001f6e:	20db      	movs	r0, #219	; 0xdb
 8001f70:	f7ff ff70 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001f74:	2020      	movs	r0, #32
 8001f76:	f7ff ff6d 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001f7a:	208d      	movs	r0, #141	; 0x8d
 8001f7c:	f7ff ff6a 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001f80:	2014      	movs	r0, #20
 8001f82:	f7ff ff67 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001f86:	20af      	movs	r0, #175	; 0xaf
 8001f88:	f7ff ff64 	bl	8001e54 <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff ff73 	bl	8001e78 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001f92:	f7ff ff7f 	bl	8001e94 <ssd1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8001f96:	2200      	movs	r2, #0
	SSD1306.Initialized = 1;
 8001f98:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8001f9a:	4b02      	ldr	r3, [pc, #8]	; (8001fa4 <ssd1306_Init+0xc8>)
 8001f9c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001f9e:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001fa0:	7158      	strb	r0, [r3, #5]
}
 8001fa2:	bd10      	pop	{r4, pc}
 8001fa4:	20000382 	.word	0x20000382

08001fa8 <ssd1306_DrawPixel>:
//	Y => Y coordinaat
//	color => kleur die pixel moet krijgen
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001fa8:	b243      	sxtb	r3, r0
{
 8001faa:	b570      	push	{r4, r5, r6, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db16      	blt.n	8001fde <ssd1306_DrawPixel+0x36>
 8001fb0:	293f      	cmp	r1, #63	; 0x3f
 8001fb2:	d814      	bhi.n	8001fde <ssd1306_DrawPixel+0x36>
		// We gaan niet buiten het scherm schrijven
		return;
	}
	
	// Kijken of de pixel geinverteerd moet worden
	if (SSD1306.Inverted) 
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <ssd1306_DrawPixel+0x40>)
 8001fb6:	791b      	ldrb	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <ssd1306_DrawPixel+0x1a>
	{
		color = (SSD1306_COLOR)!color;
 8001fbc:	4253      	negs	r3, r2
 8001fbe:	415a      	adcs	r2, r3
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	2407      	movs	r4, #7
 8001fc4:	08cb      	lsrs	r3, r1, #3
 8001fc6:	400c      	ands	r4, r1
 8001fc8:	2101      	movs	r1, #1
 8001fca:	40a1      	lsls	r1, r4
 8001fcc:	01db      	lsls	r3, r3, #7
 8001fce:	4d07      	ldr	r5, [pc, #28]	; (8001fec <ssd1306_DrawPixel+0x44>)
 8001fd0:	1818      	adds	r0, r3, r0
 8001fd2:	562e      	ldrsb	r6, [r5, r0]
 8001fd4:	b24b      	sxtb	r3, r1
	}
	
	// We zetten de juiste kleur voor de pixel
	if (color == White)
 8001fd6:	2a01      	cmp	r2, #1
 8001fd8:	d102      	bne.n	8001fe0 <ssd1306_DrawPixel+0x38>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001fda:	4333      	orrs	r3, r6
 8001fdc:	542b      	strb	r3, [r5, r0]
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
	}
}
 8001fde:	bd70      	pop	{r4, r5, r6, pc}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001fe0:	439e      	bics	r6, r3
 8001fe2:	542e      	strb	r6, [r5, r0]
 8001fe4:	e7fb      	b.n	8001fde <ssd1306_DrawPixel+0x36>
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	20000382 	.word	0x20000382
 8001fec:	20000388 	.word	0x20000388

08001ff0 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	9303      	str	r3, [sp, #12]
 8001ff6:	b2cb      	uxtb	r3, r1
 8001ff8:	9301      	str	r3, [sp, #4]
	uint32_t i, b, j;
	
	// Kijken of er nog plaats is op deze lijn
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001ffa:	4b23      	ldr	r3, [pc, #140]	; (8002088 <ssd1306_WriteChar+0x98>)
{
 8001ffc:	9106      	str	r1, [sp, #24]
 8001ffe:	9207      	str	r2, [sp, #28]
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002000:	9901      	ldr	r1, [sp, #4]
 8002002:	881a      	ldrh	r2, [r3, #0]
{
 8002004:	0006      	movs	r6, r0
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002006:	9200      	str	r2, [sp, #0]
 8002008:	1852      	adds	r2, r2, r1
 800200a:	2a7f      	cmp	r2, #127	; 0x7f
 800200c:	dc3a      	bgt.n	8002084 <ssd1306_WriteChar+0x94>
 800200e:	aa06      	add	r2, sp, #24
 8002010:	7852      	ldrb	r2, [r2, #1]
 8002012:	9202      	str	r2, [sp, #8]
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002014:	885c      	ldrh	r4, [r3, #2]
 8002016:	18a3      	adds	r3, r4, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002018:	2b3f      	cmp	r3, #63	; 0x3f
 800201a:	dc33      	bgt.n	8002084 <ssd1306_WriteChar+0x94>
	}
	
	// We gaan door het font
	for (i = 0; i < Font.FontHeight; i++)
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800201c:	0033      	movs	r3, r6
	for (i = 0; i < Font.FontHeight; i++)
 800201e:	2700      	movs	r7, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002020:	3b20      	subs	r3, #32
 8002022:	435a      	muls	r2, r3
 8002024:	b2e4      	uxtb	r4, r4
 8002026:	9204      	str	r2, [sp, #16]
	for (i = 0; i < Font.FontHeight; i++)
 8002028:	9b02      	ldr	r3, [sp, #8]
 800202a:	42bb      	cmp	r3, r7
 800202c:	d808      	bhi.n	8002040 <ssd1306_WriteChar+0x50>
			}
		}
	}
	
	// De huidige positie is nu verplaatst
	SSD1306.CurrentX += Font.FontWidth;
 800202e:	9a01      	ldr	r2, [sp, #4]
 8002030:	9b00      	ldr	r3, [sp, #0]
 8002032:	4694      	mov	ip, r2
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <ssd1306_WriteChar+0x98>)
 8002036:	4463      	add	r3, ip
 8002038:	8013      	strh	r3, [r2, #0]
	
	// We geven het geschreven char terug voor validatie
	return ch;
}
 800203a:	0030      	movs	r0, r6
 800203c:	b009      	add	sp, #36	; 0x24
 800203e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (j = 0; j < Font.FontWidth; j++)
 8002040:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002042:	9b04      	ldr	r3, [sp, #16]
 8002044:	9a07      	ldr	r2, [sp, #28]
 8002046:	19db      	adds	r3, r3, r7
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	5a9b      	ldrh	r3, [r3, r2]
 800204c:	9305      	str	r3, [sp, #20]
		for (j = 0; j < Font.FontWidth; j++)
 800204e:	9b01      	ldr	r3, [sp, #4]
 8002050:	42ab      	cmp	r3, r5
 8002052:	d803      	bhi.n	800205c <ssd1306_WriteChar+0x6c>
 8002054:	3401      	adds	r4, #1
	for (i = 0; i < Font.FontHeight; i++)
 8002056:	3701      	adds	r7, #1
 8002058:	b2e4      	uxtb	r4, r4
 800205a:	e7e5      	b.n	8002028 <ssd1306_WriteChar+0x38>
 800205c:	9b00      	ldr	r3, [sp, #0]
			if ((b << j) & 0x8000) 
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	18e8      	adds	r0, r5, r3
 8002062:	9b05      	ldr	r3, [sp, #20]
 8002064:	0212      	lsls	r2, r2, #8
 8002066:	40ab      	lsls	r3, r5
 8002068:	b2c0      	uxtb	r0, r0
 800206a:	4213      	tst	r3, r2
 800206c:	d005      	beq.n	800207a <ssd1306_WriteChar+0x8a>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800206e:	9a03      	ldr	r2, [sp, #12]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002070:	0021      	movs	r1, r4
 8002072:	f7ff ff99 	bl	8001fa8 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8002076:	3501      	adds	r5, #1
 8002078:	e7e9      	b.n	800204e <ssd1306_WriteChar+0x5e>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800207a:	9a03      	ldr	r2, [sp, #12]
 800207c:	4253      	negs	r3, r2
 800207e:	415a      	adcs	r2, r3
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	e7f5      	b.n	8002070 <ssd1306_WriteChar+0x80>
		return 0;
 8002084:	2600      	movs	r6, #0
 8002086:	e7d8      	b.n	800203a <ssd1306_WriteChar+0x4a>
 8002088:	20000382 	.word	0x20000382

0800208c <ssd1306_WriteString>:
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 800208c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800208e:	0004      	movs	r4, r0
 8002090:	001d      	movs	r5, r3
 8002092:	9100      	str	r1, [sp, #0]
 8002094:	9201      	str	r2, [sp, #4]
	// We schrijven alle char tot een nulbyte
	while (*str) 
 8002096:	7820      	ldrb	r0, [r4, #0]
 8002098:	2800      	cmp	r0, #0
 800209a:	d100      	bne.n	800209e <ssd1306_WriteString+0x12>
		str++;
	}
	
	// Alles gelukt, we sturen dus 0 terug
	return *str;
}
 800209c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 800209e:	002b      	movs	r3, r5
 80020a0:	9900      	ldr	r1, [sp, #0]
 80020a2:	9a01      	ldr	r2, [sp, #4]
 80020a4:	f7ff ffa4 	bl	8001ff0 <ssd1306_WriteChar>
 80020a8:	0003      	movs	r3, r0
 80020aa:	7820      	ldrb	r0, [r4, #0]
 80020ac:	4283      	cmp	r3, r0
 80020ae:	d1f5      	bne.n	800209c <ssd1306_WriteString+0x10>
		str++;
 80020b0:	3401      	adds	r4, #1
 80020b2:	e7f0      	b.n	8002096 <ssd1306_WriteString+0xa>

080020b4 <ssd1306_SetCursor>:
//	Zet de cursor op een coordinaat
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80020b4:	4b01      	ldr	r3, [pc, #4]	; (80020bc <ssd1306_SetCursor+0x8>)
 80020b6:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80020b8:	8059      	strh	r1, [r3, #2]
}
 80020ba:	4770      	bx	lr
 80020bc:	20000382 	.word	0x20000382

080020c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c0:	2001      	movs	r0, #1
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_MspInit+0x2c>)
{
 80020c4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c6:	6999      	ldr	r1, [r3, #24]
 80020c8:	4301      	orrs	r1, r0
 80020ca:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d0:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d2:	4002      	ands	r2, r0
 80020d4:	9200      	str	r2, [sp, #0]
 80020d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d8:	69da      	ldr	r2, [r3, #28]
 80020da:	430a      	orrs	r2, r1
 80020dc:	61da      	str	r2, [r3, #28]
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	400b      	ands	r3, r1
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e6:	b002      	add	sp, #8
 80020e8:	4770      	bx	lr
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020f0:	b530      	push	{r4, r5, lr}
 80020f2:	0005      	movs	r5, r0
 80020f4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f6:	2214      	movs	r2, #20
 80020f8:	2100      	movs	r1, #0
 80020fa:	a803      	add	r0, sp, #12
 80020fc:	f004 f815 	bl	800612a <memset>
  if(hadc->Instance==ADC1)
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_ADC_MspInit+0x94>)
 8002102:	682a      	ldr	r2, [r5, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d13b      	bne.n	8002180 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002108:	2080      	movs	r0, #128	; 0x80
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <HAL_ADC_MspInit+0x98>)
 800210c:	0080      	lsls	r0, r0, #2
 800210e:	6999      	ldr	r1, [r3, #24]
 8002110:	4301      	orrs	r1, r0
 8002112:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002114:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002116:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 800211a:	4002      	ands	r2, r0
 800211c:	9201      	str	r2, [sp, #4]
 800211e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002120:	695a      	ldr	r2, [r3, #20]
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002124:	430a      	orrs	r2, r1
 8002126:	615a      	str	r2, [r3, #20]
 8002128:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212c:	400b      	ands	r3, r1
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002132:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002136:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002138:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	f000 fe63 	bl	8002e04 <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800213e:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8002140:	4c12      	ldr	r4, [pc, #72]	; (800218c <HAL_ADC_MspInit+0x9c>)
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_ADC_MspInit+0xa0>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002144:	60e2      	str	r2, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002146:	1892      	adds	r2, r2, r2
 8002148:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 800214e:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002150:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002152:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002154:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002156:	0020      	movs	r0, r4
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002158:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800215a:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800215c:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800215e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002160:	f000 fcfa 	bl	8002b58 <HAL_DMA_Init>
 8002164:	2800      	cmp	r0, #0
 8002166:	d001      	beq.n	800216c <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8002168:	f7ff fe72 	bl	8001e50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	200c      	movs	r0, #12
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002170:	632c      	str	r4, [r5, #48]	; 0x30
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002172:	0011      	movs	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002174:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002176:	f000 fc8f 	bl	8002a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800217a:	200c      	movs	r0, #12
 800217c:	f000 fcb6 	bl	8002aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002180:	b009      	add	sp, #36	; 0x24
 8002182:	bd30      	pop	{r4, r5, pc}
 8002184:	40012400 	.word	0x40012400
 8002188:	40021000 	.word	0x40021000
 800218c:	20000a78 	.word	0x20000a78
 8002190:	40020008 	.word	0x40020008

08002194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002194:	b510      	push	{r4, lr}
 8002196:	0004      	movs	r4, r0
 8002198:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219a:	2214      	movs	r2, #20
 800219c:	2100      	movs	r1, #0
 800219e:	a803      	add	r0, sp, #12
 80021a0:	f003 ffc3 	bl	800612a <memset>
  if(hi2c->Instance==I2C1)
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <HAL_I2C_MspInit+0x6c>)
 80021a6:	6822      	ldr	r2, [r4, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d126      	bne.n	80021fa <HAL_I2C_MspInit+0x66>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	4c15      	ldr	r4, [pc, #84]	; (8002204 <HAL_I2C_MspInit+0x70>)
 80021b0:	03c9      	lsls	r1, r1, #15
 80021b2:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021b4:	4814      	ldr	r0, [pc, #80]	; (8002208 <HAL_I2C_MspInit+0x74>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021b6:	430a      	orrs	r2, r1
 80021b8:	6162      	str	r2, [r4, #20]
 80021ba:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021bc:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021be:	400b      	ands	r3, r1
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c4:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021c6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ca:	3b11      	subs	r3, #17
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021cc:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d0:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80021d2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021d4:	f000 fe16 	bl	8002e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	69e2      	ldr	r2, [r4, #28]
 80021dc:	0389      	lsls	r1, r1, #14
 80021de:	430a      	orrs	r2, r1
 80021e0:	61e2      	str	r2, [r4, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80021e2:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021e4:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80021e6:	2017      	movs	r0, #23
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021e8:	400b      	ands	r3, r1
 80021ea:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80021ec:	0011      	movs	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021ee:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80021f0:	f000 fc52 	bl	8002a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80021f4:	2017      	movs	r0, #23
 80021f6:	f000 fc79 	bl	8002aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021fa:	b008      	add	sp, #32
 80021fc:	bd10      	pop	{r4, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	40005400 	.word	0x40005400
 8002204:	40021000 	.word	0x40021000
 8002208:	48001400 	.word	0x48001400

0800220c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800220c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_TIM_Base_MspInit+0x30>)
 8002210:	6802      	ldr	r2, [r0, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d111      	bne.n	800223a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002216:	2080      	movs	r0, #128	; 0x80
 8002218:	4a09      	ldr	r2, [pc, #36]	; (8002240 <HAL_TIM_Base_MspInit+0x34>)
 800221a:	0100      	lsls	r0, r0, #4
 800221c:	6991      	ldr	r1, [r2, #24]
 800221e:	4301      	orrs	r1, r0
 8002220:	6191      	str	r1, [r2, #24]
 8002222:	6993      	ldr	r3, [r2, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002224:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002226:	4003      	ands	r3, r0
 8002228:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800222a:	200d      	movs	r0, #13
 800222c:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800222e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002230:	f000 fc32 	bl	8002a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002234:	200d      	movs	r0, #13
 8002236:	f000 fc59 	bl	8002aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800223a:	bd07      	pop	{r0, r1, r2, pc}
 800223c:	40012c00 	.word	0x40012c00
 8002240:	40021000 	.word	0x40021000

08002244 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002244:	4770      	bx	lr

08002246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002246:	e7fe      	b.n	8002246 <HardFault_Handler>

08002248 <SVC_Handler>:
 8002248:	4770      	bx	lr

0800224a <PendSV_Handler>:
 800224a:	4770      	bx	lr

0800224c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800224c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224e:	f000 f8e7 	bl	8002420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002252:	bd10      	pop	{r4, pc}

08002254 <EXTI4_15_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <EXTI4_15_IRQHandler+0x30>)
 8002258:	0049      	lsls	r1, r1, #1
 800225a:	695a      	ldr	r2, [r3, #20]

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800225c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 800225e:	420a      	tst	r2, r1
 8002260:	d00c      	beq.n	800227c <EXTI4_15_IRQHandler+0x28>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8002262:	6159      	str	r1, [r3, #20]
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
    /* USER CODE BEGIN LL_EXTI_LINE_8 */
    if(!_Inited)
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <EXTI4_15_IRQHandler+0x34>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <EXTI4_15_IRQHandler+0x28>
    {
    	return;
    }
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==SET)
 800226c:	2090      	movs	r0, #144	; 0x90
 800226e:	05c0      	lsls	r0, r0, #23
 8002270:	f000 fe72 	bl	8002f58 <HAL_GPIO_ReadPin>
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <EXTI4_15_IRQHandler+0x38>)
 8002276:	2801      	cmp	r0, #1
 8002278:	d101      	bne.n	800227e <EXTI4_15_IRQHandler+0x2a>
    {
    	usbInitFlag=1;
 800227a:	7018      	strb	r0, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800227c:	bd10      	pop	{r4, pc}
    	usbInitFlag=2;
 800227e:	2202      	movs	r2, #2
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	e7fb      	b.n	800227c <EXTI4_15_IRQHandler+0x28>
 8002284:	40010400 	.word	0x40010400
 8002288:	20000380 	.word	0x20000380
 800228c:	20000381 	.word	0x20000381

08002290 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002290:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002292:	4802      	ldr	r0, [pc, #8]	; (800229c <DMA1_Channel1_IRQHandler+0xc>)
 8002294:	f000 fd6c 	bl	8002d70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002298:	bd10      	pop	{r4, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	20000a78 	.word	0x20000a78

080022a0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80022a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80022a2:	4802      	ldr	r0, [pc, #8]	; (80022ac <ADC1_IRQHandler+0xc>)
 80022a4:	f000 fb08 	bl	80028b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80022a8:	bd10      	pop	{r4, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	20000ac0 	.word	0x20000ac0

080022b0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80022b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022b2:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 80022b4:	f001 ff9c 	bl	80041f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80022b8:	bd10      	pop	{r4, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	20000a34 	.word	0x20000a34

080022c0 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80022c0:	4806      	ldr	r0, [pc, #24]	; (80022dc <I2C1_IRQHandler+0x1c>)
{
 80022c2:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80022c4:	6803      	ldr	r3, [r0, #0]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	23e0      	movs	r3, #224	; 0xe0
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	421a      	tst	r2, r3
 80022ce:	d002      	beq.n	80022d6 <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80022d0:	f001 fac4 	bl	800385c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80022d4:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80022d6:	f001 f887 	bl	80033e8 <HAL_I2C_EV_IRQHandler>
}
 80022da:	e7fb      	b.n	80022d4 <I2C1_IRQHandler+0x14>
 80022dc:	200009b8 	.word	0x200009b8

080022e0 <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80022e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80022e2:	4802      	ldr	r0, [pc, #8]	; (80022ec <USB_IRQHandler+0xc>)
 80022e4:	f001 fc96 	bl	8003c14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80022e8:	bd10      	pop	{r4, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	20001170 	.word	0x20001170

080022f0 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <_sbrk+0x30>)
 80022f2:	490c      	ldr	r1, [pc, #48]	; (8002324 <_sbrk+0x34>)
{
 80022f4:	0002      	movs	r2, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f6:	1ac9      	subs	r1, r1, r3
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <_sbrk+0x38>)
{
 80022fa:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	2800      	cmp	r0, #0
 8002300:	d101      	bne.n	8002306 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8002302:	480a      	ldr	r0, [pc, #40]	; (800232c <_sbrk+0x3c>)
 8002304:	6018      	str	r0, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	1882      	adds	r2, r0, r2
 800230a:	428a      	cmp	r2, r1
 800230c:	d906      	bls.n	800231c <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800230e:	f003 fed9 	bl	80060c4 <__errno>
 8002312:	230c      	movs	r3, #12
 8002314:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002316:	2001      	movs	r0, #1
 8002318:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800231a:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800231c:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 800231e:	e7fc      	b.n	800231a <_sbrk+0x2a>
 8002320:	00000200 	.word	0x00000200
 8002324:	20001800 	.word	0x20001800
 8002328:	20000788 	.word	0x20000788
 800232c:	200013e8 	.word	0x200013e8

08002330 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002330:	4770      	bx	lr
	...

08002334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002334:	4813      	ldr	r0, [pc, #76]	; (8002384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002336:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002338:	4813      	ldr	r0, [pc, #76]	; (8002388 <LoopForever+0x6>)
    LDR R1, [R0]
 800233a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800233c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <LoopForever+0xa>)
    CMP R1, R2
 8002340:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002342:	d105      	bne.n	8002350 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002344:	4812      	ldr	r0, [pc, #72]	; (8002390 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002346:	4913      	ldr	r1, [pc, #76]	; (8002394 <LoopForever+0x12>)
    STR R1, [R0]
 8002348:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800234a:	4813      	ldr	r0, [pc, #76]	; (8002398 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800234c:	4913      	ldr	r1, [pc, #76]	; (800239c <LoopForever+0x1a>)
    STR R1, [R0]
 800234e:	6001      	str	r1, [r0, #0]

08002350 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002350:	4813      	ldr	r0, [pc, #76]	; (80023a0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002352:	4914      	ldr	r1, [pc, #80]	; (80023a4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <LoopForever+0x26>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a11      	ldr	r2, [pc, #68]	; (80023ac <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002368:	4c11      	ldr	r4, [pc, #68]	; (80023b0 <LoopForever+0x2e>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002376:	f7ff ffdb 	bl	8002330 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800237a:	f003 fea9 	bl	80060d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800237e:	f7ff fadd 	bl	800193c <main>

08002382 <LoopForever>:

LoopForever:
    b LoopForever
 8002382:	e7fe      	b.n	8002382 <LoopForever>
  ldr   r0, =_estack
 8002384:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002388:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800238c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002390:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002394:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002398:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800239c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a4:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 80023a8:	08007834 	.word	0x08007834
  ldr r2, =_sbss
 80023ac:	20000364 	.word	0x20000364
  ldr r4, =_ebss
 80023b0:	200013e8 	.word	0x200013e8

080023b4 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <CEC_CAN_IRQHandler>
	...

080023b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b8:	b570      	push	{r4, r5, r6, lr}
 80023ba:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023bc:	20fa      	movs	r0, #250	; 0xfa
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_InitTick+0x3c>)
 80023c0:	0080      	lsls	r0, r0, #2
 80023c2:	7819      	ldrb	r1, [r3, #0]
 80023c4:	f7fd febc 	bl	8000140 <__udivsi3>
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_InitTick+0x40>)
 80023ca:	0001      	movs	r1, r0
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	f7fd feb7 	bl	8000140 <__udivsi3>
 80023d2:	f000 fba7 	bl	8002b24 <HAL_SYSTICK_Config>
 80023d6:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80023d8:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023da:	2c00      	cmp	r4, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023de:	2d03      	cmp	r5, #3
 80023e0:	d807      	bhi.n	80023f2 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e2:	3802      	subs	r0, #2
 80023e4:	0022      	movs	r2, r4
 80023e6:	0029      	movs	r1, r5
 80023e8:	f000 fb56 	bl	8002a98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023ec:	0020      	movs	r0, r4
 80023ee:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_InitTick+0x44>)
 80023f0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80023f2:	bd70      	pop	{r4, r5, r6, pc}
 80023f4:	20000010 	.word	0x20000010
 80023f8:	2000000c 	.word	0x2000000c
 80023fc:	20000014 	.word	0x20000014

08002400 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002400:	2310      	movs	r3, #16
 8002402:	4a06      	ldr	r2, [pc, #24]	; (800241c <HAL_Init+0x1c>)
{
 8002404:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002406:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002408:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800240a:	430b      	orrs	r3, r1
 800240c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800240e:	f7ff ffd3 	bl	80023b8 <HAL_InitTick>
  HAL_MspInit();
 8002412:	f7ff fe55 	bl	80020c0 <HAL_MspInit>
}
 8002416:	2000      	movs	r0, #0
 8002418:	bd10      	pop	{r4, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	40022000 	.word	0x40022000

08002420 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002420:	4a03      	ldr	r2, [pc, #12]	; (8002430 <HAL_IncTick+0x10>)
 8002422:	4b04      	ldr	r3, [pc, #16]	; (8002434 <HAL_IncTick+0x14>)
 8002424:	6811      	ldr	r1, [r2, #0]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	185b      	adds	r3, r3, r1
 800242a:	6013      	str	r3, [r2, #0]
}
 800242c:	4770      	bx	lr
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	20000b00 	.word	0x20000b00
 8002434:	20000010 	.word	0x20000010

08002438 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002438:	4b01      	ldr	r3, [pc, #4]	; (8002440 <HAL_GetTick+0x8>)
 800243a:	6818      	ldr	r0, [r3, #0]
}
 800243c:	4770      	bx	lr
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	20000b00 	.word	0x20000b00

08002444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff fff6 	bl	8002438 <HAL_GetTick>
 800244c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244e:	1c63      	adds	r3, r4, #1
 8002450:	d002      	beq.n	8002458 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <HAL_Delay+0x20>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002458:	f7ff ffee 	bl	8002438 <HAL_GetTick>
 800245c:	1b40      	subs	r0, r0, r5
 800245e:	42a0      	cmp	r0, r4
 8002460:	d3fa      	bcc.n	8002458 <HAL_Delay+0x14>
  {
  }
}
 8002462:	bd70      	pop	{r4, r5, r6, pc}
 8002464:	20000010 	.word	0x20000010

08002468 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002468:	2103      	movs	r1, #3
 800246a:	6803      	ldr	r3, [r0, #0]
{
 800246c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800246e:	689a      	ldr	r2, [r3, #8]
{
 8002470:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002472:	400a      	ands	r2, r1
 8002474:	2a01      	cmp	r2, #1
 8002476:	d001      	beq.n	800247c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002478:	2000      	movs	r0, #0
}
 800247a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	4211      	tst	r1, r2
 8002480:	d102      	bne.n	8002488 <ADC_Disable+0x20>
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	0412      	lsls	r2, r2, #16
 8002486:	d5f7      	bpl.n	8002478 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002488:	2205      	movs	r2, #5
 800248a:	689d      	ldr	r5, [r3, #8]
 800248c:	4015      	ands	r5, r2
 800248e:	2d01      	cmp	r5, #1
 8002490:	d11a      	bne.n	80024c8 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 8002492:	6899      	ldr	r1, [r3, #8]
 8002494:	3a03      	subs	r2, #3
 8002496:	430a      	orrs	r2, r1
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	2203      	movs	r2, #3
 800249c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800249e:	f7ff ffcb 	bl	8002438 <HAL_GetTick>
 80024a2:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	422b      	tst	r3, r5
 80024aa:	d0e5      	beq.n	8002478 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024ac:	f7ff ffc4 	bl	8002438 <HAL_GetTick>
 80024b0:	1b80      	subs	r0, r0, r6
 80024b2:	2802      	cmp	r0, #2
 80024b4:	d9f6      	bls.n	80024a4 <ADC_Disable+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	2310      	movs	r3, #16
 80024b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 80024ba:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024bc:	4313      	orrs	r3, r2
 80024be:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024c2:	431d      	orrs	r5, r3
 80024c4:	63e5      	str	r5, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80024c6:	e7d8      	b.n	800247a <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c8:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ca:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80024ce:	4313      	orrs	r3, r2
 80024d0:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024d4:	4303      	orrs	r3, r0
 80024d6:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80024d8:	e7cf      	b.n	800247a <ADC_Disable+0x12>
	...

080024dc <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80024dc:	2300      	movs	r3, #0
{
 80024de:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024e0:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 80024e2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024e4:	6803      	ldr	r3, [r0, #0]
{
 80024e6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	400a      	ands	r2, r1
 80024ec:	2a01      	cmp	r2, #1
 80024ee:	d107      	bne.n	8002500 <ADC_Enable+0x24>
 80024f0:	6819      	ldr	r1, [r3, #0]
 80024f2:	4211      	tst	r1, r2
 80024f4:	d001      	beq.n	80024fa <ADC_Enable+0x1e>
  return HAL_OK;
 80024f6:	2000      	movs	r0, #0
}
 80024f8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	0412      	lsls	r2, r2, #16
 80024fe:	d4fa      	bmi.n	80024f6 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002500:	6899      	ldr	r1, [r3, #8]
 8002502:	4a19      	ldr	r2, [pc, #100]	; (8002568 <ADC_Enable+0x8c>)
 8002504:	4211      	tst	r1, r2
 8002506:	d008      	beq.n	800251a <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002508:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800250e:	4313      	orrs	r3, r2
 8002510:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002512:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002514:	4303      	orrs	r3, r0
 8002516:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8002518:	e7ee      	b.n	80024f8 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 800251a:	2201      	movs	r2, #1
 800251c:	6899      	ldr	r1, [r3, #8]
 800251e:	430a      	orrs	r2, r1
 8002520:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <ADC_Enable+0x90>)
 8002524:	4912      	ldr	r1, [pc, #72]	; (8002570 <ADC_Enable+0x94>)
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	f7fd fe0a 	bl	8000140 <__udivsi3>
 800252c:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800252e:	9b01      	ldr	r3, [sp, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d115      	bne.n	8002560 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8002534:	f7ff ff80 	bl	8002438 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002538:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800253a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	422b      	tst	r3, r5
 8002542:	d1d8      	bne.n	80024f6 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002544:	f7ff ff78 	bl	8002438 <HAL_GetTick>
 8002548:	1b80      	subs	r0, r0, r6
 800254a:	2802      	cmp	r0, #2
 800254c:	d9f6      	bls.n	800253c <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254e:	2310      	movs	r3, #16
 8002550:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002552:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002554:	4313      	orrs	r3, r2
 8002556:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002558:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800255a:	432b      	orrs	r3, r5
 800255c:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800255e:	e7cb      	b.n	80024f8 <ADC_Enable+0x1c>
      wait_loop_index--;
 8002560:	9b01      	ldr	r3, [sp, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	e7e2      	b.n	800252e <ADC_Enable+0x52>
 8002568:	80000017 	.word	0x80000017
 800256c:	2000000c 	.word	0x2000000c
 8002570:	000f4240 	.word	0x000f4240

08002574 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002574:	2204      	movs	r2, #4
 8002576:	6803      	ldr	r3, [r0, #0]
{
 8002578:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800257a:	6899      	ldr	r1, [r3, #8]
{
 800257c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800257e:	4211      	tst	r1, r2
 8002580:	d101      	bne.n	8002586 <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002582:	2000      	movs	r0, #0
}
 8002584:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	4211      	tst	r1, r2
 800258a:	d006      	beq.n	800259a <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800258c:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800258e:	0792      	lsls	r2, r2, #30
 8002590:	d403      	bmi.n	800259a <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002592:	2210      	movs	r2, #16
 8002594:	6899      	ldr	r1, [r3, #8]
 8002596:	430a      	orrs	r2, r1
 8002598:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800259a:	f7ff ff4d 	bl	8002438 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800259e:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 80025a0:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	422b      	tst	r3, r5
 80025a8:	d0eb      	beq.n	8002582 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025aa:	f7ff ff45 	bl	8002438 <HAL_GetTick>
 80025ae:	1b80      	subs	r0, r0, r6
 80025b0:	2802      	cmp	r0, #2
 80025b2:	d9f6      	bls.n	80025a2 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b4:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025ba:	4313      	orrs	r3, r2
 80025bc:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025c0:	4303      	orrs	r3, r0
 80025c2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80025c4:	e7de      	b.n	8002584 <ADC_ConversionStop+0x10>
	...

080025c8 <HAL_ADC_Init>:
{
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	0004      	movs	r4, r0
    return HAL_ERROR;
 80025cc:	2001      	movs	r0, #1
  if(hadc == NULL)
 80025ce:	2c00      	cmp	r4, #0
 80025d0:	d07e      	beq.n	80026d0 <HAL_ADC_Init+0x108>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d106      	bne.n	80025e6 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 80025d8:	0022      	movs	r2, r4
 80025da:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80025dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80025de:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80025e0:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80025e2:	f7ff fd85 	bl	80020f0 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025e8:	06db      	lsls	r3, r3, #27
 80025ea:	d500      	bpl.n	80025ee <HAL_ADC_Init+0x26>
 80025ec:	e085      	b.n	80026fa <HAL_ADC_Init+0x132>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80025ee:	2204      	movs	r2, #4
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	6898      	ldr	r0, [r3, #8]
 80025f4:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80025f6:	d000      	beq.n	80025fa <HAL_ADC_Init+0x32>
 80025f8:	e07f      	b.n	80026fa <HAL_ADC_Init+0x132>
    ADC_STATE_CLR_SET(hadc->State,
 80025fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025fc:	4942      	ldr	r1, [pc, #264]	; (8002708 <HAL_ADC_Init+0x140>)
 80025fe:	4011      	ands	r1, r2
 8002600:	2202      	movs	r2, #2
 8002602:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002604:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8002606:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	400a      	ands	r2, r1
 800260c:	2a01      	cmp	r2, #1
 800260e:	d105      	bne.n	800261c <HAL_ADC_Init+0x54>
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	4211      	tst	r1, r2
 8002614:	d10e      	bne.n	8002634 <HAL_ADC_Init+0x6c>
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	0412      	lsls	r2, r2, #16
 800261a:	d40b      	bmi.n	8002634 <HAL_ADC_Init+0x6c>
      MODIFY_REG(hadc->Instance->CFGR1,
 800261c:	2118      	movs	r1, #24
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	438a      	bics	r2, r1
 8002622:	68a1      	ldr	r1, [r4, #8]
 8002624:	430a      	orrs	r2, r1
 8002626:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002628:	6919      	ldr	r1, [r3, #16]
 800262a:	6862      	ldr	r2, [r4, #4]
 800262c:	0089      	lsls	r1, r1, #2
 800262e:	0889      	lsrs	r1, r1, #2
 8002630:	4311      	orrs	r1, r2
 8002632:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	4935      	ldr	r1, [pc, #212]	; (800270c <HAL_ADC_Init+0x144>)
 8002638:	400a      	ands	r2, r1
 800263a:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800263c:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800263e:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002640:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002642:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002644:	4315      	orrs	r5, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002646:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002648:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800264a:	3a01      	subs	r2, #1
 800264c:	1e56      	subs	r6, r2, #1
 800264e:	41b2      	sbcs	r2, r6
 8002650:	0316      	lsls	r6, r2, #12
 8002652:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002654:	034f      	lsls	r7, r1, #13
 8002656:	4315      	orrs	r5, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002658:	6922      	ldr	r2, [r4, #16]
 800265a:	432f      	orrs	r7, r5
 800265c:	2a02      	cmp	r2, #2
 800265e:	d100      	bne.n	8002662 <HAL_ADC_Init+0x9a>
 8002660:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002662:	1d62      	adds	r2, r4, #5
 8002664:	7fd2      	ldrb	r2, [r2, #31]
 8002666:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002668:	433a      	orrs	r2, r7
 800266a:	4332      	orrs	r2, r6
 800266c:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800266e:	7ee0      	ldrb	r0, [r4, #27]
 8002670:	2801      	cmp	r0, #1
 8002672:	d104      	bne.n	800267e <HAL_ADC_Init+0xb6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002674:	2900      	cmp	r1, #0
 8002676:	d12c      	bne.n	80026d2 <HAL_ADC_Init+0x10a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	0249      	lsls	r1, r1, #9
 800267c:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800267e:	20c2      	movs	r0, #194	; 0xc2
 8002680:	69e1      	ldr	r1, [r4, #28]
 8002682:	30ff      	adds	r0, #255	; 0xff
 8002684:	4281      	cmp	r1, r0
 8002686:	d002      	beq.n	800268e <HAL_ADC_Init+0xc6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002688:	6a20      	ldr	r0, [r4, #32]
 800268a:	4301      	orrs	r1, r0
 800268c:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800268e:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002690:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002692:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002694:	4311      	orrs	r1, r2
 8002696:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002698:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800269a:	4281      	cmp	r1, r0
 800269c:	d002      	beq.n	80026a4 <HAL_ADC_Init+0xdc>
 800269e:	1e48      	subs	r0, r1, #1
 80026a0:	2806      	cmp	r0, #6
 80026a2:	d807      	bhi.n	80026b4 <HAL_ADC_Init+0xec>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80026a4:	2507      	movs	r5, #7
 80026a6:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80026a8:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80026aa:	43a8      	bics	r0, r5
 80026ac:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80026ae:	6958      	ldr	r0, [r3, #20]
 80026b0:	4301      	orrs	r1, r0
 80026b2:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	4916      	ldr	r1, [pc, #88]	; (8002710 <HAL_ADC_Init+0x148>)
 80026b8:	400b      	ands	r3, r1
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d111      	bne.n	80026e2 <HAL_ADC_Init+0x11a>
      ADC_CLEAR_ERRORCODE(hadc);
 80026be:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80026c0:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80026c2:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80026c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026c6:	4393      	bics	r3, r2
 80026c8:	001a      	movs	r2, r3
 80026ca:	2301      	movs	r3, #1
 80026cc:	4313      	orrs	r3, r2
 80026ce:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80026d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d2:	2120      	movs	r1, #32
 80026d4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80026d6:	4329      	orrs	r1, r5
 80026d8:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80026dc:	4308      	orrs	r0, r1
 80026de:	63e0      	str	r0, [r4, #60]	; 0x3c
 80026e0:	e7cd      	b.n	800267e <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 80026e2:	2212      	movs	r2, #18
 80026e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e6:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80026e8:	4393      	bics	r3, r2
 80026ea:	001a      	movs	r2, r3
 80026ec:	2310      	movs	r3, #16
 80026ee:	4313      	orrs	r3, r2
 80026f0:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026f4:	4303      	orrs	r3, r0
 80026f6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80026f8:	e7ea      	b.n	80026d0 <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fa:	2310      	movs	r3, #16
 80026fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80026fe:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002700:	4313      	orrs	r3, r2
 8002702:	63a3      	str	r3, [r4, #56]	; 0x38
 8002704:	e7e4      	b.n	80026d0 <HAL_ADC_Init+0x108>
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	fffffefd 	.word	0xfffffefd
 800270c:	fffe0219 	.word	0xfffe0219
 8002710:	833fffe7 	.word	0x833fffe7

08002714 <HAL_ADC_Start_DMA>:
{
 8002714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002716:	6803      	ldr	r3, [r0, #0]
{
 8002718:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800271a:	689b      	ldr	r3, [r3, #8]
{
 800271c:	000f      	movs	r7, r1
 800271e:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 8002720:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002722:	075b      	lsls	r3, r3, #29
 8002724:	d430      	bmi.n	8002788 <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 8002726:	0026      	movs	r6, r4
 8002728:	3634      	adds	r6, #52	; 0x34
 800272a:	7833      	ldrb	r3, [r6, #0]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d02b      	beq.n	8002788 <HAL_ADC_Start_DMA+0x74>
 8002730:	2301      	movs	r3, #1
 8002732:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002734:	7e63      	ldrb	r3, [r4, #25]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d127      	bne.n	800278a <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 800273a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800273c:	4a16      	ldr	r2, [pc, #88]	; (8002798 <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 800273e:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002740:	401a      	ands	r2, r3
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4313      	orrs	r3, r2
 8002748:	63a3      	str	r3, [r4, #56]	; 0x38
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800274a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 800274e:	63e5      	str	r5, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8002750:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002752:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002756:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002758:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_ADC_Start_DMA+0x90>)
 800275c:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800275e:	231c      	movs	r3, #28
 8002760:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002762:	684a      	ldr	r2, [r1, #4]
 8002764:	3b0c      	subs	r3, #12
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800276a:	2301      	movs	r3, #1
 800276c:	68ca      	ldr	r2, [r1, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002772:	003a      	movs	r2, r7
 8002774:	3140      	adds	r1, #64	; 0x40
 8002776:	9b01      	ldr	r3, [sp, #4]
 8002778:	f000 fa20 	bl	8002bbc <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800277c:	2304      	movs	r3, #4
 800277e:	0028      	movs	r0, r5
 8002780:	6822      	ldr	r2, [r4, #0]
 8002782:	6891      	ldr	r1, [r2, #8]
 8002784:	430b      	orrs	r3, r1
 8002786:	6093      	str	r3, [r2, #8]
}
 8002788:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800278a:	0020      	movs	r0, r4
 800278c:	f7ff fea6 	bl	80024dc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002790:	2800      	cmp	r0, #0
 8002792:	d0d2      	beq.n	800273a <HAL_ADC_Start_DMA+0x26>
 8002794:	e7f8      	b.n	8002788 <HAL_ADC_Start_DMA+0x74>
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	fffff0fe 	.word	0xfffff0fe
 800279c:	0800281d 	.word	0x0800281d
 80027a0:	0800288f 	.word	0x0800288f
 80027a4:	0800289d 	.word	0x0800289d

080027a8 <HAL_ADC_Stop_DMA>:
{  
 80027a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80027aa:	0006      	movs	r6, r0
 80027ac:	3634      	adds	r6, #52	; 0x34
 80027ae:	7833      	ldrb	r3, [r6, #0]
{  
 80027b0:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80027b2:	2502      	movs	r5, #2
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d020      	beq.n	80027fa <HAL_ADC_Stop_DMA+0x52>
 80027b8:	2701      	movs	r7, #1
 80027ba:	7037      	strb	r7, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80027bc:	f7ff feda 	bl	8002574 <ADC_ConversionStop>
 80027c0:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 80027c2:	d118      	bne.n	80027f6 <HAL_ADC_Stop_DMA+0x4e>
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 80027c4:	6822      	ldr	r2, [r4, #0]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80027c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 80027c8:	68d3      	ldr	r3, [r2, #12]
 80027ca:	43bb      	bics	r3, r7
 80027cc:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80027ce:	f000 fa31 	bl	8002c34 <HAL_DMA_Abort>
 80027d2:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status != HAL_OK)
 80027d4:	d003      	beq.n	80027de <HAL_ADC_Stop_DMA+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027d6:	2340      	movs	r3, #64	; 0x40
 80027d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80027da:	4313      	orrs	r3, r2
 80027dc:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80027de:	2110      	movs	r1, #16
 80027e0:	6822      	ldr	r2, [r4, #0]
 80027e2:	6853      	ldr	r3, [r2, #4]
 80027e4:	438b      	bics	r3, r1
 80027e6:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d108      	bne.n	80027fe <HAL_ADC_Stop_DMA+0x56>
      tmp_hal_status = ADC_Disable(hadc);
 80027ec:	0020      	movs	r0, r4
 80027ee:	f7ff fe3b 	bl	8002468 <ADC_Disable>
 80027f2:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 80027f4:	d007      	beq.n	8002806 <HAL_ADC_Stop_DMA+0x5e>
  __HAL_UNLOCK(hadc);
 80027f6:	2300      	movs	r3, #0
 80027f8:	7033      	strb	r3, [r6, #0]
}
 80027fa:	0028      	movs	r0, r5
 80027fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ADC_Disable(hadc);
 80027fe:	0020      	movs	r0, r4
 8002800:	f7ff fe32 	bl	8002468 <ADC_Disable>
 8002804:	e7f7      	b.n	80027f6 <HAL_ADC_Stop_DMA+0x4e>
      ADC_STATE_CLR_SET(hadc->State,
 8002806:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002808:	4a02      	ldr	r2, [pc, #8]	; (8002814 <HAL_ADC_Stop_DMA+0x6c>)
 800280a:	401a      	ands	r2, r3
 800280c:	2301      	movs	r3, #1
 800280e:	4313      	orrs	r3, r2
 8002810:	63a3      	str	r3, [r4, #56]	; 0x38
 8002812:	e7f0      	b.n	80027f6 <HAL_ADC_Stop_DMA+0x4e>
 8002814:	fffffefe 	.word	0xfffffefe

08002818 <HAL_ADC_ConvCpltCallback>:
 8002818:	4770      	bx	lr
	...

0800281c <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800281c:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800281e:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002820:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002822:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002824:	4211      	tst	r1, r2
 8002826:	d12a      	bne.n	800287e <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002828:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800282a:	32b1      	adds	r2, #177	; 0xb1
 800282c:	32ff      	adds	r2, #255	; 0xff
 800282e:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002830:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002832:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	0109      	lsls	r1, r1, #4
 8002838:	68d0      	ldr	r0, [r2, #12]
 800283a:	4208      	tst	r0, r1
 800283c:	d112      	bne.n	8002864 <ADC_DMAConvCplt+0x48>
 800283e:	7e99      	ldrb	r1, [r3, #26]
 8002840:	2900      	cmp	r1, #0
 8002842:	d10f      	bne.n	8002864 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002844:	6811      	ldr	r1, [r2, #0]
 8002846:	0709      	lsls	r1, r1, #28
 8002848:	d50c      	bpl.n	8002864 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800284a:	6891      	ldr	r1, [r2, #8]
 800284c:	0749      	lsls	r1, r1, #29
 800284e:	d40d      	bmi.n	800286c <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002850:	200c      	movs	r0, #12
 8002852:	6851      	ldr	r1, [r2, #4]
 8002854:	4381      	bics	r1, r0
 8002856:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800285a:	490b      	ldr	r1, [pc, #44]	; (8002888 <ADC_DMAConvCplt+0x6c>)
 800285c:	4011      	ands	r1, r2
 800285e:	2201      	movs	r2, #1
 8002860:	430a      	orrs	r2, r1
 8002862:	639a      	str	r2, [r3, #56]	; 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002864:	0018      	movs	r0, r3
 8002866:	f7ff ffd7 	bl	8002818 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800286a:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800286c:	2220      	movs	r2, #32
 800286e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002870:	430a      	orrs	r2, r1
 8002872:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002874:	2201      	movs	r2, #1
 8002876:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002878:	430a      	orrs	r2, r1
 800287a:	63da      	str	r2, [r3, #60]	; 0x3c
 800287c:	e7f2      	b.n	8002864 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4798      	blx	r3
}
 8002884:	e7f1      	b.n	800286a <ADC_DMAConvCplt+0x4e>
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	fffffefe 	.word	0xfffffefe

0800288c <HAL_ADC_ConvHalfCpltCallback>:
 800288c:	4770      	bx	lr

0800288e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800288e:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002890:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002892:	f7ff fffb 	bl	800288c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002896:	bd10      	pop	{r4, pc}

08002898 <HAL_ADC_LevelOutOfWindowCallback>:
 8002898:	4770      	bx	lr

0800289a <HAL_ADC_ErrorCallback>:
 800289a:	4770      	bx	lr

0800289c <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800289c:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800289e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80028a0:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028a2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80028a4:	4313      	orrs	r3, r2
 80028a6:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028a8:	2304      	movs	r3, #4
 80028aa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80028ac:	4313      	orrs	r3, r2
 80028ae:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80028b0:	f7ff fff3 	bl	800289a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028b4:	bd10      	pop	{r4, pc}
	...

080028b8 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80028b8:	2204      	movs	r2, #4
 80028ba:	6803      	ldr	r3, [r0, #0]
{
 80028bc:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80028be:	6819      	ldr	r1, [r3, #0]
{
 80028c0:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80028c2:	4211      	tst	r1, r2
 80028c4:	d002      	beq.n	80028cc <HAL_ADC_IRQHandler+0x14>
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	4211      	tst	r1, r2
 80028ca:	d106      	bne.n	80028da <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80028cc:	2208      	movs	r2, #8
 80028ce:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80028d0:	4211      	tst	r1, r2
 80028d2:	d028      	beq.n	8002926 <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	4211      	tst	r1, r2
 80028d8:	d025      	beq.n	8002926 <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80028dc:	06d2      	lsls	r2, r2, #27
 80028de:	d404      	bmi.n	80028ea <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028e0:	2280      	movs	r2, #128	; 0x80
 80028e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80028e4:	0092      	lsls	r2, r2, #2
 80028e6:	430a      	orrs	r2, r1
 80028e8:	63a2      	str	r2, [r4, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028ea:	22c0      	movs	r2, #192	; 0xc0
 80028ec:	68d9      	ldr	r1, [r3, #12]
 80028ee:	0112      	lsls	r2, r2, #4
 80028f0:	4211      	tst	r1, r2
 80028f2:	d112      	bne.n	800291a <HAL_ADC_IRQHandler+0x62>
 80028f4:	7ea2      	ldrb	r2, [r4, #26]
 80028f6:	2a00      	cmp	r2, #0
 80028f8:	d10f      	bne.n	800291a <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	0712      	lsls	r2, r2, #28
 80028fe:	d50c      	bpl.n	800291a <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	0752      	lsls	r2, r2, #29
 8002904:	d43c      	bmi.n	8002980 <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002906:	210c      	movs	r1, #12
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	438a      	bics	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800290e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002910:	4a20      	ldr	r2, [pc, #128]	; (8002994 <HAL_ADC_IRQHandler+0xdc>)
 8002912:	401a      	ands	r2, r3
 8002914:	2301      	movs	r3, #1
 8002916:	4313      	orrs	r3, r2
 8002918:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_ADC_ConvCpltCallback(hadc);
 800291a:	0020      	movs	r0, r4
 800291c:	f7ff ff7c 	bl	8002818 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002920:	220c      	movs	r2, #12
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002926:	2580      	movs	r5, #128	; 0x80
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	422a      	tst	r2, r5
 800292e:	d00c      	beq.n	800294a <HAL_ADC_IRQHandler+0x92>
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	422b      	tst	r3, r5
 8002934:	d009      	beq.n	800294a <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800293a:	025b      	lsls	r3, r3, #9
 800293c:	4313      	orrs	r3, r2
 800293e:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002940:	0020      	movs	r0, r4
 8002942:	f7ff ffa9 	bl	8002898 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800294a:	2210      	movs	r2, #16
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	4211      	tst	r1, r2
 8002952:	d014      	beq.n	800297e <HAL_ADC_IRQHandler+0xc6>
 8002954:	6859      	ldr	r1, [r3, #4]
 8002956:	4211      	tst	r1, r2
 8002958:	d011      	beq.n	800297e <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800295a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800295c:	2a01      	cmp	r2, #1
 800295e:	d002      	beq.n	8002966 <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002960:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002962:	07d2      	lsls	r2, r2, #31
 8002964:	d508      	bpl.n	8002978 <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002966:	2202      	movs	r2, #2
 8002968:	6be1      	ldr	r1, [r4, #60]	; 0x3c
      HAL_ADC_ErrorCallback(hadc);
 800296a:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800296c:	430a      	orrs	r2, r1
 800296e:	63e2      	str	r2, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002970:	2210      	movs	r2, #16
 8002972:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002974:	f7ff ff91 	bl	800289a <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002978:	2210      	movs	r2, #16
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	601a      	str	r2, [r3, #0]
}
 800297e:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002980:	2320      	movs	r3, #32
 8002982:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002984:	4313      	orrs	r3, r2
 8002986:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002988:	2301      	movs	r3, #1
 800298a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800298c:	4313      	orrs	r3, r2
 800298e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002990:	e7c3      	b.n	800291a <HAL_ADC_IRQHandler+0x62>
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	fffffefe 	.word	0xfffffefe

08002998 <HAL_ADC_ConfigChannel>:
{
 8002998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 800299a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800299c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 800299e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80029a0:	3434      	adds	r4, #52	; 0x34
 80029a2:	7822      	ldrb	r2, [r4, #0]
{
 80029a4:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 80029a6:	2002      	movs	r0, #2
 80029a8:	2a01      	cmp	r2, #1
 80029aa:	d02b      	beq.n	8002a04 <HAL_ADC_ConfigChannel+0x6c>
 80029ac:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029ae:	681d      	ldr	r5, [r3, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80029b0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029b2:	68a8      	ldr	r0, [r5, #8]
  __HAL_LOCK(hadc);
 80029b4:	7022      	strb	r2, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029b6:	0740      	lsls	r0, r0, #29
 80029b8:	d45a      	bmi.n	8002a70 <HAL_ADC_ConfigChannel+0xd8>
 80029ba:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 80029bc:	482f      	ldr	r0, [pc, #188]	; (8002a7c <HAL_ADC_ConfigChannel+0xe4>)
 80029be:	001f      	movs	r7, r3
 80029c0:	4684      	mov	ip, r0
 80029c2:	6848      	ldr	r0, [r1, #4]
 80029c4:	409a      	lsls	r2, r3
 80029c6:	3f10      	subs	r7, #16
 80029c8:	4560      	cmp	r0, ip
 80029ca:	d03b      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0xac>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80029cc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80029ce:	4310      	orrs	r0, r2
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80029d0:	2280      	movs	r2, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80029d2:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80029d4:	0552      	lsls	r2, r2, #21
 80029d6:	4296      	cmp	r6, r2
 80029d8:	d00f      	beq.n	80029fa <HAL_ADC_ConfigChannel+0x62>
 80029da:	3e01      	subs	r6, #1
 80029dc:	2e06      	cmp	r6, #6
 80029de:	d90c      	bls.n	80029fa <HAL_ADC_ConfigChannel+0x62>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80029e0:	688a      	ldr	r2, [r1, #8]
 80029e2:	2107      	movs	r1, #7
 80029e4:	6968      	ldr	r0, [r5, #20]
 80029e6:	4008      	ands	r0, r1
 80029e8:	4282      	cmp	r2, r0
 80029ea:	d006      	beq.n	80029fa <HAL_ADC_ConfigChannel+0x62>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80029ec:	6968      	ldr	r0, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80029ee:	400a      	ands	r2, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80029f0:	4388      	bics	r0, r1
 80029f2:	6168      	str	r0, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80029f4:	6968      	ldr	r0, [r5, #20]
 80029f6:	4302      	orrs	r2, r0
 80029f8:	616a      	str	r2, [r5, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029fa:	2f02      	cmp	r7, #2
 80029fc:	d903      	bls.n	8002a06 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029fe:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002a00:	2300      	movs	r3, #0
 8002a02:	7023      	strb	r3, [r4, #0]
}
 8002a04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <HAL_ADC_ConfigChannel+0xe8>)
 8002a08:	2080      	movs	r0, #128	; 0x80
 8002a0a:	6811      	ldr	r1, [r2, #0]
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d015      	beq.n	8002a3c <HAL_ADC_ConfigChannel+0xa4>
 8002a10:	2b11      	cmp	r3, #17
 8002a12:	d115      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0xa8>
 8002a14:	03c0      	lsls	r0, r0, #15
 8002a16:	4301      	orrs	r1, r0
 8002a18:	6011      	str	r1, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d1ef      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <HAL_ADC_ConfigChannel+0xec>)
 8002a20:	4919      	ldr	r1, [pc, #100]	; (8002a88 <HAL_ADC_ConfigChannel+0xf0>)
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	f7fd fb8c 	bl	8000140 <__udivsi3>
 8002a28:	230a      	movs	r3, #10
 8002a2a:	4358      	muls	r0, r3
 8002a2c:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8002a2e:	9b01      	ldr	r3, [sp, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0e4      	beq.n	80029fe <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8002a34:	9b01      	ldr	r3, [sp, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	e7f8      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a3c:	0400      	lsls	r0, r0, #16
 8002a3e:	e7ea      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x7e>
 8002a40:	0440      	lsls	r0, r0, #17
 8002a42:	e7e8      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002a44:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002a46:	4391      	bics	r1, r2
 8002a48:	62a9      	str	r1, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a4a:	2f02      	cmp	r7, #2
 8002a4c:	d8d7      	bhi.n	80029fe <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a4e:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <HAL_ADC_ConfigChannel+0xe8>)
 8002a50:	6811      	ldr	r1, [r2, #0]
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d00a      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0xd4>
 8002a56:	3b11      	subs	r3, #17
 8002a58:	1e58      	subs	r0, r3, #1
 8002a5a:	4183      	sbcs	r3, r0
 8002a5c:	480b      	ldr	r0, [pc, #44]	; (8002a8c <HAL_ADC_ConfigChannel+0xf4>)
 8002a5e:	425b      	negs	r3, r3
 8002a60:	4003      	ands	r3, r0
 8002a62:	480b      	ldr	r0, [pc, #44]	; (8002a90 <HAL_ADC_ConfigChannel+0xf8>)
 8002a64:	181b      	adds	r3, r3, r0
 8002a66:	400b      	ands	r3, r1
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e7c8      	b.n	80029fe <HAL_ADC_ConfigChannel+0x66>
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_ADC_ConfigChannel+0xfc>)
 8002a6e:	e7fa      	b.n	8002a66 <HAL_ADC_ConfigChannel+0xce>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a70:	2120      	movs	r1, #32
 8002a72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a74:	4301      	orrs	r1, r0
 8002a76:	6399      	str	r1, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8002a78:	0010      	movs	r0, r2
 8002a7a:	e7c1      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x68>
 8002a7c:	00001001 	.word	0x00001001
 8002a80:	40012708 	.word	0x40012708
 8002a84:	2000000c 	.word	0x2000000c
 8002a88:	000f4240 	.word	0x000f4240
 8002a8c:	ff400000 	.word	0xff400000
 8002a90:	ffbfffff 	.word	0xffbfffff
 8002a94:	ff7fffff 	.word	0xff7fffff

08002a98 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a98:	b530      	push	{r4, r5, lr}
 8002a9a:	25ff      	movs	r5, #255	; 0xff
 8002a9c:	2403      	movs	r4, #3
 8002a9e:	002a      	movs	r2, r5
 8002aa0:	b2c3      	uxtb	r3, r0
 8002aa2:	401c      	ands	r4, r3
 8002aa4:	00e4      	lsls	r4, r4, #3
 8002aa6:	40a2      	lsls	r2, r4
 8002aa8:	0189      	lsls	r1, r1, #6
 8002aaa:	4029      	ands	r1, r5
 8002aac:	43d2      	mvns	r2, r2
 8002aae:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	db0a      	blt.n	8002aca <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ab4:	24c0      	movs	r4, #192	; 0xc0
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_NVIC_SetPriority+0x4c>)
 8002ab8:	0880      	lsrs	r0, r0, #2
 8002aba:	0080      	lsls	r0, r0, #2
 8002abc:	18c0      	adds	r0, r0, r3
 8002abe:	00a4      	lsls	r4, r4, #2
 8002ac0:	5903      	ldr	r3, [r0, r4]
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	4311      	orrs	r1, r2
 8002ac6:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002ac8:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aca:	200f      	movs	r0, #15
 8002acc:	4003      	ands	r3, r0
 8002ace:	3b08      	subs	r3, #8
 8002ad0:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <HAL_NVIC_SetPriority+0x50>)
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	181b      	adds	r3, r3, r0
 8002ad8:	69d8      	ldr	r0, [r3, #28]
 8002ada:	4002      	ands	r2, r0
 8002adc:	4311      	orrs	r1, r2
 8002ade:	61d9      	str	r1, [r3, #28]
 8002ae0:	e7f2      	b.n	8002ac8 <HAL_NVIC_SetPriority+0x30>
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	e000e100 	.word	0xe000e100
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002aec:	2800      	cmp	r0, #0
 8002aee:	db05      	blt.n	8002afc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af0:	231f      	movs	r3, #31
 8002af2:	4018      	ands	r0, r3
 8002af4:	3b1e      	subs	r3, #30
 8002af6:	4083      	lsls	r3, r0
 8002af8:	4a01      	ldr	r2, [pc, #4]	; (8002b00 <HAL_NVIC_EnableIRQ+0x14>)
 8002afa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002afc:	4770      	bx	lr
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	e000e100 	.word	0xe000e100

08002b04 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b04:	2800      	cmp	r0, #0
 8002b06:	db09      	blt.n	8002b1c <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b08:	231f      	movs	r3, #31
 8002b0a:	4018      	ands	r0, r3
 8002b0c:	3b1e      	subs	r3, #30
 8002b0e:	4083      	lsls	r3, r0
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_NVIC_DisableIRQ+0x1c>)
 8002b12:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b18:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002b1c:	4770      	bx	lr
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	e000e104 	.word	0xe000e104

08002b24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b24:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_SYSTICK_Config+0x28>)
 8002b26:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b28:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d80d      	bhi.n	8002b4a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b2e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b30:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b32:	4808      	ldr	r0, [pc, #32]	; (8002b54 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b34:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b36:	6a03      	ldr	r3, [r0, #32]
 8002b38:	0609      	lsls	r1, r1, #24
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b42:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b44:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b46:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b48:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b4a:	4770      	bx	lr
 8002b4c:	00ffffff 	.word	0x00ffffff
 8002b50:	e000e010 	.word	0xe000e010
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8002b5c:	2501      	movs	r5, #1
  if(NULL == hdma)
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d024      	beq.n	8002bac <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b62:	2302      	movs	r3, #2
 8002b64:	1c86      	adds	r6, r0, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b66:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b68:	77f3      	strb	r3, [r6, #31]
  tmp = hdma->Instance->CCR;
 8002b6a:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b6c:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_DMA_Init+0x58>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b6e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b70:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8002b72:	6863      	ldr	r3, [r4, #4]
 8002b74:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b76:	68e1      	ldr	r1, [r4, #12]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6921      	ldr	r1, [r4, #16]
 8002b7c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7e:	6961      	ldr	r1, [r4, #20]
 8002b80:	430b      	orrs	r3, r1
 8002b82:	69a1      	ldr	r1, [r4, #24]
 8002b84:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b86:	69e1      	ldr	r1, [r4, #28]
 8002b88:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8002b8a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002b8c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_DMA_Init+0x5c>)
 8002b90:	2114      	movs	r1, #20
 8002b92:	18c0      	adds	r0, r0, r3
 8002b94:	f7fd fad4 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002b98:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b9a:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8002b9c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9e:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ba0:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba2:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002ba4:	77f5      	strb	r5, [r6, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002ba6:	1964      	adds	r4, r4, r5
  return HAL_OK;
 8002ba8:	001d      	movs	r5, r3
  hdma->Lock = HAL_UNLOCKED;
 8002baa:	77e3      	strb	r3, [r4, #31]
}  
 8002bac:	0028      	movs	r0, r5
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	ffffc00f 	.word	0xffffc00f
 8002bb4:	bffdfff8 	.word	0xbffdfff8
 8002bb8:	40020000 	.word	0x40020000

08002bbc <HAL_DMA_Start_IT>:
{
 8002bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8002bbe:	1c44      	adds	r4, r0, #1
 8002bc0:	7fe6      	ldrb	r6, [r4, #31]
{
 8002bc2:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 8002bc4:	2002      	movs	r0, #2
 8002bc6:	2e01      	cmp	r6, #1
 8002bc8:	d027      	beq.n	8002c1a <HAL_DMA_Start_IT+0x5e>
 8002bca:	3801      	subs	r0, #1
 8002bcc:	77e0      	strb	r0, [r4, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bce:	1ca8      	adds	r0, r5, #2
 8002bd0:	7fc6      	ldrb	r6, [r0, #31]
 8002bd2:	4684      	mov	ip, r0
 8002bd4:	b2f6      	uxtb	r6, r6
 8002bd6:	2002      	movs	r0, #2
 8002bd8:	2700      	movs	r7, #0
 8002bda:	2e01      	cmp	r6, #1
 8002bdc:	d128      	bne.n	8002c30 <HAL_DMA_Start_IT+0x74>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002bde:	4664      	mov	r4, ip
 8002be0:	77e0      	strb	r0, [r4, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002be2:	682c      	ldr	r4, [r5, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be4:	63af      	str	r7, [r5, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002be6:	6820      	ldr	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002be8:	6c2f      	ldr	r7, [r5, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002bea:	43b0      	bics	r0, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002bec:	40be      	lsls	r6, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002bee:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002bf0:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8002bf2:	6046      	str	r6, [r0, #4]
  hdma->Instance->CNDTR = DataLength;
 8002bf4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bf6:	686b      	ldr	r3, [r5, #4]
 8002bf8:	6828      	ldr	r0, [r5, #0]
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d10e      	bne.n	8002c1c <HAL_DMA_Start_IT+0x60>
    hdma->Instance->CPAR = DstAddress;
 8002bfe:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002c00:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002c02:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c04:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <HAL_DMA_Start_IT+0x66>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c0a:	230e      	movs	r3, #14
 8002c0c:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c0e:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002c10:	2301      	movs	r3, #1
 8002c12:	6802      	ldr	r2, [r0, #0]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	6003      	str	r3, [r0, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002c18:	2000      	movs	r0, #0
} 
 8002c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8002c1c:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c1e:	60e2      	str	r2, [r4, #12]
 8002c20:	e7ef      	b.n	8002c02 <HAL_DMA_Start_IT+0x46>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c22:	230a      	movs	r3, #10
 8002c24:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c26:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c28:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	4393      	bics	r3, r2
 8002c2e:	e7ee      	b.n	8002c0e <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8002c30:	77e7      	strb	r7, [r4, #31]
 8002c32:	e7f2      	b.n	8002c1a <HAL_DMA_Start_IT+0x5e>

08002c34 <HAL_DMA_Abort>:
{
 8002c34:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c36:	1c85      	adds	r5, r0, #2
 8002c38:	7feb      	ldrb	r3, [r5, #31]
 8002c3a:	1c44      	adds	r4, r0, #1
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d005      	beq.n	8002c4c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c40:	2304      	movs	r3, #4
 8002c42:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002c44:	2300      	movs	r3, #0
    return HAL_ERROR;
 8002c46:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002c48:	77e3      	strb	r3, [r4, #31]
}
 8002c4a:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c4c:	210e      	movs	r1, #14
 8002c4e:	6803      	ldr	r3, [r0, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	438a      	bics	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c56:	2201      	movs	r2, #1
 8002c58:	6819      	ldr	r1, [r3, #0]
 8002c5a:	4391      	bics	r1, r2
 8002c5c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c5e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002c60:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002c62:	0010      	movs	r0, r2
 8002c64:	4088      	lsls	r0, r1
 8002c66:	6058      	str	r0, [r3, #4]
  __HAL_UNLOCK(hdma);
 8002c68:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8002c6a:	77ea      	strb	r2, [r5, #31]
  __HAL_UNLOCK(hdma);
 8002c6c:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8002c6e:	e7ec      	b.n	8002c4a <HAL_DMA_Abort+0x16>

08002c70 <HAL_DMA_Abort_IT>:
{  
 8002c70:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c72:	1c84      	adds	r4, r0, #2
 8002c74:	7fe3      	ldrb	r3, [r4, #31]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d004      	beq.n	8002c84 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002c7e:	3b03      	subs	r3, #3
}
 8002c80:	0018      	movs	r0, r3
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c84:	210e      	movs	r1, #14
 8002c86:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c88:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c90:	2201      	movs	r2, #1
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	4391      	bics	r1, r2
 8002c96:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c98:	0011      	movs	r1, r2
 8002c9a:	40a9      	lsls	r1, r5
 8002c9c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002c9e:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002ca0:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002ca2:	2400      	movs	r4, #0
 8002ca4:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8002ca6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002ca8:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8002cac:	42a2      	cmp	r2, r4
 8002cae:	d0e7      	beq.n	8002c80 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8002cb0:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002cb2:	0023      	movs	r3, r4
 8002cb4:	e7e4      	b.n	8002c80 <HAL_DMA_Abort_IT+0x10>

08002cb6 <HAL_DMA_PollForTransfer>:
{
 8002cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cb8:	1c85      	adds	r5, r0, #2
 8002cba:	7feb      	ldrb	r3, [r5, #31]
{
 8002cbc:	b085      	sub	sp, #20
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cbe:	b2db      	uxtb	r3, r3
{
 8002cc0:	0004      	movs	r4, r0
 8002cc2:	000f      	movs	r7, r1
 8002cc4:	0016      	movs	r6, r2
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d007      	beq.n	8002cda <HAL_DMA_PollForTransfer+0x24>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cca:	2304      	movs	r3, #4
 8002ccc:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	3401      	adds	r4, #1
 8002cd2:	77e3      	strb	r3, [r4, #31]
    return HAL_ERROR;
 8002cd4:	2001      	movs	r0, #1
}
 8002cd6:	b005      	add	sp, #20
 8002cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8002cda:	6802      	ldr	r2, [r0, #0]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	0692      	lsls	r2, r2, #26
 8002ce0:	d503      	bpl.n	8002cea <HAL_DMA_PollForTransfer+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	6383      	str	r3, [r0, #56]	; 0x38
 8002ce8:	e7f4      	b.n	8002cd4 <HAL_DMA_PollForTransfer+0x1e>
 8002cea:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8002cec:	2900      	cmp	r1, #0
 8002cee:	d119      	bne.n	8002d24 <HAL_DMA_PollForTransfer+0x6e>
    temp = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002cf0:	4093      	lsls	r3, r2
 8002cf2:	9300      	str	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8002cf4:	f7ff fba0 	bl	8002438 <HAL_GetTick>
 8002cf8:	9003      	str	r0, [sp, #12]
    if(RESET != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << hdma->ChannelIndex)))
 8002cfa:	2008      	movs	r0, #8
 8002cfc:	6c22      	ldr	r2, [r4, #64]	; 0x40
  while(RESET == (hdma->DmaBaseAddress->ISR & temp))
 8002cfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if(RESET != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << hdma->ChannelIndex)))
 8002d00:	4090      	lsls	r0, r2
 8002d02:	9002      	str	r0, [sp, #8]
  while(RESET == (hdma->DmaBaseAddress->ISR & temp))
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	9800      	ldr	r0, [sp, #0]
 8002d08:	4001      	ands	r1, r0
 8002d0a:	9101      	str	r1, [sp, #4]
 8002d0c:	d00c      	beq.n	8002d28 <HAL_DMA_PollForTransfer+0x72>
  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8002d0e:	2f00      	cmp	r7, #0
 8002d10:	d12a      	bne.n	8002d68 <HAL_DMA_PollForTransfer+0xb2>
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002d12:	2102      	movs	r1, #2
 8002d14:	4091      	lsls	r1, r2
 8002d16:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	77eb      	strb	r3, [r5, #31]
  __HAL_UNLOCK(hdma);  
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	3401      	adds	r4, #1
 8002d20:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8002d22:	e7d8      	b.n	8002cd6 <HAL_DMA_PollForTransfer+0x20>
    temp = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002d24:	2304      	movs	r3, #4
 8002d26:	e7e3      	b.n	8002cf0 <HAL_DMA_PollForTransfer+0x3a>
    if(RESET != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << hdma->ChannelIndex)))
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	9902      	ldr	r1, [sp, #8]
 8002d2c:	4201      	tst	r1, r0
 8002d2e:	d009      	beq.n	8002d44 <HAL_DMA_PollForTransfer+0x8e>
      hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d30:	2001      	movs	r0, #1
 8002d32:	0006      	movs	r6, r0
 8002d34:	4096      	lsls	r6, r2
 8002d36:	605e      	str	r6, [r3, #4]
      __HAL_UNLOCK(hdma);
 8002d38:	9b01      	ldr	r3, [sp, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d3a:	63a0      	str	r0, [r4, #56]	; 0x38
      hdma->State= HAL_DMA_STATE_READY;       
 8002d3c:	77e8      	strb	r0, [r5, #31]
      __HAL_UNLOCK(hdma);
 8002d3e:	1824      	adds	r4, r4, r0
        __HAL_UNLOCK(hdma);
 8002d40:	77e3      	strb	r3, [r4, #31]
        return HAL_ERROR;
 8002d42:	e7c8      	b.n	8002cd6 <HAL_DMA_PollForTransfer+0x20>
    if(Timeout != HAL_MAX_DELAY)
 8002d44:	1c71      	adds	r1, r6, #1
 8002d46:	d0dd      	beq.n	8002d04 <HAL_DMA_PollForTransfer+0x4e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002d48:	2e00      	cmp	r6, #0
 8002d4a:	d106      	bne.n	8002d5a <HAL_DMA_PollForTransfer+0xa4>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d4c:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d50:	63a3      	str	r3, [r4, #56]	; 0x38
        hdma->State = HAL_DMA_STATE_READY;
 8002d52:	77e8      	strb	r0, [r5, #31]
        __HAL_UNLOCK(hdma);
 8002d54:	1824      	adds	r4, r4, r0
 8002d56:	2300      	movs	r3, #0
 8002d58:	e7f2      	b.n	8002d40 <HAL_DMA_PollForTransfer+0x8a>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002d5a:	f7ff fb6d 	bl	8002438 <HAL_GetTick>
 8002d5e:	9b03      	ldr	r3, [sp, #12]
 8002d60:	1ac0      	subs	r0, r0, r3
 8002d62:	42b0      	cmp	r0, r6
 8002d64:	d9c9      	bls.n	8002cfa <HAL_DMA_PollForTransfer+0x44>
 8002d66:	e7f1      	b.n	8002d4c <HAL_DMA_PollForTransfer+0x96>
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002d68:	2104      	movs	r1, #4
 8002d6a:	4091      	lsls	r1, r2
 8002d6c:	6059      	str	r1, [r3, #4]
 8002d6e:	e7d5      	b.n	8002d1c <HAL_DMA_PollForTransfer+0x66>

08002d70 <HAL_DMA_IRQHandler>:
{
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d72:	2704      	movs	r7, #4
 8002d74:	003e      	movs	r6, r7
 8002d76:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d7a:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d7c:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002d7e:	6803      	ldr	r3, [r0, #0]
 8002d80:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d82:	4235      	tst	r5, r6
 8002d84:	d00d      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x32>
 8002d86:	423c      	tst	r4, r7
 8002d88:	d00b      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d8a:	6819      	ldr	r1, [r3, #0]
 8002d8c:	0689      	lsls	r1, r1, #26
 8002d8e:	d402      	bmi.n	8002d96 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d90:	6819      	ldr	r1, [r3, #0]
 8002d92:	43b9      	bics	r1, r7
 8002d94:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002d96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002d98:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d019      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8002d9e:	4798      	blx	r3
}  
 8002da0:	e017      	b.n	8002dd2 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002da2:	2702      	movs	r7, #2
 8002da4:	003e      	movs	r6, r7
 8002da6:	408e      	lsls	r6, r1
 8002da8:	4235      	tst	r5, r6
 8002daa:	d013      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x64>
 8002dac:	423c      	tst	r4, r7
 8002dae:	d011      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	0689      	lsls	r1, r1, #26
 8002db4:	d406      	bmi.n	8002dc4 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002db6:	240a      	movs	r4, #10
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	43a1      	bics	r1, r4
 8002dbc:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	19c3      	adds	r3, r0, r7
 8002dc2:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002dc4:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	1c43      	adds	r3, r0, #1
 8002dca:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8002dcc:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d1e5      	bne.n	8002d9e <HAL_DMA_IRQHandler+0x2e>
}  
 8002dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002dd4:	2608      	movs	r6, #8
 8002dd6:	0037      	movs	r7, r6
 8002dd8:	408f      	lsls	r7, r1
 8002dda:	423d      	tst	r5, r7
 8002ddc:	d0f9      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x62>
 8002dde:	4234      	tst	r4, r6
 8002de0:	d0f7      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002de2:	250e      	movs	r5, #14
 8002de4:	681c      	ldr	r4, [r3, #0]
 8002de6:	43ac      	bics	r4, r5
 8002de8:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002dea:	2301      	movs	r3, #1
 8002dec:	001c      	movs	r4, r3
 8002dee:	408c      	lsls	r4, r1
 8002df0:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8002df2:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002df4:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002df6:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8002df8:	2200      	movs	r2, #0
 8002dfa:	18c3      	adds	r3, r0, r3
 8002dfc:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8002dfe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002e00:	e7e5      	b.n	8002dce <HAL_DMA_IRQHandler+0x5e>
	...

08002e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002e04:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e06:	680b      	ldr	r3, [r1, #0]
{ 
 8002e08:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0a:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8002e0c:	2300      	movs	r3, #0
{ 
 8002e0e:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e10:	9a03      	ldr	r2, [sp, #12]
 8002e12:	40da      	lsrs	r2, r3
 8002e14:	d101      	bne.n	8002e1a <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 8002e16:	b007      	add	sp, #28
 8002e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	9202      	str	r2, [sp, #8]
 8002e20:	9902      	ldr	r1, [sp, #8]
 8002e22:	9a03      	ldr	r2, [sp, #12]
 8002e24:	400a      	ands	r2, r1
 8002e26:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8002e28:	d100      	bne.n	8002e2c <HAL_GPIO_Init+0x28>
 8002e2a:	e088      	b.n	8002f3e <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e2c:	9a01      	ldr	r2, [sp, #4]
 8002e2e:	2110      	movs	r1, #16
 8002e30:	6852      	ldr	r2, [r2, #4]
 8002e32:	0016      	movs	r6, r2
 8002e34:	438e      	bics	r6, r1
 8002e36:	2e02      	cmp	r6, #2
 8002e38:	d10e      	bne.n	8002e58 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e3a:	2507      	movs	r5, #7
 8002e3c:	401d      	ands	r5, r3
 8002e3e:	00ad      	lsls	r5, r5, #2
 8002e40:	3901      	subs	r1, #1
 8002e42:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8002e44:	08dc      	lsrs	r4, r3, #3
 8002e46:	00a4      	lsls	r4, r4, #2
 8002e48:	1904      	adds	r4, r0, r4
 8002e4a:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e4c:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e4e:	9901      	ldr	r1, [sp, #4]
 8002e50:	6909      	ldr	r1, [r1, #16]
 8002e52:	40a9      	lsls	r1, r5
 8002e54:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8002e56:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e58:	2403      	movs	r4, #3
 8002e5a:	005f      	lsls	r7, r3, #1
 8002e5c:	40bc      	lsls	r4, r7
 8002e5e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8002e60:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e62:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e64:	4025      	ands	r5, r4
 8002e66:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e68:	2503      	movs	r5, #3
 8002e6a:	4015      	ands	r5, r2
 8002e6c:	40bd      	lsls	r5, r7
 8002e6e:	4661      	mov	r1, ip
 8002e70:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8002e72:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e74:	2e01      	cmp	r6, #1
 8002e76:	d80f      	bhi.n	8002e98 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e78:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8002e7a:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e7c:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e7e:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e80:	40bd      	lsls	r5, r7
 8002e82:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002e84:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002e86:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e88:	9902      	ldr	r1, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e8a:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e8c:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e8e:	2101      	movs	r1, #1
 8002e90:	400d      	ands	r5, r1
 8002e92:	409d      	lsls	r5, r3
 8002e94:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8002e96:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8002e98:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e9a:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e9c:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e9e:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ea0:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ea2:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ea4:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ea6:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002ea8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eaa:	420a      	tst	r2, r1
 8002eac:	d047      	beq.n	8002f3e <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eae:	2101      	movs	r1, #1
 8002eb0:	4c24      	ldr	r4, [pc, #144]	; (8002f44 <HAL_GPIO_Init+0x140>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eb2:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb4:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eb6:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb8:	430d      	orrs	r5, r1
 8002eba:	61a5      	str	r5, [r4, #24]
 8002ebc:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ebe:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec0:	400c      	ands	r4, r1
 8002ec2:	9405      	str	r4, [sp, #20]
 8002ec4:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ec6:	240f      	movs	r4, #15
 8002ec8:	491f      	ldr	r1, [pc, #124]	; (8002f48 <HAL_GPIO_Init+0x144>)
 8002eca:	00ad      	lsls	r5, r5, #2
 8002ecc:	00b6      	lsls	r6, r6, #2
 8002ece:	186d      	adds	r5, r5, r1
 8002ed0:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ed2:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ed4:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ed6:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ed8:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eda:	2400      	movs	r4, #0
 8002edc:	4288      	cmp	r0, r1
 8002ede:	d008      	beq.n	8002ef2 <HAL_GPIO_Init+0xee>
 8002ee0:	491a      	ldr	r1, [pc, #104]	; (8002f4c <HAL_GPIO_Init+0x148>)
 8002ee2:	3401      	adds	r4, #1
 8002ee4:	4288      	cmp	r0, r1
 8002ee6:	d004      	beq.n	8002ef2 <HAL_GPIO_Init+0xee>
 8002ee8:	4919      	ldr	r1, [pc, #100]	; (8002f50 <HAL_GPIO_Init+0x14c>)
 8002eea:	3404      	adds	r4, #4
 8002eec:	4288      	cmp	r0, r1
 8002eee:	d100      	bne.n	8002ef2 <HAL_GPIO_Init+0xee>
 8002ef0:	3c03      	subs	r4, #3
 8002ef2:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8002ef4:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ef6:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8002ef8:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002efa:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8002efc:	4c15      	ldr	r4, [pc, #84]	; (8002f54 <HAL_GPIO_Init+0x150>)
        temp &= ~(iocurrent);
 8002efe:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8002f00:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8002f02:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f04:	03d1      	lsls	r1, r2, #15
 8002f06:	d401      	bmi.n	8002f0c <HAL_GPIO_Init+0x108>
        temp &= ~(iocurrent);
 8002f08:	003e      	movs	r6, r7
 8002f0a:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8002f0c:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8002f0e:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8002f10:	9e00      	ldr	r6, [sp, #0]
 8002f12:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f14:	0391      	lsls	r1, r2, #14
 8002f16:	d401      	bmi.n	8002f1c <HAL_GPIO_Init+0x118>
        temp &= ~(iocurrent);
 8002f18:	003e      	movs	r6, r7
 8002f1a:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8002f1c:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8002f1e:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8002f20:	9e00      	ldr	r6, [sp, #0]
 8002f22:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f24:	02d1      	lsls	r1, r2, #11
 8002f26:	d401      	bmi.n	8002f2c <HAL_GPIO_Init+0x128>
        temp &= ~(iocurrent);
 8002f28:	003e      	movs	r6, r7
 8002f2a:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8002f2c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8002f2e:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8002f30:	9f00      	ldr	r7, [sp, #0]
 8002f32:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f34:	0292      	lsls	r2, r2, #10
 8002f36:	d401      	bmi.n	8002f3c <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8002f38:	402e      	ands	r6, r5
 8002f3a:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8002f3c:	60e7      	str	r7, [r4, #12]
    position++;
 8002f3e:	3301      	adds	r3, #1
 8002f40:	e766      	b.n	8002e10 <HAL_GPIO_Init+0xc>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	48000400 	.word	0x48000400
 8002f50:	48000800 	.word	0x48000800
 8002f54:	40010400 	.word	0x40010400

08002f58 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f58:	6900      	ldr	r0, [r0, #16]
 8002f5a:	4008      	ands	r0, r1
 8002f5c:	1e41      	subs	r1, r0, #1
 8002f5e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002f60:	b2c0      	uxtb	r0, r0
  }
 8002f62:	4770      	bx	lr

08002f64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f64:	2a00      	cmp	r2, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f68:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f6a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f6c:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002f6e:	e7fc      	b.n	8002f6a <HAL_GPIO_WritePin+0x6>

08002f70 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f70:	6803      	ldr	r3, [r0, #0]
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	0792      	lsls	r2, r2, #30
 8002f76:	d501      	bpl.n	8002f7c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f78:	2200      	movs	r2, #0
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	6999      	ldr	r1, [r3, #24]
 8002f80:	4211      	tst	r1, r2
 8002f82:	d102      	bne.n	8002f8a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f84:	6999      	ldr	r1, [r3, #24]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	619a      	str	r2, [r3, #24]
  }
}
 8002f8a:	4770      	bx	lr

08002f8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002f8c:	b530      	push	{r4, r5, lr}
 8002f8e:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f90:	0412      	lsls	r2, r2, #16
 8002f92:	6800      	ldr	r0, [r0, #0]
 8002f94:	4322      	orrs	r2, r4
 8002f96:	4313      	orrs	r3, r2
 8002f98:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <I2C_TransferConfig+0x24>)
 8002f9a:	6845      	ldr	r5, [r0, #4]
 8002f9c:	0589      	lsls	r1, r1, #22
 8002f9e:	0d64      	lsrs	r4, r4, #21
 8002fa0:	0d89      	lsrs	r1, r1, #22
 8002fa2:	4314      	orrs	r4, r2
 8002fa4:	43a5      	bics	r5, r4
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	432b      	orrs	r3, r5
 8002faa:	6043      	str	r3, [r0, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002fac:	bd30      	pop	{r4, r5, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	03ff63ff 	.word	0x03ff63ff

08002fb4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002fb4:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 8002fb6:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002fb8:	07ca      	lsls	r2, r1, #31
 8002fba:	d508      	bpl.n	8002fce <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	3341      	adds	r3, #65	; 0x41
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	2328      	movs	r3, #40	; 0x28
 8002fc4:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002fc6:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fc8:	2a28      	cmp	r2, #40	; 0x28
 8002fca:	d000      	beq.n	8002fce <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fcc:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002fce:	078a      	lsls	r2, r1, #30
 8002fd0:	d508      	bpl.n	8002fe4 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	2428      	movs	r4, #40	; 0x28
 8002fd6:	3241      	adds	r2, #65	; 0x41
 8002fd8:	7812      	ldrb	r2, [r2, #0]
 8002fda:	4022      	ands	r2, r4
 8002fdc:	42a2      	cmp	r2, r4
 8002fde:	d10a      	bne.n	8002ff6 <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002fe0:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fe2:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002fe4:	074a      	lsls	r2, r1, #29
 8002fe6:	d501      	bpl.n	8002fec <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fe8:	22b8      	movs	r2, #184	; 0xb8
 8002fea:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002fec:	6801      	ldr	r1, [r0, #0]
 8002fee:	680a      	ldr	r2, [r1, #0]
 8002ff0:	439a      	bics	r2, r3
 8002ff2:	600a      	str	r2, [r1, #0]
}
 8002ff4:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ff6:	22f4      	movs	r2, #244	; 0xf4
 8002ff8:	e7f3      	b.n	8002fe2 <I2C_Disable_IRQ+0x2e>
	...

08002ffc <I2C_IsAcknowledgeFailed>:
{
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ffe:	6803      	ldr	r3, [r0, #0]
{
 8003000:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003002:	6998      	ldr	r0, [r3, #24]
 8003004:	2310      	movs	r3, #16
{
 8003006:	000e      	movs	r6, r1
 8003008:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800300a:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800300c:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800300e:	2800      	cmp	r0, #0
 8003010:	d118      	bne.n	8003044 <I2C_IsAcknowledgeFailed+0x48>
}
 8003012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8003014:	1c72      	adds	r2, r6, #1
 8003016:	d016      	beq.n	8003046 <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003018:	f7ff fa0e 	bl	8002438 <HAL_GetTick>
 800301c:	1bc0      	subs	r0, r0, r7
 800301e:	42b0      	cmp	r0, r6
 8003020:	d801      	bhi.n	8003026 <I2C_IsAcknowledgeFailed+0x2a>
 8003022:	2e00      	cmp	r6, #0
 8003024:	d10e      	bne.n	8003044 <I2C_IsAcknowledgeFailed+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003026:	2220      	movs	r2, #32
 8003028:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800302a:	4313      	orrs	r3, r2
 800302c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800302e:	0023      	movs	r3, r4
 8003030:	3341      	adds	r3, #65	; 0x41
 8003032:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003034:	0022      	movs	r2, r4
 8003036:	2300      	movs	r3, #0
 8003038:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800303a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800303c:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 800303e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8003040:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8003042:	e7e6      	b.n	8003012 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	422a      	tst	r2, r5
 800304a:	d0e3      	beq.n	8003014 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800304c:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 800304e:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003050:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003052:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003054:	f7ff ff8c 	bl	8002f70 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003058:	6822      	ldr	r2, [r4, #0]
 800305a:	4906      	ldr	r1, [pc, #24]	; (8003074 <I2C_IsAcknowledgeFailed+0x78>)
 800305c:	6853      	ldr	r3, [r2, #4]
 800305e:	400b      	ands	r3, r1
 8003060:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003062:	2304      	movs	r3, #4
 8003064:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003066:	4313      	orrs	r3, r2
 8003068:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800306a:	0023      	movs	r3, r4
 800306c:	3341      	adds	r3, #65	; 0x41
 800306e:	701d      	strb	r5, [r3, #0]
 8003070:	e7e0      	b.n	8003034 <I2C_IsAcknowledgeFailed+0x38>
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	fe00e800 	.word	0xfe00e800

08003078 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	0004      	movs	r4, r0
 800307c:	000d      	movs	r5, r1
 800307e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003080:	2720      	movs	r7, #32
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	423b      	tst	r3, r7
 8003088:	d001      	beq.n	800308e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800308a:	2000      	movs	r0, #0
}
 800308c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800308e:	0032      	movs	r2, r6
 8003090:	0029      	movs	r1, r5
 8003092:	0020      	movs	r0, r4
 8003094:	f7ff ffb2 	bl	8002ffc <I2C_IsAcknowledgeFailed>
 8003098:	2800      	cmp	r0, #0
 800309a:	d113      	bne.n	80030c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309c:	f7ff f9cc 	bl	8002438 <HAL_GetTick>
 80030a0:	1b80      	subs	r0, r0, r6
 80030a2:	42a8      	cmp	r0, r5
 80030a4:	d801      	bhi.n	80030aa <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80030a6:	2d00      	cmp	r5, #0
 80030a8:	d1eb      	bne.n	8003082 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030aa:	2220      	movs	r2, #32
 80030ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030ae:	4313      	orrs	r3, r2
 80030b0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	0023      	movs	r3, r4
 80030b4:	3341      	adds	r3, #65	; 0x41
 80030b6:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	0022      	movs	r2, r4
 80030ba:	2300      	movs	r3, #0
 80030bc:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80030be:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c0:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80030c2:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80030c4:	2001      	movs	r0, #1
 80030c6:	e7e1      	b.n	800308c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

080030c8 <I2C_WaitOnFlagUntilTimeout>:
{
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	0004      	movs	r4, r0
 80030cc:	000e      	movs	r6, r1
 80030ce:	0017      	movs	r7, r2
 80030d0:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d2:	6822      	ldr	r2, [r4, #0]
 80030d4:	6993      	ldr	r3, [r2, #24]
 80030d6:	4033      	ands	r3, r6
 80030d8:	1b9b      	subs	r3, r3, r6
 80030da:	4259      	negs	r1, r3
 80030dc:	414b      	adcs	r3, r1
 80030de:	42bb      	cmp	r3, r7
 80030e0:	d001      	beq.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80030e2:	2000      	movs	r0, #0
 80030e4:	e017      	b.n	8003116 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80030e6:	1c6b      	adds	r3, r5, #1
 80030e8:	d0f4      	beq.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7ff f9a5 	bl	8002438 <HAL_GetTick>
 80030ee:	9b06      	ldr	r3, [sp, #24]
 80030f0:	1ac0      	subs	r0, r0, r3
 80030f2:	42a8      	cmp	r0, r5
 80030f4:	d801      	bhi.n	80030fa <I2C_WaitOnFlagUntilTimeout+0x32>
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	d1eb      	bne.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030fa:	2220      	movs	r2, #32
 80030fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80030fe:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003100:	4313      	orrs	r3, r2
 8003102:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003104:	0023      	movs	r3, r4
 8003106:	3341      	adds	r3, #65	; 0x41
 8003108:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800310a:	0022      	movs	r2, r4
 800310c:	2300      	movs	r3, #0
 800310e:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8003110:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003112:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8003114:	7023      	strb	r3, [r4, #0]
}
 8003116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003118 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311a:	0004      	movs	r4, r0
 800311c:	000d      	movs	r5, r1
 800311e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003120:	2702      	movs	r7, #2
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	423b      	tst	r3, r7
 8003128:	d001      	beq.n	800312e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800312a:	2000      	movs	r0, #0
}
 800312c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800312e:	0032      	movs	r2, r6
 8003130:	0029      	movs	r1, r5
 8003132:	0020      	movs	r0, r4
 8003134:	f7ff ff62 	bl	8002ffc <I2C_IsAcknowledgeFailed>
 8003138:	2800      	cmp	r0, #0
 800313a:	d115      	bne.n	8003168 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800313c:	1c6b      	adds	r3, r5, #1
 800313e:	d0f0      	beq.n	8003122 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003140:	f7ff f97a 	bl	8002438 <HAL_GetTick>
 8003144:	1b80      	subs	r0, r0, r6
 8003146:	42a8      	cmp	r0, r5
 8003148:	d801      	bhi.n	800314e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800314a:	2d00      	cmp	r5, #0
 800314c:	d1e9      	bne.n	8003122 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800314e:	2220      	movs	r2, #32
 8003150:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003152:	4313      	orrs	r3, r2
 8003154:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003156:	0023      	movs	r3, r4
 8003158:	3341      	adds	r3, #65	; 0x41
 800315a:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	0022      	movs	r2, r4
 800315e:	2300      	movs	r3, #0
 8003160:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8003162:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003164:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8003166:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003168:	2001      	movs	r0, #1
 800316a:	e7df      	b.n	800312c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800316c <I2C_RequestMemoryWrite>:
{
 800316c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800316e:	0014      	movs	r4, r2
 8003170:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003172:	b2da      	uxtb	r2, r3
 8003174:	4b15      	ldr	r3, [pc, #84]	; (80031cc <I2C_RequestMemoryWrite+0x60>)
{
 8003176:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	045b      	lsls	r3, r3, #17
 800317e:	f7ff ff05 	bl	8002f8c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003182:	9a07      	ldr	r2, [sp, #28]
 8003184:	9906      	ldr	r1, [sp, #24]
 8003186:	0028      	movs	r0, r5
 8003188:	f7ff ffc6 	bl	8003118 <I2C_WaitOnTXISFlagUntilTimeout>
 800318c:	2800      	cmp	r0, #0
 800318e:	d001      	beq.n	8003194 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 8003190:	2001      	movs	r0, #1
}
 8003192:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003194:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003196:	2e01      	cmp	r6, #1
 8003198:	d10d      	bne.n	80031b6 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800319a:	b2e4      	uxtb	r4, r4
 800319c:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800319e:	9b07      	ldr	r3, [sp, #28]
 80031a0:	2200      	movs	r2, #0
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	9b06      	ldr	r3, [sp, #24]
 80031a8:	0028      	movs	r0, r5
 80031aa:	f7ff ff8d 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 80031ae:	1e43      	subs	r3, r0, #1
 80031b0:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80031b2:	b2c0      	uxtb	r0, r0
 80031b4:	e7ed      	b.n	8003192 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031b6:	0a22      	lsrs	r2, r4, #8
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ba:	9906      	ldr	r1, [sp, #24]
 80031bc:	9a07      	ldr	r2, [sp, #28]
 80031be:	0028      	movs	r0, r5
 80031c0:	f7ff ffaa 	bl	8003118 <I2C_WaitOnTXISFlagUntilTimeout>
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d1e3      	bne.n	8003190 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031c8:	682b      	ldr	r3, [r5, #0]
 80031ca:	e7e6      	b.n	800319a <I2C_RequestMemoryWrite+0x2e>
 80031cc:	80002000 	.word	0x80002000

080031d0 <HAL_I2C_Init>:
{
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80031d4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80031d6:	2c00      	cmp	r4, #0
 80031d8:	d03f      	beq.n	800325a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031da:	0025      	movs	r5, r4
 80031dc:	3541      	adds	r5, #65	; 0x41
 80031de:	782b      	ldrb	r3, [r5, #0]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80031e6:	0022      	movs	r2, r4
 80031e8:	3240      	adds	r2, #64	; 0x40
 80031ea:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80031ec:	0020      	movs	r0, r4
 80031ee:	f7fe ffd1 	bl	8002194 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80031f4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80031f8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031fa:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68a6      	ldr	r6, [r4, #8]
 8003200:	438a      	bics	r2, r1
 8003202:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003204:	6861      	ldr	r1, [r4, #4]
 8003206:	4a1a      	ldr	r2, [pc, #104]	; (8003270 <HAL_I2C_Init+0xa0>)
 8003208:	400a      	ands	r2, r1
 800320a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800320c:	6899      	ldr	r1, [r3, #8]
 800320e:	4a19      	ldr	r2, [pc, #100]	; (8003274 <HAL_I2C_Init+0xa4>)
 8003210:	4011      	ands	r1, r2
 8003212:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003214:	2801      	cmp	r0, #1
 8003216:	d121      	bne.n	800325c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003218:	2180      	movs	r1, #128	; 0x80
 800321a:	0209      	lsls	r1, r1, #8
 800321c:	4331      	orrs	r1, r6
 800321e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003220:	6858      	ldr	r0, [r3, #4]
 8003222:	4915      	ldr	r1, [pc, #84]	; (8003278 <HAL_I2C_Init+0xa8>)
 8003224:	4301      	orrs	r1, r0
 8003226:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003228:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800322a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800322c:	400a      	ands	r2, r1
 800322e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003230:	6961      	ldr	r1, [r4, #20]
 8003232:	6922      	ldr	r2, [r4, #16]
 8003234:	430a      	orrs	r2, r1
 8003236:	69a1      	ldr	r1, [r4, #24]
 8003238:	0209      	lsls	r1, r1, #8
 800323a:	430a      	orrs	r2, r1
 800323c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800323e:	6a21      	ldr	r1, [r4, #32]
 8003240:	69e2      	ldr	r2, [r4, #28]
 8003242:	430a      	orrs	r2, r1
 8003244:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003246:	2201      	movs	r2, #1
 8003248:	6819      	ldr	r1, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800324e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003250:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003252:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003254:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	3442      	adds	r4, #66	; 0x42
 8003258:	7020      	strb	r0, [r4, #0]
}
 800325a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800325c:	2184      	movs	r1, #132	; 0x84
 800325e:	0209      	lsls	r1, r1, #8
 8003260:	4331      	orrs	r1, r6
 8003262:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003264:	2802      	cmp	r0, #2
 8003266:	d1db      	bne.n	8003220 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003268:	2180      	movs	r1, #128	; 0x80
 800326a:	0109      	lsls	r1, r1, #4
 800326c:	6059      	str	r1, [r3, #4]
 800326e:	e7d7      	b.n	8003220 <HAL_I2C_Init+0x50>
 8003270:	f0ffffff 	.word	0xf0ffffff
 8003274:	ffff7fff 	.word	0xffff7fff
 8003278:	02008000 	.word	0x02008000

0800327c <HAL_I2C_Mem_Write>:
{
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800327e:	0007      	movs	r7, r0
{
 8003280:	b089      	sub	sp, #36	; 0x24
 8003282:	9307      	str	r3, [sp, #28]
 8003284:	ab0e      	add	r3, sp, #56	; 0x38
 8003286:	9206      	str	r2, [sp, #24]
 8003288:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800328a:	3741      	adds	r7, #65	; 0x41
{
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	9204      	str	r2, [sp, #16]
 8003290:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003292:	783b      	ldrb	r3, [r7, #0]
{
 8003294:	0004      	movs	r4, r0
 8003296:	000d      	movs	r5, r1
    return HAL_BUSY;
 8003298:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800329a:	2b20      	cmp	r3, #32
 800329c:	d108      	bne.n	80032b0 <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 800329e:	2a00      	cmp	r2, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_I2C_Mem_Write+0x2c>
 80032a2:	9b05      	ldr	r3, [sp, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80032ae:	2001      	movs	r0, #1
}
 80032b0:	b009      	add	sp, #36	; 0x24
 80032b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80032b4:	0023      	movs	r3, r4
 80032b6:	3340      	adds	r3, #64	; 0x40
 80032b8:	9303      	str	r3, [sp, #12]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d0f7      	beq.n	80032b0 <HAL_I2C_Mem_Write+0x34>
 80032c0:	2201      	movs	r2, #1
 80032c2:	9b03      	ldr	r3, [sp, #12]
 80032c4:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80032c6:	f7ff f8b7 	bl	8002438 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032ca:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80032cc:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032ce:	9000      	str	r0, [sp, #0]
 80032d0:	2319      	movs	r3, #25
 80032d2:	2201      	movs	r2, #1
 80032d4:	0209      	lsls	r1, r1, #8
 80032d6:	0020      	movs	r0, r4
 80032d8:	f7ff fef6 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	1e06      	subs	r6, r0, #0
 80032de:	d1e6      	bne.n	80032ae <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032e0:	2321      	movs	r3, #33	; 0x21
 80032e2:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032e4:	0027      	movs	r7, r4
 80032e6:	331f      	adds	r3, #31
 80032e8:	3742      	adds	r7, #66	; 0x42
 80032ea:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 80032ec:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ee:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80032f0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80032f2:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80032f4:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80032f6:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032f8:	9b02      	ldr	r3, [sp, #8]
 80032fa:	9a06      	ldr	r2, [sp, #24]
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003300:	0029      	movs	r1, r5
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	0020      	movs	r0, r4
 8003306:	9b07      	ldr	r3, [sp, #28]
 8003308:	f7ff ff30 	bl	800316c <I2C_RequestMemoryWrite>
 800330c:	2800      	cmp	r0, #0
 800330e:	d002      	beq.n	8003316 <HAL_I2C_Mem_Write+0x9a>
      __HAL_UNLOCK(hi2c);
 8003310:	9b03      	ldr	r3, [sp, #12]
 8003312:	701e      	strb	r6, [r3, #0]
 8003314:	e7cb      	b.n	80032ae <HAL_I2C_Mem_Write+0x32>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003316:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003318:	2bff      	cmp	r3, #255	; 0xff
 800331a:	d953      	bls.n	80033c4 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800331c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800331e:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003320:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003322:	045b      	lsls	r3, r3, #17
 8003324:	9000      	str	r0, [sp, #0]
 8003326:	0029      	movs	r1, r5
 8003328:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800332a:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800332c:	f7ff fe2e 	bl	8002f8c <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003330:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003332:	9a02      	ldr	r2, [sp, #8]
 8003334:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003336:	0020      	movs	r0, r4
 8003338:	f7ff feee 	bl	8003118 <I2C_WaitOnTXISFlagUntilTimeout>
 800333c:	2800      	cmp	r0, #0
 800333e:	d1b6      	bne.n	80032ae <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003342:	6822      	ldr	r2, [r4, #0]
 8003344:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003346:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003348:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800334a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800334c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800334e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003350:	3b01      	subs	r3, #1
 8003352:	b29b      	uxth	r3, r3
 8003354:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003356:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003358:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800335a:	b292      	uxth	r2, r2
 800335c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800335e:	2b00      	cmp	r3, #0
 8003360:	d017      	beq.n	8003392 <HAL_I2C_Mem_Write+0x116>
 8003362:	2a00      	cmp	r2, #0
 8003364:	d115      	bne.n	8003392 <HAL_I2C_Mem_Write+0x116>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003366:	9b02      	ldr	r3, [sp, #8]
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	0020      	movs	r0, r4
 800336e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003370:	f7ff feaa 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 8003374:	2800      	cmp	r0, #0
 8003376:	d19a      	bne.n	80032ae <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003378:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800337a:	2bff      	cmp	r3, #255	; 0xff
 800337c:	d92a      	bls.n	80033d4 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800337e:	23ff      	movs	r3, #255	; 0xff
 8003380:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	22ff      	movs	r2, #255	; 0xff
 8003386:	9000      	str	r0, [sp, #0]
 8003388:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800338a:	0029      	movs	r1, r5
 800338c:	0020      	movs	r0, r4
 800338e:	f7ff fdfd 	bl	8002f8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8003392:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1cc      	bne.n	8003332 <HAL_I2C_Mem_Write+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003398:	9a02      	ldr	r2, [sp, #8]
 800339a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800339c:	0020      	movs	r0, r4
 800339e:	f7ff fe6b 	bl	8003078 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033a2:	2800      	cmp	r0, #0
 80033a4:	d000      	beq.n	80033a8 <HAL_I2C_Mem_Write+0x12c>
 80033a6:	e782      	b.n	80032ae <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a8:	2120      	movs	r1, #32
 80033aa:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80033ac:	4d0d      	ldr	r5, [pc, #52]	; (80033e4 <HAL_I2C_Mem_Write+0x168>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ae:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	402a      	ands	r2, r5
 80033b4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80033b8:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	3341      	adds	r3, #65	; 0x41
 80033bc:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033be:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 80033c0:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80033c2:	e775      	b.n	80032b0 <HAL_I2C_Mem_Write+0x34>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033c4:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 80033c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033c8:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 80033ca:	b292      	uxth	r2, r2
 80033cc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	9000      	str	r0, [sp, #0]
 80033d2:	e7a8      	b.n	8003326 <HAL_I2C_Mem_Write+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 80033d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033d6:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 80033d8:	b292      	uxth	r2, r2
 80033da:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	9000      	str	r0, [sp, #0]
 80033e0:	e7d3      	b.n	800338a <HAL_I2C_Mem_Write+0x10e>
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	fe00e800 	.word	0xfe00e800

080033e8 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80033e8:	6803      	ldr	r3, [r0, #0]
{
 80033ea:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80033ec:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80033ee:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80033f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d000      	beq.n	80033f8 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 80033f6:	4798      	blx	r3
}
 80033f8:	bd10      	pop	{r4, pc}

080033fa <HAL_I2C_SlaveTxCpltCallback>:
 80033fa:	4770      	bx	lr

080033fc <HAL_I2C_SlaveRxCpltCallback>:
 80033fc:	4770      	bx	lr

080033fe <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fe:	0003      	movs	r3, r0
{
 8003400:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003402:	2500      	movs	r5, #0
 8003404:	3342      	adds	r3, #66	; 0x42
 8003406:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003408:	3b01      	subs	r3, #1
 800340a:	781a      	ldrb	r2, [r3, #0]
{
 800340c:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800340e:	2a29      	cmp	r2, #41	; 0x29
 8003410:	d10d      	bne.n	800342e <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003412:	3a01      	subs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003416:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003418:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800341a:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800341c:	f7ff fdca 	bl	8002fb4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003420:	0023      	movs	r3, r4
 8003422:	3340      	adds	r3, #64	; 0x40
 8003424:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003426:	0020      	movs	r0, r4
 8003428:	f7ff ffe7 	bl	80033fa <HAL_I2C_SlaveTxCpltCallback>
}
 800342c:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800342e:	781a      	ldrb	r2, [r3, #0]
 8003430:	2a2a      	cmp	r2, #42	; 0x2a
 8003432:	d1fb      	bne.n	800342c <I2C_ITSlaveSeqCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003434:	3a02      	subs	r2, #2
 8003436:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003438:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800343a:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800343c:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800343e:	f7ff fdb9 	bl	8002fb4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003442:	0023      	movs	r3, r4
 8003444:	3340      	adds	r3, #64	; 0x40
 8003446:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003448:	0020      	movs	r0, r4
 800344a:	f7ff ffd7 	bl	80033fc <HAL_I2C_SlaveRxCpltCallback>
}
 800344e:	e7ed      	b.n	800342c <I2C_ITSlaveSeqCplt+0x2e>

08003450 <HAL_I2C_AddrCallback>:
}
 8003450:	4770      	bx	lr

08003452 <I2C_ITAddrCplt.isra.9>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003452:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8003454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003456:	2128      	movs	r1, #40	; 0x28
 8003458:	3341      	adds	r3, #65	; 0x41
 800345a:	781a      	ldrb	r2, [r3, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800345c:	0004      	movs	r4, r0
 800345e:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003460:	400a      	ands	r2, r1
 8003462:	428a      	cmp	r2, r1
 8003464:	d137      	bne.n	80034d6 <I2C_ITAddrCplt.isra.9+0x84>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003466:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 8003468:	699d      	ldr	r5, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800346a:	699e      	ldr	r6, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800346c:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800346e:	68d9      	ldr	r1, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8003470:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003472:	9101      	str	r1, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003474:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003476:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 8003478:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800347a:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800347c:	2902      	cmp	r1, #2
 800347e:	d121      	bne.n	80034c4 <I2C_ITAddrCplt.isra.9+0x72>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003480:	0592      	lsls	r2, r2, #22
 8003482:	0d92      	lsrs	r2, r2, #22
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003484:	09d1      	lsrs	r1, r2, #7
 8003486:	404e      	eors	r6, r1
 8003488:	2106      	movs	r1, #6
 800348a:	400e      	ands	r6, r1
 800348c:	d110      	bne.n	80034b0 <I2C_ITAddrCplt.isra.9+0x5e>
        hi2c->AddrEventCount++;
 800348e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003490:	3101      	adds	r1, #1
 8003492:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003494:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003496:	2902      	cmp	r1, #2
 8003498:	d109      	bne.n	80034ae <I2C_ITAddrCplt.isra.9+0x5c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800349a:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 800349c:	6486      	str	r6, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800349e:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80034a0:	0003      	movs	r3, r0
 80034a2:	3340      	adds	r3, #64	; 0x40
 80034a4:	701e      	strb	r6, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80034a6:	0029      	movs	r1, r5
 80034a8:	0020      	movs	r0, r4
 80034aa:	f7ff ffd1 	bl	8003450 <HAL_I2C_AddrCallback>
}
 80034ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80034b0:	2104      	movs	r1, #4
 80034b2:	f7ff fd7f 	bl	8002fb4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80034b6:	0023      	movs	r3, r4
 80034b8:	2200      	movs	r2, #0
 80034ba:	3340      	adds	r3, #64	; 0x40
 80034bc:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80034be:	9a01      	ldr	r2, [sp, #4]
 80034c0:	403a      	ands	r2, r7
 80034c2:	e7f0      	b.n	80034a6 <I2C_ITAddrCplt.isra.9+0x54>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80034c4:	2104      	movs	r1, #4
 80034c6:	f7ff fd75 	bl	8002fb4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80034ca:	0023      	movs	r3, r4
 80034cc:	2200      	movs	r2, #0
 80034ce:	3340      	adds	r3, #64	; 0x40
 80034d0:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80034d2:	0032      	movs	r2, r6
 80034d4:	e7e7      	b.n	80034a6 <I2C_ITAddrCplt.isra.9+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80034d6:	2208      	movs	r2, #8
 80034d8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80034da:	2300      	movs	r3, #0
 80034dc:	3440      	adds	r4, #64	; 0x40
 80034de:	7023      	strb	r3, [r4, #0]
 80034e0:	e7e5      	b.n	80034ae <I2C_ITAddrCplt.isra.9+0x5c>

080034e2 <HAL_I2C_ListenCpltCallback>:
 80034e2:	4770      	bx	lr

080034e4 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e4:	4b18      	ldr	r3, [pc, #96]	; (8003548 <I2C_ITListenCplt+0x64>)
{
 80034e6:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ea:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80034ec:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ee:	6303      	str	r3, [r0, #48]	; 0x30
{
 80034f0:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	2020      	movs	r0, #32
 80034f4:	3241      	adds	r2, #65	; 0x41
 80034f6:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f8:	7053      	strb	r3, [r2, #1]
  hi2c->XferISR = NULL;
 80034fa:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80034fc:	074b      	lsls	r3, r1, #29
 80034fe:	d513      	bpl.n	8003528 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8003508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800350a:	3301      	adds	r3, #1
 800350c:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800350e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d009      	beq.n	8003528 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8003514:	3b01      	subs	r3, #1
 8003516:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003518:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800351a:	3b01      	subs	r3, #1
 800351c:	b29b      	uxth	r3, r3
 800351e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003520:	2304      	movs	r3, #4
 8003522:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003524:	4313      	orrs	r3, r2
 8003526:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003528:	2107      	movs	r1, #7
 800352a:	0020      	movs	r0, r4
 800352c:	f7ff fd42 	bl	8002fb4 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003530:	2210      	movs	r2, #16
 8003532:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8003534:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003536:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003538:	0023      	movs	r3, r4
 800353a:	2200      	movs	r2, #0
 800353c:	3340      	adds	r3, #64	; 0x40
 800353e:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8003540:	f7ff ffcf 	bl	80034e2 <HAL_I2C_ListenCpltCallback>
}
 8003544:	bd10      	pop	{r4, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	ffff0000 	.word	0xffff0000

0800354c <HAL_I2C_ErrorCallback>:
 800354c:	4770      	bx	lr

0800354e <HAL_I2C_AbortCpltCallback>:
 800354e:	4770      	bx	lr

08003550 <I2C_ITError>:
{
 8003550:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003552:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003554:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003556:	2600      	movs	r6, #0
 8003558:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800355a:	3541      	adds	r5, #65	; 0x41
 800355c:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800355e:	7016      	strb	r6, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003560:	4a2f      	ldr	r2, [pc, #188]	; (8003620 <I2C_ITError+0xd0>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003562:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003564:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003566:	8546      	strh	r6, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8003568:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 800356a:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 800356c:	4311      	orrs	r1, r2
 800356e:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003570:	2b02      	cmp	r3, #2
 8003572:	d822      	bhi.n	80035ba <I2C_ITError+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003574:	2103      	movs	r1, #3
 8003576:	f7ff fd1d 	bl	8002fb4 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800357a:	2328      	movs	r3, #40	; 0x28
 800357c:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800357e:	4b29      	ldr	r3, [pc, #164]	; (8003624 <I2C_ITError+0xd4>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8003580:	6326      	str	r6, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003582:	2280      	movs	r2, #128	; 0x80
    hi2c->XferISR       = NULL;
 8003584:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	01d2      	lsls	r2, r2, #7
 800358a:	6819      	ldr	r1, [r3, #0]
 800358c:	4011      	ands	r1, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800358e:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003590:	d01e      	beq.n	80035d0 <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003592:	4925      	ldr	r1, [pc, #148]	; (8003628 <I2C_ITError+0xd8>)
    if (hi2c->hdmatx != NULL)
 8003594:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003596:	400a      	ands	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800359a:	2800      	cmp	r0, #0
 800359c:	d00c      	beq.n	80035b8 <I2C_ITError+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800359e:	4b23      	ldr	r3, [pc, #140]	; (800362c <I2C_ITError+0xdc>)
      __HAL_UNLOCK(hi2c);
 80035a0:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035a2:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 80035a4:	0023      	movs	r3, r4
 80035a6:	3340      	adds	r3, #64	; 0x40
 80035a8:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035aa:	f7ff fb61 	bl	8002c70 <HAL_DMA_Abort_IT>
 80035ae:	2800      	cmp	r0, #0
 80035b0:	d002      	beq.n	80035b8 <I2C_ITError+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80035b6:	4798      	blx	r3
}
 80035b8:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035ba:	2107      	movs	r1, #7
 80035bc:	f7ff fcfa 	bl	8002fb4 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80035c0:	782b      	ldrb	r3, [r5, #0]
 80035c2:	2b60      	cmp	r3, #96	; 0x60
 80035c4:	d001      	beq.n	80035ca <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 80035c6:	2320      	movs	r3, #32
 80035c8:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	6323      	str	r3, [r4, #48]	; 0x30
 80035ce:	e7d8      	b.n	8003582 <I2C_ITError+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80035d0:	2080      	movs	r0, #128	; 0x80
 80035d2:	0200      	lsls	r0, r0, #8
 80035d4:	4002      	ands	r2, r0
 80035d6:	d011      	beq.n	80035fc <I2C_ITError+0xac>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4815      	ldr	r0, [pc, #84]	; (8003630 <I2C_ITError+0xe0>)
 80035dc:	4002      	ands	r2, r0
    if (hi2c->hdmarx != NULL)
 80035de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035e0:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d0e8      	beq.n	80035b8 <I2C_ITError+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <I2C_ITError+0xdc>)
 80035e8:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 80035ea:	0023      	movs	r3, r4
 80035ec:	3340      	adds	r3, #64	; 0x40
 80035ee:	7019      	strb	r1, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035f0:	f7ff fb3e 	bl	8002c70 <HAL_DMA_Abort_IT>
 80035f4:	2800      	cmp	r0, #0
 80035f6:	d0df      	beq.n	80035b8 <I2C_ITError+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035f8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80035fa:	e7db      	b.n	80035b4 <I2C_ITError+0x64>
 80035fc:	0023      	movs	r3, r4
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035fe:	7829      	ldrb	r1, [r5, #0]
 8003600:	3340      	adds	r3, #64	; 0x40
 8003602:	2960      	cmp	r1, #96	; 0x60
 8003604:	d106      	bne.n	8003614 <I2C_ITError+0xc4>
    hi2c->State = HAL_I2C_STATE_READY;
 8003606:	3940      	subs	r1, #64	; 0x40
 8003608:	7029      	strb	r1, [r5, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800360a:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800360c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800360e:	f7ff ff9e 	bl	800354e <HAL_I2C_AbortCpltCallback>
 8003612:	e7d1      	b.n	80035b8 <I2C_ITError+0x68>
    __HAL_UNLOCK(hi2c);
 8003614:	701a      	strb	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8003616:	0020      	movs	r0, r4
 8003618:	f7ff ff98 	bl	800354c <HAL_I2C_ErrorCallback>
}
 800361c:	e7cc      	b.n	80035b8 <I2C_ITError+0x68>
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	ffff0000 	.word	0xffff0000
 8003624:	0800372d 	.word	0x0800372d
 8003628:	ffffbfff 	.word	0xffffbfff
 800362c:	080038bf 	.word	0x080038bf
 8003630:	ffff7fff 	.word	0xffff7fff

08003634 <I2C_ITSlaveCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003634:	2220      	movs	r2, #32
{
 8003636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003638:	6803      	ldr	r3, [r0, #0]
{
 800363a:	0004      	movs	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800363c:	681d      	ldr	r5, [r3, #0]
{
 800363e:	000f      	movs	r7, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003640:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003642:	2107      	movs	r1, #7
 8003644:	f7ff fcb6 	bl	8002fb4 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003648:	2280      	movs	r2, #128	; 0x80
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	0212      	lsls	r2, r2, #8
 800364e:	6859      	ldr	r1, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8003650:	0020      	movs	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	4932      	ldr	r1, [pc, #200]	; (8003724 <I2C_ITSlaveCplt+0xf0>)
 800365a:	400a      	ands	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800365e:	f7ff fc87 	bl	8002f70 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003662:	2301      	movs	r3, #1
 8003664:	046a      	lsls	r2, r5, #17
 8003666:	d538      	bpl.n	80036da <I2C_ITSlaveCplt+0xa6>
    if (hi2c->hdmatx != NULL)
 8003668:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <I2C_ITSlaveCplt+0x42>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	b29b      	uxth	r3, r3
 8003674:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003676:	077b      	lsls	r3, r7, #29
 8003678:	d511      	bpl.n	800369e <I2C_ITSlaveCplt+0x6a>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800367a:	2304      	movs	r3, #4
 800367c:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8003686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003688:	3301      	adds	r3, #1
 800368a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800368c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <I2C_ITSlaveCplt+0x6a>
      hi2c->XferSize--;
 8003692:	3b01      	subs	r3, #1
 8003694:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003696:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003698:	3b01      	subs	r3, #1
 800369a:	b29b      	uxth	r3, r3
 800369c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800369e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <I2C_ITSlaveCplt+0x78>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036a4:	2304      	movs	r3, #4
 80036a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80036a8:	4313      	orrs	r3, r2
 80036aa:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ac:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	0025      	movs	r5, r4
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 80036b4:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b6:	7013      	strb	r3, [r2, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036b8:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80036ba:	6363      	str	r3, [r4, #52]	; 0x34
 80036bc:	3541      	adds	r5, #65	; 0x41
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036be:	429e      	cmp	r6, r3
 80036c0:	d010      	beq.n	80036e4 <I2C_ITSlaveCplt+0xb0>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80036c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80036c4:	0020      	movs	r0, r4
 80036c6:	f7ff ff43 	bl	8003550 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80036ca:	782b      	ldrb	r3, [r5, #0]
 80036cc:	2b28      	cmp	r3, #40	; 0x28
 80036ce:	d103      	bne.n	80036d8 <I2C_ITSlaveCplt+0xa4>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80036d0:	0039      	movs	r1, r7
 80036d2:	0020      	movs	r0, r4
 80036d4:	f7ff ff06 	bl	80034e4 <I2C_ITListenCplt>
}
 80036d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80036da:	0bed      	lsrs	r5, r5, #15
 80036dc:	421d      	tst	r5, r3
 80036de:	d0ca      	beq.n	8003676 <I2C_ITSlaveCplt+0x42>
    if (hi2c->hdmarx != NULL)
 80036e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036e2:	e7c2      	b.n	800366a <I2C_ITSlaveCplt+0x36>
 80036e4:	0027      	movs	r7, r4
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036e8:	4a0f      	ldr	r2, [pc, #60]	; (8003728 <I2C_ITSlaveCplt+0xf4>)
 80036ea:	3740      	adds	r7, #64	; 0x40
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00b      	beq.n	8003708 <I2C_ITSlaveCplt+0xd4>
    I2C_ITSlaveSeqCplt(hi2c);
 80036f0:	0020      	movs	r0, r4
 80036f2:	f7ff fe84 	bl	80033fe <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f8:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <I2C_ITSlaveCplt+0xf4>)
    HAL_I2C_ListenCpltCallback(hi2c);
 80036fa:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036fc:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80036fe:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8003700:	703e      	strb	r6, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003702:	f7ff feee 	bl	80034e2 <HAL_I2C_ListenCpltCallback>
 8003706:	e7e7      	b.n	80036d8 <I2C_ITSlaveCplt+0xa4>
 8003708:	2320      	movs	r3, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800370a:	782a      	ldrb	r2, [r5, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800370c:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800370e:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8003710:	703e      	strb	r6, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003712:	2a22      	cmp	r2, #34	; 0x22
 8003714:	d102      	bne.n	800371c <I2C_ITSlaveCplt+0xe8>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003716:	f7ff fe71 	bl	80033fc <HAL_I2C_SlaveRxCpltCallback>
 800371a:	e7dd      	b.n	80036d8 <I2C_ITSlaveCplt+0xa4>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800371c:	f7ff fe6d 	bl	80033fa <HAL_I2C_SlaveTxCpltCallback>
}
 8003720:	e7da      	b.n	80036d8 <I2C_ITSlaveCplt+0xa4>
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	fe00e800 	.word	0xfe00e800
 8003728:	ffff0000 	.word	0xffff0000

0800372c <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 800372c:	0003      	movs	r3, r0
{
 800372e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8003730:	3340      	adds	r3, #64	; 0x40
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	781b      	ldrb	r3, [r3, #0]
{
 8003736:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8003738:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
{
 800373a:	000e      	movs	r6, r1
 800373c:	0015      	movs	r5, r2
  __HAL_LOCK(hi2c);
 800373e:	2002      	movs	r0, #2
 8003740:	2b01      	cmp	r3, #1
 8003742:	d024      	beq.n	800378e <I2C_Slave_ISR_IT+0x62>
 8003744:	2301      	movs	r3, #1
 8003746:	9a01      	ldr	r2, [sp, #4]
 8003748:	7013      	strb	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800374a:	094a      	lsrs	r2, r1, #5
 800374c:	421a      	tst	r2, r3
 800374e:	d005      	beq.n	800375c <I2C_Slave_ISR_IT+0x30>
 8003750:	096a      	lsrs	r2, r5, #5
 8003752:	421a      	tst	r2, r3
 8003754:	d002      	beq.n	800375c <I2C_Slave_ISR_IT+0x30>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003756:	0020      	movs	r0, r4
 8003758:	f7ff ff6c 	bl	8003634 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800375c:	2301      	movs	r3, #1
 800375e:	06f2      	lsls	r2, r6, #27
 8003760:	d535      	bpl.n	80037ce <I2C_Slave_ISR_IT+0xa2>
 8003762:	092a      	lsrs	r2, r5, #4
 8003764:	421a      	tst	r2, r3
 8003766:	d032      	beq.n	80037ce <I2C_Slave_ISR_IT+0xa2>
    if (hi2c->XferCount == 0U)
 8003768:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800376a:	2b00      	cmp	r3, #0
 800376c:	d120      	bne.n	80037b0 <I2C_Slave_ISR_IT+0x84>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800376e:	0023      	movs	r3, r4
 8003770:	3341      	adds	r3, #65	; 0x41
 8003772:	781a      	ldrb	r2, [r3, #0]
 8003774:	2a28      	cmp	r2, #40	; 0x28
 8003776:	d10b      	bne.n	8003790 <I2C_Slave_ISR_IT+0x64>
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	0492      	lsls	r2, r2, #18
 800377c:	4297      	cmp	r7, r2
 800377e:	d107      	bne.n	8003790 <I2C_Slave_ISR_IT+0x64>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003780:	0031      	movs	r1, r6
 8003782:	0020      	movs	r0, r4
 8003784:	f7ff feae 	bl	80034e4 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 8003788:	2000      	movs	r0, #0
 800378a:	9b01      	ldr	r3, [sp, #4]
 800378c:	7018      	strb	r0, [r3, #0]
}
 800378e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003790:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003792:	7819      	ldrb	r1, [r3, #0]
 8003794:	6823      	ldr	r3, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003796:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003798:	2929      	cmp	r1, #41	; 0x29
 800379a:	d1f5      	bne.n	8003788 <I2C_Slave_ISR_IT+0x5c>
 800379c:	492d      	ldr	r1, [pc, #180]	; (8003854 <I2C_Slave_ISR_IT+0x128>)
 800379e:	428f      	cmp	r7, r1
 80037a0:	d0f2      	beq.n	8003788 <I2C_Slave_ISR_IT+0x5c>
        I2C_Flush_TXDR(hi2c);
 80037a2:	0020      	movs	r0, r4
 80037a4:	f7ff fbe4 	bl	8002f70 <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 80037a8:	0020      	movs	r0, r4
 80037aa:	f7ff fe28 	bl	80033fe <I2C_ITSlaveSeqCplt>
 80037ae:	e7eb      	b.n	8003788 <I2C_Slave_ISR_IT+0x5c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b0:	2210      	movs	r2, #16
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037b6:	2304      	movs	r3, #4
 80037b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80037ba:	4313      	orrs	r3, r2
 80037bc:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80037be:	4b26      	ldr	r3, [pc, #152]	; (8003858 <I2C_Slave_ISR_IT+0x12c>)
 80037c0:	421f      	tst	r7, r3
 80037c2:	d1e1      	bne.n	8003788 <I2C_Slave_ISR_IT+0x5c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80037c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80037c6:	0020      	movs	r0, r4
 80037c8:	f7ff fec2 	bl	8003550 <I2C_ITError>
 80037cc:	e7dc      	b.n	8003788 <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80037ce:	2301      	movs	r3, #1
 80037d0:	0772      	lsls	r2, r6, #29
 80037d2:	d51a      	bpl.n	800380a <I2C_Slave_ISR_IT+0xde>
 80037d4:	08aa      	lsrs	r2, r5, #2
 80037d6:	421a      	tst	r2, r3
 80037d8:	d017      	beq.n	800380a <I2C_Slave_ISR_IT+0xde>
    if (hi2c->XferCount > 0U)
 80037da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <I2C_Slave_ISR_IT+0xd0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80037e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037ea:	3301      	adds	r3, #1
 80037ec:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80037ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80037f0:	3b01      	subs	r3, #1
 80037f2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80037f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80037fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1c2      	bne.n	8003788 <I2C_Slave_ISR_IT+0x5c>
 8003802:	4b14      	ldr	r3, [pc, #80]	; (8003854 <I2C_Slave_ISR_IT+0x128>)
 8003804:	429f      	cmp	r7, r3
 8003806:	d0bf      	beq.n	8003788 <I2C_Slave_ISR_IT+0x5c>
 8003808:	e7ce      	b.n	80037a8 <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800380a:	2301      	movs	r3, #1
 800380c:	0732      	lsls	r2, r6, #28
 800380e:	d506      	bpl.n	800381e <I2C_Slave_ISR_IT+0xf2>
 8003810:	08ea      	lsrs	r2, r5, #3
 8003812:	421a      	tst	r2, r3
 8003814:	d003      	beq.n	800381e <I2C_Slave_ISR_IT+0xf2>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003816:	0020      	movs	r0, r4
 8003818:	f7ff fe1b 	bl	8003452 <I2C_ITAddrCplt.isra.9>
 800381c:	e7b4      	b.n	8003788 <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800381e:	2301      	movs	r3, #1
 8003820:	07b2      	lsls	r2, r6, #30
 8003822:	d5b1      	bpl.n	8003788 <I2C_Slave_ISR_IT+0x5c>
 8003824:	40dd      	lsrs	r5, r3
 8003826:	421d      	tst	r5, r3
 8003828:	d0ae      	beq.n	8003788 <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount > 0U)
 800382a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <I2C_Slave_ISR_IT+0x120>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003830:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003832:	6822      	ldr	r2, [r4, #0]
 8003834:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003836:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003838:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800383a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800383c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800383e:	3b01      	subs	r3, #1
 8003840:	b29b      	uxth	r3, r3
 8003842:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003844:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003846:	3b01      	subs	r3, #1
 8003848:	8523      	strh	r3, [r4, #40]	; 0x28
 800384a:	e79d      	b.n	8003788 <I2C_Slave_ISR_IT+0x5c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800384c:	4b02      	ldr	r3, [pc, #8]	; (8003858 <I2C_Slave_ISR_IT+0x12c>)
 800384e:	421f      	tst	r7, r3
 8003850:	d0aa      	beq.n	80037a8 <I2C_Slave_ISR_IT+0x7c>
 8003852:	e799      	b.n	8003788 <I2C_Slave_ISR_IT+0x5c>
 8003854:	ffff0000 	.word	0xffff0000
 8003858:	feffffff 	.word	0xfeffffff

0800385c <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800385c:	6803      	ldr	r3, [r0, #0]
{
 800385e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003860:	699c      	ldr	r4, [r3, #24]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003862:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003864:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003866:	05e5      	lsls	r5, r4, #23
 8003868:	d508      	bpl.n	800387c <HAL_I2C_ER_IRQHandler+0x20>
 800386a:	09d5      	lsrs	r5, r2, #7
 800386c:	420d      	tst	r5, r1
 800386e:	d005      	beq.n	800387c <HAL_I2C_ER_IRQHandler+0x20>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003870:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8003872:	4329      	orrs	r1, r5
 8003874:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	0049      	lsls	r1, r1, #1
 800387a:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800387c:	2101      	movs	r1, #1
 800387e:	0565      	lsls	r5, r4, #21
 8003880:	d509      	bpl.n	8003896 <HAL_I2C_ER_IRQHandler+0x3a>
 8003882:	09d5      	lsrs	r5, r2, #7
 8003884:	420d      	tst	r5, r1
 8003886:	d006      	beq.n	8003896 <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003888:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800388a:	3107      	adds	r1, #7
 800388c:	4329      	orrs	r1, r5
 800388e:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003890:	2180      	movs	r1, #128	; 0x80
 8003892:	00c9      	lsls	r1, r1, #3
 8003894:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003896:	2101      	movs	r1, #1
 8003898:	05a4      	lsls	r4, r4, #22
 800389a:	d509      	bpl.n	80038b0 <HAL_I2C_ER_IRQHandler+0x54>
 800389c:	09d2      	lsrs	r2, r2, #7
 800389e:	420a      	tst	r2, r1
 80038a0:	d006      	beq.n	80038b0 <HAL_I2C_ER_IRQHandler+0x54>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80038a2:	2202      	movs	r2, #2
 80038a4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80038a6:	430a      	orrs	r2, r1
 80038a8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	0092      	lsls	r2, r2, #2
 80038ae:	61da      	str	r2, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80038b0:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 80038b2:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80038b4:	4219      	tst	r1, r3
 80038b6:	d001      	beq.n	80038bc <HAL_I2C_ER_IRQHandler+0x60>
    I2C_ITError(hi2c, tmperror);
 80038b8:	f7ff fe4a 	bl	8003550 <I2C_ITError>
}
 80038bc:	bd70      	pop	{r4, r5, r6, pc}

080038be <I2C_DMAAbort>:
  hi2c->hdmatx->XferAbortCallback = NULL;
 80038be:	2300      	movs	r3, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80038c2:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 80038c4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80038c6:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 80038c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80038ca:	6353      	str	r3, [r2, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038cc:	0003      	movs	r3, r0
 80038ce:	3341      	adds	r3, #65	; 0x41
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	2a60      	cmp	r2, #96	; 0x60
 80038d4:	d104      	bne.n	80038e0 <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	3a40      	subs	r2, #64	; 0x40
 80038d8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80038da:	f7ff fe38 	bl	800354e <HAL_I2C_AbortCpltCallback>
}
 80038de:	bd10      	pop	{r4, pc}
    HAL_I2C_ErrorCallback(hi2c);
 80038e0:	f7ff fe34 	bl	800354c <HAL_I2C_ErrorCallback>
}
 80038e4:	e7fb      	b.n	80038de <I2C_DMAAbort+0x20>
	...

080038e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ea:	0004      	movs	r4, r0
 80038ec:	3441      	adds	r4, #65	; 0x41
 80038ee:	7822      	ldrb	r2, [r4, #0]
{
 80038f0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80038f4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f6:	2a20      	cmp	r2, #32
 80038f8:	d118      	bne.n	800392c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 80038fa:	001d      	movs	r5, r3
 80038fc:	3540      	adds	r5, #64	; 0x40
 80038fe:	782e      	ldrb	r6, [r5, #0]
 8003900:	2e01      	cmp	r6, #1
 8003902:	d013      	beq.n	800392c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8003904:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003906:	3022      	adds	r0, #34	; 0x22
 8003908:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800390a:	681e      	ldr	r6, [r3, #0]
 800390c:	3823      	subs	r0, #35	; 0x23
 800390e:	4386      	bics	r6, r0
 8003910:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003912:	681e      	ldr	r6, [r3, #0]
 8003914:	4f06      	ldr	r7, [pc, #24]	; (8003930 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8003916:	403e      	ands	r6, r7
 8003918:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800391a:	681e      	ldr	r6, [r3, #0]
 800391c:	4331      	orrs	r1, r6
 800391e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003920:	6819      	ldr	r1, [r3, #0]
 8003922:	4308      	orrs	r0, r1
 8003924:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003926:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003928:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800392a:	7028      	strb	r0, [r5, #0]
  }
}
 800392c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	ffffefff 	.word	0xffffefff

08003934 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003934:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003936:	0005      	movs	r5, r0
 8003938:	3541      	adds	r5, #65	; 0x41
 800393a:	782a      	ldrb	r2, [r5, #0]
{
 800393c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800393e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003940:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003942:	2a20      	cmp	r2, #32
 8003944:	d117      	bne.n	8003976 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003946:	001c      	movs	r4, r3
 8003948:	3440      	adds	r4, #64	; 0x40
 800394a:	7826      	ldrb	r6, [r4, #0]
 800394c:	2e01      	cmp	r6, #1
 800394e:	d012      	beq.n	8003976 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8003950:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003952:	3022      	adds	r0, #34	; 0x22
 8003954:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003956:	681e      	ldr	r6, [r3, #0]
 8003958:	3823      	subs	r0, #35	; 0x23
 800395a:	4386      	bics	r6, r0
 800395c:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800395e:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003960:	4f05      	ldr	r7, [pc, #20]	; (8003978 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8003962:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003964:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003966:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8003968:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	4308      	orrs	r0, r1
 800396e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003970:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003972:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8003974:	7020      	strb	r0, [r4, #0]
  }
}
 8003976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003978:	fffff0ff 	.word	0xfffff0ff

0800397c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397e:	0004      	movs	r4, r0
 8003980:	b087      	sub	sp, #28
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8003982:	2501      	movs	r5, #1
  if (hpcd == NULL)
 8003984:	2800      	cmp	r0, #0
 8003986:	d031      	beq.n	80039ec <HAL_PCD_Init+0x70>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003988:	4d2c      	ldr	r5, [pc, #176]	; (8003a3c <HAL_PCD_Init+0xc0>)
 800398a:	5d43      	ldrb	r3, [r0, r5]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d104      	bne.n	800399c <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003992:	228a      	movs	r2, #138	; 0x8a
 8003994:	0092      	lsls	r2, r2, #2
 8003996:	5483      	strb	r3, [r0, r2]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003998:	f002 fa06 	bl	8005da8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800399c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800399e:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 80039a0:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_DISABLE(hpcd);
 80039a2:	f000 feb5 	bl	8004710 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a6:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039a8:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039aa:	0018      	movs	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ac:	6861      	ldr	r1, [r4, #4]
 80039ae:	428b      	cmp	r3, r1
 80039b0:	d31f      	bcc.n	80039f2 <HAL_PCD_Init+0x76>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b2:	2300      	movs	r3, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039b4:	0018      	movs	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b6:	4299      	cmp	r1, r3
 80039b8:	d82c      	bhi.n	8003a14 <HAL_PCD_Init+0x98>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80039ba:	0023      	movs	r3, r4
 80039bc:	466a      	mov	r2, sp
 80039be:	3310      	adds	r3, #16
 80039c0:	cb43      	ldmia	r3!, {r0, r1, r6}
 80039c2:	c243      	stmia	r2!, {r0, r1, r6}
 80039c4:	cb03      	ldmia	r3!, {r0, r1}
 80039c6:	c203      	stmia	r2!, {r0, r1}
 80039c8:	68a2      	ldr	r2, [r4, #8]
 80039ca:	68e3      	ldr	r3, [r4, #12]
 80039cc:	6861      	ldr	r1, [r4, #4]
 80039ce:	6820      	ldr	r0, [r4, #0]
 80039d0:	f000 fea8 	bl	8004724 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	1d62      	adds	r2, r4, #5
 80039d8:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 80039da:	2201      	movs	r2, #1
 80039dc:	5562      	strb	r2, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  
  return HAL_OK;
 80039de:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 80039e0:	69e3      	ldr	r3, [r4, #28]
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d102      	bne.n	80039ec <HAL_PCD_Init+0x70>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039e6:	0020      	movs	r0, r4
 80039e8:	f000 fbda 	bl	80041a0 <HAL_PCDEx_ActivateLPM>
}
 80039ec:	0028      	movs	r0, r5
 80039ee:	b007      	add	sp, #28
 80039f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	18a2      	adds	r2, r4, r2
 80039f6:	0017      	movs	r7, r2
 80039f8:	3729      	adds	r7, #41	; 0x29
 80039fa:	703e      	strb	r6, [r7, #0]
    hpcd->IN_ep[i].num = i;
 80039fc:	3f01      	subs	r7, #1
 80039fe:	703b      	strb	r3, [r7, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a00:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a02:	70f8      	strb	r0, [r7, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a04:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a06:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a08:	1c9a      	adds	r2, r3, #2
 8003a0a:	0152      	lsls	r2, r2, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0c:	3301      	adds	r3, #1
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a0e:	5110      	str	r0, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e7cc      	b.n	80039ae <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	18a2      	adds	r2, r4, r2
 8003a18:	0016      	movs	r6, r2
 8003a1a:	362a      	adds	r6, #42	; 0x2a
 8003a1c:	36ff      	adds	r6, #255	; 0xff
 8003a1e:	7030      	strb	r0, [r6, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a20:	32fc      	adds	r2, #252	; 0xfc
    hpcd->OUT_ep[i].num = i;
 8003a22:	3e01      	subs	r6, #1
 8003a24:	7033      	strb	r3, [r6, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a26:	70f0      	strb	r0, [r6, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a28:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a2a:	6410      	str	r0, [r2, #64]	; 0x40
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a2c:	001a      	movs	r2, r3
 8003a2e:	320a      	adds	r2, #10
 8003a30:	0152      	lsls	r2, r2, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a32:	3301      	adds	r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a34:	5110      	str	r0, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	e7bd      	b.n	80039b6 <HAL_PCD_Init+0x3a>
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	00000229 	.word	0x00000229

08003a40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a40:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8003a42:	258a      	movs	r5, #138	; 0x8a
 8003a44:	00ad      	lsls	r5, r5, #2
 8003a46:	5d43      	ldrb	r3, [r0, r5]
{
 8003a48:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8003a4a:	2002      	movs	r0, #2
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d009      	beq.n	8003a64 <HAL_PCD_Start+0x24>
 8003a50:	2301      	movs	r3, #1
  (void)USB_DevConnect(hpcd->Instance);
 8003a52:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003a54:	5563      	strb	r3, [r4, r5]
  (void)USB_DevConnect(hpcd->Instance);
 8003a56:	f001 f8c3 	bl	8004be0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	f000 fe4e 	bl	80046fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003a60:	2000      	movs	r0, #0
 8003a62:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 8003a64:	bd70      	pop	{r4, r5, r6, pc}

08003a66 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8003a66:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8003a68:	258a      	movs	r5, #138	; 0x8a
 8003a6a:	00ad      	lsls	r5, r5, #2
 8003a6c:	5d43      	ldrb	r3, [r0, r5]
{
 8003a6e:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8003a70:	2002      	movs	r0, #2
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d009      	beq.n	8003a8a <HAL_PCD_Stop+0x24>
 8003a76:	2301      	movs	r3, #1
  __HAL_PCD_DISABLE(hpcd);
 8003a78:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003a7a:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_DISABLE(hpcd);
 8003a7c:	f000 fe48 	bl	8004710 <USB_DisableGlobalInt>

  (void)USB_StopDevice(hpcd->Instance);
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	f001 f89d 	bl	8004bc0 <USB_StopDevice>

  __HAL_UNLOCK(hpcd);
 8003a86:	2000      	movs	r0, #0
 8003a88:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}

08003a8c <HAL_PCD_DeInit>:
{
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003a90:	2001      	movs	r0, #1
  if (hpcd == NULL)
 8003a92:	2c00      	cmp	r4, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_PCD_DeInit+0x20>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a96:	2303      	movs	r3, #3
 8003a98:	4d05      	ldr	r5, [pc, #20]	; (8003ab0 <HAL_PCD_DeInit+0x24>)
  (void)HAL_PCD_Stop(hpcd);
 8003a9a:	0020      	movs	r0, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a9c:	5563      	strb	r3, [r4, r5]
  (void)HAL_PCD_Stop(hpcd);
 8003a9e:	f7ff ffe2 	bl	8003a66 <HAL_PCD_Stop>
  HAL_PCD_MspDeInit(hpcd);
 8003aa2:	0020      	movs	r0, r4
 8003aa4:	f002 f99c 	bl	8005de0 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET;
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	5560      	strb	r0, [r4, r5]
}
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	00000229 	.word	0x00000229

08003ab4 <HAL_PCD_DevDisconnect>:
  * @brief  Disconnect the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
{
 8003ab4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8003ab6:	258a      	movs	r5, #138	; 0x8a
 8003ab8:	00ad      	lsls	r5, r5, #2
 8003aba:	5d43      	ldrb	r3, [r0, r5]
{
 8003abc:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8003abe:	2002      	movs	r0, #2
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d006      	beq.n	8003ad2 <HAL_PCD_DevDisconnect+0x1e>
 8003ac4:	2301      	movs	r3, #1
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ac6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003ac8:	5563      	strb	r3, [r4, r5]
  (void)USB_DevDisconnect(hpcd->Instance);
 8003aca:	f001 f891 	bl	8004bf0 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8003ace:	2000      	movs	r0, #0
 8003ad0:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}

08003ad4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ad4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8003ad6:	258a      	movs	r5, #138	; 0x8a
 8003ad8:	00ad      	lsls	r5, r5, #2
 8003ada:	5d43      	ldrb	r3, [r0, r5]
{
 8003adc:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8003ade:	2002      	movs	r0, #2
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d008      	beq.n	8003af6 <HAL_PCD_SetAddress+0x22>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
 8003ae8:	1d63      	adds	r3, r4, #5
 8003aea:	77d9      	strb	r1, [r3, #31]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003aec:	6820      	ldr	r0, [r4, #0]
 8003aee:	f001 f870 	bl	8004bd2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003af2:	2000      	movs	r0, #0
 8003af4:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 8003af6:	bd70      	pop	{r4, r5, r6, pc}

08003af8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	2607      	movs	r6, #7
 8003afc:	0004      	movs	r4, r0
 8003afe:	400e      	ands	r6, r1
 8003b00:	0170      	lsls	r0, r6, #5
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b02:	b249      	sxtb	r1, r1
 8003b04:	1825      	adds	r5, r4, r0
 8003b06:	2900      	cmp	r1, #0
 8003b08:	da1e      	bge.n	8003b48 <HAL_PCD_EP_Open+0x50>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b0a:	0001      	movs	r1, r0
    ep->is_in = 1U;
 8003b0c:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b0e:	3128      	adds	r1, #40	; 0x28
 8003b10:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003b12:	3529      	adds	r5, #41	; 0x29
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8003b14:	7028      	strb	r0, [r5, #0]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8003b16:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8003b18:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b1a:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 8003b1c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8003b1e:	2a00      	cmp	r2, #0
 8003b20:	d000      	beq.n	8003b24 <HAL_PCD_EP_Open+0x2c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b22:	81ce      	strh	r6, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d101      	bne.n	8003b2c <HAL_PCD_EP_Open+0x34>
  {
    ep->data_pid_start = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	710b      	strb	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8003b2c:	258a      	movs	r5, #138	; 0x8a
 8003b2e:	00ad      	lsls	r5, r5, #2
 8003b30:	5d63      	ldrb	r3, [r4, r5]
 8003b32:	2002      	movs	r0, #2
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d006      	beq.n	8003b46 <HAL_PCD_EP_Open+0x4e>
 8003b38:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b3a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003b3c:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b3e:	f000 fe07 	bl	8004750 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b42:	2000      	movs	r0, #0
 8003b44:	5560      	strb	r0, [r4, r5]

  return ret;
}
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b48:	0001      	movs	r1, r0
 8003b4a:	3129      	adds	r1, #41	; 0x29
 8003b4c:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8003b4e:	352a      	adds	r5, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b50:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003b52:	35ff      	adds	r5, #255	; 0xff
 8003b54:	2000      	movs	r0, #0
 8003b56:	e7dd      	b.n	8003b14 <HAL_PCD_EP_Open+0x1c>

08003b58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	0004      	movs	r4, r0
 8003b5c:	2007      	movs	r0, #7
 8003b5e:	4008      	ands	r0, r1
 8003b60:	0143      	lsls	r3, r0, #5
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b62:	b249      	sxtb	r1, r1
 8003b64:	18e2      	adds	r2, r4, r3
 8003b66:	2900      	cmp	r1, #0
 8003b68:	da13      	bge.n	8003b92 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6a:	3328      	adds	r3, #40	; 0x28
 8003b6c:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	3229      	adds	r2, #41	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 8003b72:	258a      	movs	r5, #138	; 0x8a
    ep->is_in = 0U;
 8003b74:	7013      	strb	r3, [r2, #0]
  __HAL_LOCK(hpcd);
 8003b76:	00ad      	lsls	r5, r5, #2
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b78:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8003b7a:	5d63      	ldrb	r3, [r4, r5]
 8003b7c:	2002      	movs	r0, #2
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d006      	beq.n	8003b90 <HAL_PCD_EP_Close+0x38>
 8003b82:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b84:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003b86:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b88:	f000 ff24 	bl	80049d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 8003b90:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b92:	3329      	adds	r3, #41	; 0x29
 8003b94:	33ff      	adds	r3, #255	; 0xff
    ep->is_in = 0U;
 8003b96:	322a      	adds	r2, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b98:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8003b9a:	32ff      	adds	r2, #255	; 0xff
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e7e8      	b.n	8003b72 <HAL_PCD_EP_Close+0x1a>

08003ba0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	2407      	movs	r4, #7
 8003ba4:	4021      	ands	r1, r4
 8003ba6:	014c      	lsls	r4, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ba8:	1906      	adds	r6, r0, r4
 8003baa:	0037      	movs	r7, r6
 8003bac:	37fc      	adds	r7, #252	; 0xfc
  ep->xfer_len = len;
 8003bae:	647b      	str	r3, [r7, #68]	; 0x44
  ep->xfer_count = 0U;
  ep->is_in = 0U;
 8003bb0:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 8003bb2:	2500      	movs	r5, #0
  ep->is_in = 0U;
 8003bb4:	332a      	adds	r3, #42	; 0x2a
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb6:	3629      	adds	r6, #41	; 0x29
  ep->is_in = 0U;
 8003bb8:	33ff      	adds	r3, #255	; 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bba:	36ff      	adds	r6, #255	; 0xff
  ep->xfer_count = 0U;
 8003bbc:	64bd      	str	r5, [r7, #72]	; 0x48
  ep->xfer_buff = pBuf;
 8003bbe:	643a      	str	r2, [r7, #64]	; 0x40
  ep->is_in = 0U;
 8003bc0:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc2:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc4:	0021      	movs	r1, r4
 8003bc6:	3129      	adds	r1, #41	; 0x29
 8003bc8:	31ff      	adds	r1, #255	; 0xff
 8003bca:	1841      	adds	r1, r0, r1
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bcc:	6800      	ldr	r0, [r0, #0]
 8003bce:	f001 f831 	bl	8004c34 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8003bd2:	0028      	movs	r0, r5
 8003bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003bd6 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bd6:	2307      	movs	r3, #7
 8003bd8:	4019      	ands	r1, r3
 8003bda:	310a      	adds	r1, #10
 8003bdc:	0149      	lsls	r1, r1, #5
 8003bde:	1840      	adds	r0, r0, r1
 8003be0:	6840      	ldr	r0, [r0, #4]
}
 8003be2:	4770      	bx	lr

08003be4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003be4:	b570      	push	{r4, r5, r6, lr}
 8003be6:	2407      	movs	r4, #7
 8003be8:	4021      	ands	r1, r4
 8003bea:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bec:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8003bee:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8003bf0:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8003bf2:	0023      	movs	r3, r4
  ep->xfer_buff = pBuf;
 8003bf4:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 8003bf6:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 8003bf8:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8003bfa:	3329      	adds	r3, #41	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bfc:	3428      	adds	r4, #40	; 0x28
  ep->is_in = 1U;
 8003bfe:	701a      	strb	r2, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c00:	7021      	strb	r1, [r4, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c02:	0029      	movs	r1, r5
 8003c04:	3128      	adds	r1, #40	; 0x28
 8003c06:	1841      	adds	r1, r0, r1
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c08:	6800      	ldr	r0, [r0, #0]
 8003c0a:	f001 f813 	bl	8004c34 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8003c0e:	0030      	movs	r0, r6
 8003c10:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c14 <HAL_PCD_IRQHandler>:
{
 8003c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c16:	0004      	movs	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003c18:	6800      	ldr	r0, [r0, #0]
 8003c1a:	f000 fff0 	bl	8004bfe <USB_ReadInterrupts>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c1e:	2780      	movs	r7, #128	; 0x80
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003c20:	0403      	lsls	r3, r0, #16
 8003c22:	d500      	bpl.n	8003c26 <HAL_PCD_IRQHandler+0x12>
 8003c24:	e0d9      	b.n	8003dda <HAL_PCD_IRQHandler+0x1c6>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003c26:	6820      	ldr	r0, [r4, #0]
 8003c28:	f000 ffe9 	bl	8004bfe <USB_ReadInterrupts>
 8003c2c:	0543      	lsls	r3, r0, #21
 8003c2e:	d50c      	bpl.n	8003c4a <HAL_PCD_IRQHandler+0x36>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	49ac      	ldr	r1, [pc, #688]	; (8003ee4 <HAL_PCD_IRQHandler+0x2d0>)
 8003c34:	3306      	adds	r3, #6
 8003c36:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8003c38:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8003c3e:	f002 f908 	bl	8005e52 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003c42:	2100      	movs	r1, #0
 8003c44:	0020      	movs	r0, r4
 8003c46:	f7ff ff45 	bl	8003ad4 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003c4a:	6820      	ldr	r0, [r4, #0]
 8003c4c:	f000 ffd7 	bl	8004bfe <USB_ReadInterrupts>
 8003c50:	0443      	lsls	r3, r0, #17
 8003c52:	d505      	bpl.n	8003c60 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	49a4      	ldr	r1, [pc, #656]	; (8003ee8 <HAL_PCD_IRQHandler+0x2d4>)
 8003c58:	3306      	adds	r3, #6
 8003c5a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003c60:	6820      	ldr	r0, [r4, #0]
 8003c62:	f000 ffcc 	bl	8004bfe <USB_ReadInterrupts>
 8003c66:	0483      	lsls	r3, r0, #18
 8003c68:	d505      	bpl.n	8003c76 <HAL_PCD_IRQHandler+0x62>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	499f      	ldr	r1, [pc, #636]	; (8003eec <HAL_PCD_IRQHandler+0x2d8>)
 8003c6e:	3306      	adds	r3, #6
 8003c70:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003c72:	400a      	ands	r2, r1
 8003c74:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003c76:	6820      	ldr	r0, [r4, #0]
 8003c78:	f000 ffc1 	bl	8004bfe <USB_ReadInterrupts>
 8003c7c:	04c3      	lsls	r3, r0, #19
 8003c7e:	d51c      	bpl.n	8003cba <HAL_PCD_IRQHandler+0xa6>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003c80:	2104      	movs	r1, #4
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	3302      	adds	r3, #2
 8003c86:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003c88:	438a      	bics	r2, r1
 8003c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003c8c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003c8e:	1849      	adds	r1, r1, r1
 8003c90:	438a      	bics	r2, r1
 8003c92:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L1)
 8003c94:	2398      	movs	r3, #152	; 0x98
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	5ce2      	ldrb	r2, [r4, r3]
 8003c9a:	2a01      	cmp	r2, #1
 8003c9c:	d104      	bne.n	8003ca8 <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 8003c9e:	2100      	movs	r1, #0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ca0:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 8003ca2:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ca4:	f000 fa90 	bl	80041c8 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8003ca8:	0020      	movs	r0, r4
 8003caa:	f002 f8f5 	bl	8005e98 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	498f      	ldr	r1, [pc, #572]	; (8003ef0 <HAL_PCD_IRQHandler+0x2dc>)
 8003cb2:	3306      	adds	r3, #6
 8003cb4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003cb6:	400a      	ands	r2, r1
 8003cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003cba:	6820      	ldr	r0, [r4, #0]
 8003cbc:	f000 ff9f 	bl	8004bfe <USB_ReadInterrupts>
 8003cc0:	0503      	lsls	r3, r0, #20
 8003cc2:	d515      	bpl.n	8003cf0 <HAL_PCD_IRQHandler+0xdc>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	6820      	ldr	r0, [r4, #0]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003cc8:	4d8a      	ldr	r5, [pc, #552]	; (8003ef4 <HAL_PCD_IRQHandler+0x2e0>)
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003cca:	1c83      	adds	r3, r0, #2
 8003ccc:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003cd2:	1d81      	adds	r1, r0, #6
 8003cd4:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8003cd6:	402a      	ands	r2, r5
 8003cd8:	87ca      	strh	r2, [r1, #62]	; 0x3e
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8003cda:	2204      	movs	r2, #4
 8003cdc:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8003ce2:	f000 ff8c 	bl	8004bfe <USB_ReadInterrupts>
 8003ce6:	04c3      	lsls	r3, r0, #19
 8003ce8:	d402      	bmi.n	8003cf0 <HAL_PCD_IRQHandler+0xdc>
      HAL_PCD_SuspendCallback(hpcd);
 8003cea:	0020      	movs	r0, r4
 8003cec:	f002 f8c2 	bl	8005e74 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003cf0:	6820      	ldr	r0, [r4, #0]
 8003cf2:	f000 ff84 	bl	8004bfe <USB_ReadInterrupts>
 8003cf6:	2580      	movs	r5, #128	; 0x80
 8003cf8:	4228      	tst	r0, r5
 8003cfa:	d020      	beq.n	8003d3e <HAL_PCD_IRQHandler+0x12a>
    if (hpcd->LPM_State == LPM_L0)
 8003cfc:	2098      	movs	r0, #152	; 0x98
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003cfe:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 8003d00:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003d02:	1d99      	adds	r1, r3, #6
 8003d04:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8003d06:	43aa      	bics	r2, r5
 8003d08:	87ca      	strh	r2, [r1, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L0)
 8003d0a:	5c22      	ldrb	r2, [r4, r0]
 8003d0c:	2a00      	cmp	r2, #0
 8003d0e:	d000      	beq.n	8003d12 <HAL_PCD_IRQHandler+0xfe>
 8003d10:	e1bb      	b.n	800408a <HAL_PCD_IRQHandler+0x476>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8003d12:	2104      	movs	r1, #4
 8003d14:	1c9a      	adds	r2, r3, #2
 8003d16:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003d18:	3354      	adds	r3, #84	; 0x54
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8003d1a:	4329      	orrs	r1, r5
 8003d1c:	87d1      	strh	r1, [r2, #62]	; 0x3e
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003d1e:	2108      	movs	r1, #8
 8003d20:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
 8003d22:	4329      	orrs	r1, r5
 8003d24:	87d1      	strh	r1, [r2, #62]	; 0x3e
      hpcd->LPM_State = LPM_L1;
 8003d26:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003d28:	223c      	movs	r2, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8003d2a:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003d2c:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d2e:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	4013      	ands	r3, r2
 8003d34:	2299      	movs	r2, #153	; 0x99
 8003d36:	0092      	lsls	r2, r2, #2
 8003d38:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d3a:	f000 fa45 	bl	80041c8 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003d3e:	6820      	ldr	r0, [r4, #0]
 8003d40:	f000 ff5d 	bl	8004bfe <USB_ReadInterrupts>
 8003d44:	0583      	lsls	r3, r0, #22
 8003d46:	d508      	bpl.n	8003d5a <HAL_PCD_IRQHandler+0x146>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	496b      	ldr	r1, [pc, #428]	; (8003ef8 <HAL_PCD_IRQHandler+0x2e4>)
 8003d4c:	3306      	adds	r3, #6
 8003d4e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8003d50:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d52:	400a      	ands	r2, r1
 8003d54:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8003d56:	f002 f875 	bl	8005e44 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003d5a:	6820      	ldr	r0, [r4, #0]
 8003d5c:	f000 ff4f 	bl	8004bfe <USB_ReadInterrupts>
 8003d60:	05c3      	lsls	r3, r0, #23
 8003d62:	d505      	bpl.n	8003d70 <HAL_PCD_IRQHandler+0x15c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	4965      	ldr	r1, [pc, #404]	; (8003efc <HAL_PCD_IRQHandler+0x2e8>)
 8003d68:	3306      	adds	r3, #6
 8003d6a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003d6c:	400a      	ands	r2, r1
 8003d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 8003d70:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d72:	260f      	movs	r6, #15
    wIstr = hpcd->Instance->ISTR;
 8003d74:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
 8003d76:	b289      	uxth	r1, r1
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d78:	400e      	ands	r6, r1
    if (epindex == 0U)
 8003d7a:	d000      	beq.n	8003d7e <HAL_PCD_IRQHandler+0x16a>
 8003d7c:	e0d0      	b.n	8003f20 <HAL_PCD_IRQHandler+0x30c>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d7e:	2310      	movs	r3, #16
 8003d80:	4019      	ands	r1, r3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d82:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d84:	2900      	cmp	r1, #0
 8003d86:	d12f      	bne.n	8003de8 <HAL_PCD_IRQHandler+0x1d4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d88:	4a5d      	ldr	r2, [pc, #372]	; (8003f00 <HAL_PCD_IRQHandler+0x2ec>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2280      	movs	r2, #128	; 0x80
 8003d8e:	0212      	lsls	r2, r2, #8
 8003d90:	4313      	orrs	r3, r2
 8003d92:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d94:	0003      	movs	r3, r0
 8003d96:	3350      	adds	r3, #80	; 0x50
 8003d98:	881a      	ldrh	r2, [r3, #0]
 8003d9a:	0023      	movs	r3, r4
 8003d9c:	3328      	adds	r3, #40	; 0x28
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	18c0      	adds	r0, r0, r3
 8003da4:	4b57      	ldr	r3, [pc, #348]	; (8003f04 <HAL_PCD_IRQHandler+0x2f0>)
 8003da6:	1880      	adds	r0, r0, r2
 8003da8:	18c0      	adds	r0, r0, r3
 8003daa:	8803      	ldrh	r3, [r0, #0]
        ep->xfer_buff += ep->xfer_count;
 8003dac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003dae:	059b      	lsls	r3, r3, #22
 8003db0:	0d9b      	lsrs	r3, r3, #22
 8003db2:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8003db4:	18d3      	adds	r3, r2, r3
 8003db6:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003db8:	0020      	movs	r0, r4
 8003dba:	f002 f839 	bl	8005e30 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003dbe:	1d63      	adds	r3, r4, #5
 8003dc0:	7fda      	ldrb	r2, [r3, #31]
 8003dc2:	2a00      	cmp	r2, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_PCD_IRQHandler+0x1c6>
 8003dc6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d106      	bne.n	8003dda <HAL_PCD_IRQHandler+0x1c6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003dcc:	2280      	movs	r2, #128	; 0x80
 8003dce:	7fd9      	ldrb	r1, [r3, #31]
 8003dd0:	4311      	orrs	r1, r2
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	324c      	adds	r2, #76	; 0x4c
 8003dd6:	8011      	strh	r1, [r2, #0]
          hpcd->USB_Address = 0U;
 8003dd8:	77d8      	strb	r0, [r3, #31]
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dda:	6820      	ldr	r0, [r4, #0]
 8003ddc:	1d82      	adds	r2, r0, #6
 8003dde:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8003de0:	b21b      	sxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	dbc5      	blt.n	8003d72 <HAL_PCD_IRQHandler+0x15e>
 8003de6:	e71e      	b.n	8003c26 <HAL_PCD_IRQHandler+0x12>
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003de8:	2680      	movs	r6, #128	; 0x80
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003dea:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003dec:	0136      	lsls	r6, r6, #4
 8003dee:	401e      	ands	r6, r3
 8003df0:	d021      	beq.n	8003e36 <HAL_PCD_IRQHandler+0x222>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003df2:	0003      	movs	r3, r0
 8003df4:	3350      	adds	r3, #80	; 0x50
 8003df6:	881a      	ldrh	r2, [r3, #0]
 8003df8:	2394      	movs	r3, #148	; 0x94
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	5ce3      	ldrb	r3, [r4, r3]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003dfe:	218c      	movs	r1, #140	; 0x8c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	18c3      	adds	r3, r0, r3
 8003e04:	189b      	adds	r3, r3, r2
 8003e06:	4a40      	ldr	r2, [pc, #256]	; (8003f08 <HAL_PCD_IRQHandler+0x2f4>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e08:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e0a:	189b      	adds	r3, r3, r2
 8003e0c:	0022      	movs	r2, r4
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	3229      	adds	r2, #41	; 0x29
 8003e12:	059b      	lsls	r3, r3, #22
 8003e14:	0d9b      	lsrs	r3, r3, #22
 8003e16:	32ff      	adds	r2, #255	; 0xff
 8003e18:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e1a:	1861      	adds	r1, r4, r1
 8003e1c:	88d2      	ldrh	r2, [r2, #6]
 8003e1e:	f000 fff1 	bl	8004e04 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e22:	6822      	ldr	r2, [r4, #0]
 8003e24:	4939      	ldr	r1, [pc, #228]	; (8003f0c <HAL_PCD_IRQHandler+0x2f8>)
 8003e26:	8813      	ldrh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003e28:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e2a:	400b      	ands	r3, r1
 8003e2c:	433b      	orrs	r3, r7
 8003e2e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003e30:	f001 ffea 	bl	8005e08 <HAL_PCD_SetupStageCallback>
 8003e34:	e7d1      	b.n	8003dda <HAL_PCD_IRQHandler+0x1c6>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e36:	b21b      	sxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	dace      	bge.n	8003dda <HAL_PCD_IRQHandler+0x1c6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e3c:	8803      	ldrh	r3, [r0, #0]
 8003e3e:	4a33      	ldr	r2, [pc, #204]	; (8003f0c <HAL_PCD_IRQHandler+0x2f8>)
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e40:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e42:	4013      	ands	r3, r2
 8003e44:	433b      	orrs	r3, r7
 8003e46:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e48:	0003      	movs	r3, r0
 8003e4a:	3350      	adds	r3, #80	; 0x50
 8003e4c:	881a      	ldrh	r2, [r3, #0]
 8003e4e:	2394      	movs	r3, #148	; 0x94
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	5ce3      	ldrb	r3, [r4, r3]
 8003e54:	3529      	adds	r5, #41	; 0x29
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	18c3      	adds	r3, r0, r3
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	4a2a      	ldr	r2, [pc, #168]	; (8003f08 <HAL_PCD_IRQHandler+0x2f4>)
 8003e5e:	35ff      	adds	r5, #255	; 0xff
 8003e60:	189b      	adds	r3, r3, r2
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	059b      	lsls	r3, r3, #22
 8003e66:	0d9b      	lsrs	r3, r3, #22
 8003e68:	61eb      	str	r3, [r5, #28]
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e6a:	d00d      	beq.n	8003e88 <HAL_PCD_IRQHandler+0x274>
 8003e6c:	6969      	ldr	r1, [r5, #20]
 8003e6e:	2900      	cmp	r1, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_PCD_IRQHandler+0x274>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e72:	88ea      	ldrh	r2, [r5, #6]
 8003e74:	f000 ffc6 	bl	8004e04 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003e78:	696b      	ldr	r3, [r5, #20]
 8003e7a:	69ea      	ldr	r2, [r5, #28]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e7c:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e82:	0020      	movs	r0, r4
 8003e84:	f001 ffc9 	bl	8005e1a <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003e88:	6821      	ldr	r1, [r4, #0]
 8003e8a:	4a1f      	ldr	r2, [pc, #124]	; (8003f08 <HAL_PCD_IRQHandler+0x2f4>)
 8003e8c:	000b      	movs	r3, r1
 8003e8e:	3350      	adds	r3, #80	; 0x50
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	188a      	adds	r2, r1, r2
 8003e94:	18d2      	adds	r2, r2, r3
 8003e96:	692b      	ldr	r3, [r5, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10f      	bne.n	8003ebc <HAL_PCD_IRQHandler+0x2a8>
 8003e9c:	8813      	ldrh	r3, [r2, #0]
 8003e9e:	481c      	ldr	r0, [pc, #112]	; (8003f10 <HAL_PCD_IRQHandler+0x2fc>)
 8003ea0:	4018      	ands	r0, r3
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <HAL_PCD_IRQHandler+0x300>)
 8003ea4:	4303      	orrs	r3, r0
 8003ea6:	8013      	strh	r3, [r2, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ea8:	880b      	ldrh	r3, [r1, #0]
 8003eaa:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <HAL_PCD_IRQHandler+0x304>)
 8003eac:	401a      	ands	r2, r3
 8003eae:	23c0      	movs	r3, #192	; 0xc0
 8003eb0:	019b      	lsls	r3, r3, #6
 8003eb2:	4053      	eors	r3, r2
 8003eb4:	4a19      	ldr	r2, [pc, #100]	; (8003f1c <HAL_PCD_IRQHandler+0x308>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	800b      	strh	r3, [r1, #0]
 8003eba:	e78e      	b.n	8003dda <HAL_PCD_IRQHandler+0x1c6>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8003ebe:	d806      	bhi.n	8003ece <HAL_PCD_IRQHandler+0x2ba>
 8003ec0:	2501      	movs	r5, #1
 8003ec2:	0858      	lsrs	r0, r3, #1
 8003ec4:	402b      	ands	r3, r5
 8003ec6:	18c0      	adds	r0, r0, r3
 8003ec8:	0280      	lsls	r0, r0, #10
 8003eca:	8010      	strh	r0, [r2, #0]
 8003ecc:	e7ec      	b.n	8003ea8 <HAL_PCD_IRQHandler+0x294>
 8003ece:	251f      	movs	r5, #31
 8003ed0:	0958      	lsrs	r0, r3, #5
 8003ed2:	402b      	ands	r3, r5
 8003ed4:	425d      	negs	r5, r3
 8003ed6:	416b      	adcs	r3, r5
 8003ed8:	1ac0      	subs	r0, r0, r3
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <HAL_PCD_IRQHandler+0x300>)
 8003edc:	0280      	lsls	r0, r0, #10
 8003ede:	4318      	orrs	r0, r3
 8003ee0:	e7f3      	b.n	8003eca <HAL_PCD_IRQHandler+0x2b6>
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	fffffbff 	.word	0xfffffbff
 8003ee8:	ffffbfff 	.word	0xffffbfff
 8003eec:	ffffdfff 	.word	0xffffdfff
 8003ef0:	ffffefff 	.word	0xffffefff
 8003ef4:	fffff7ff 	.word	0xfffff7ff
 8003ef8:	fffffdff 	.word	0xfffffdff
 8003efc:	fffffeff 	.word	0xfffffeff
 8003f00:	ffff8f0f 	.word	0xffff8f0f
 8003f04:	00000402 	.word	0x00000402
 8003f08:	00000406 	.word	0x00000406
 8003f0c:	00000f8f 	.word	0x00000f8f
 8003f10:	ffff83ff 	.word	0xffff83ff
 8003f14:	ffff8000 	.word	0xffff8000
 8003f18:	ffffbf8f 	.word	0xffffbf8f
 8003f1c:	00008080 	.word	0x00008080
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003f20:	00b3      	lsls	r3, r6, #2
 8003f22:	18c2      	adds	r2, r0, r3
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	8813      	ldrh	r3, [r2, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	9300      	str	r3, [sp, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f2c:	466b      	mov	r3, sp
 8003f2e:	2100      	movs	r1, #0
 8003f30:	5e5b      	ldrsh	r3, [r3, r1]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	da3c      	bge.n	8003fb0 <HAL_PCD_IRQHandler+0x39c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f36:	8813      	ldrh	r3, [r2, #0]
 8003f38:	4956      	ldr	r1, [pc, #344]	; (8004094 <HAL_PCD_IRQHandler+0x480>)
 8003f3a:	0005      	movs	r5, r0
 8003f3c:	400b      	ands	r3, r1
 8003f3e:	433b      	orrs	r3, r7
 8003f40:	8013      	strh	r3, [r2, #0]
        if (ep->doublebuffer == 0U)
 8003f42:	0173      	lsls	r3, r6, #5
 8003f44:	18e3      	adds	r3, r4, r3
 8003f46:	001a      	movs	r2, r3
 8003f48:	3235      	adds	r2, #53	; 0x35
 8003f4a:	32ff      	adds	r2, #255	; 0xff
 8003f4c:	7811      	ldrb	r1, [r2, #0]
 8003f4e:	3550      	adds	r5, #80	; 0x50
 8003f50:	3a0c      	subs	r2, #12
 8003f52:	2900      	cmp	r1, #0
 8003f54:	d156      	bne.n	8004004 <HAL_PCD_IRQHandler+0x3f0>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f56:	7812      	ldrb	r2, [r2, #0]
 8003f58:	8829      	ldrh	r1, [r5, #0]
 8003f5a:	00d2      	lsls	r2, r2, #3
 8003f5c:	1852      	adds	r2, r2, r1
 8003f5e:	494e      	ldr	r1, [pc, #312]	; (8004098 <HAL_PCD_IRQHandler+0x484>)
 8003f60:	1812      	adds	r2, r2, r0
 8003f62:	1852      	adds	r2, r2, r1
 8003f64:	8815      	ldrh	r5, [r2, #0]
 8003f66:	05ad      	lsls	r5, r5, #22
 8003f68:	0dad      	lsrs	r5, r5, #22
          if (count != 0U)
 8003f6a:	d008      	beq.n	8003f7e <HAL_PCD_IRQHandler+0x36a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	33fc      	adds	r3, #252	; 0xfc
 8003f70:	0019      	movs	r1, r3
 8003f72:	32fe      	adds	r2, #254	; 0xfe
 8003f74:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003f76:	002b      	movs	r3, r5
 8003f78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f7a:	f000 ff43 	bl	8004e04 <USB_ReadPMA>
 8003f7e:	0171      	lsls	r1, r6, #5
 8003f80:	1863      	adds	r3, r4, r1
        ep->xfer_count += count;
 8003f82:	0018      	movs	r0, r3
 8003f84:	30fc      	adds	r0, #252	; 0xfc
 8003f86:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	1952      	adds	r2, r2, r5
 8003f8c:	6482      	str	r2, [r0, #72]	; 0x48
        ep->xfer_buff += count;
 8003f8e:	6c02      	ldr	r2, [r0, #64]	; 0x40
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f90:	6c43      	ldr	r3, [r0, #68]	; 0x44
        ep->xfer_buff += count;
 8003f92:	1952      	adds	r2, r2, r5
 8003f94:	6402      	str	r2, [r0, #64]	; 0x40
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f96:	469c      	mov	ip, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_PCD_IRQHandler+0x38e>
 8003f9c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8003f9e:	4285      	cmp	r5, r0
 8003fa0:	d267      	bcs.n	8004072 <HAL_PCD_IRQHandler+0x45e>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003fa2:	1861      	adds	r1, r4, r1
 8003fa4:	3129      	adds	r1, #41	; 0x29
 8003fa6:	31ff      	adds	r1, #255	; 0xff
 8003fa8:	7809      	ldrb	r1, [r1, #0]
 8003faa:	0020      	movs	r0, r4
 8003fac:	f001 ff35 	bl	8005e1a <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003fb0:	9b00      	ldr	r3, [sp, #0]
 8003fb2:	423b      	tst	r3, r7
 8003fb4:	d100      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x3a4>
 8003fb6:	e710      	b.n	8003dda <HAL_PCD_IRQHandler+0x1c6>
 8003fb8:	6823      	ldr	r3, [r4, #0]
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003fba:	00b2      	lsls	r2, r6, #2
 8003fbc:	1899      	adds	r1, r3, r2
 8003fbe:	880a      	ldrh	r2, [r1, #0]
 8003fc0:	4836      	ldr	r0, [pc, #216]	; (800409c <HAL_PCD_IRQHandler+0x488>)

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fc2:	0176      	lsls	r6, r6, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003fc4:	4002      	ands	r2, r0
 8003fc6:	2080      	movs	r0, #128	; 0x80
 8003fc8:	0200      	lsls	r0, r0, #8
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fca:	19a6      	adds	r6, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003fcc:	4302      	orrs	r2, r0
 8003fce:	800a      	strh	r2, [r1, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fd0:	0031      	movs	r1, r6
 8003fd2:	001a      	movs	r2, r3
 8003fd4:	3128      	adds	r1, #40	; 0x28
 8003fd6:	7808      	ldrb	r0, [r1, #0]
 8003fd8:	3250      	adds	r2, #80	; 0x50
 8003fda:	8812      	ldrh	r2, [r2, #0]
 8003fdc:	00c0      	lsls	r0, r0, #3
 8003fde:	181b      	adds	r3, r3, r0
 8003fe0:	189b      	adds	r3, r3, r2
 8003fe2:	4a2f      	ldr	r2, [pc, #188]	; (80040a0 <HAL_PCD_IRQHandler+0x48c>)
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fe4:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fe6:	189b      	adds	r3, r3, r2
 8003fe8:	881a      	ldrh	r2, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8003fea:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fec:	0592      	lsls	r2, r2, #22
 8003fee:	0d92      	lsrs	r2, r2, #22
 8003ff0:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8003ff2:	189a      	adds	r2, r3, r2
        if (ep->xfer_len == 0U)
 8003ff4:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8003ff6:	63f2      	str	r2, [r6, #60]	; 0x3c
 8003ff8:	7809      	ldrb	r1, [r1, #0]
        if (ep->xfer_len == 0U)
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d142      	bne.n	8004084 <HAL_PCD_IRQHandler+0x470>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ffe:	f001 ff17 	bl	8005e30 <HAL_PCD_DataInStageCallback>
 8004002:	e6ea      	b.n	8003dda <HAL_PCD_IRQHandler+0x1c6>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	0091      	lsls	r1, r2, #2
 8004008:	1841      	adds	r1, r0, r1
 800400a:	8809      	ldrh	r1, [r1, #0]
 800400c:	468c      	mov	ip, r1
 800400e:	00d1      	lsls	r1, r2, #3
 8004010:	4662      	mov	r2, ip
 8004012:	0452      	lsls	r2, r2, #17
 8004014:	d520      	bpl.n	8004058 <HAL_PCD_IRQHandler+0x444>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004016:	882a      	ldrh	r2, [r5, #0]
 8004018:	1882      	adds	r2, r0, r2
 800401a:	1852      	adds	r2, r2, r1
 800401c:	4920      	ldr	r1, [pc, #128]	; (80040a0 <HAL_PCD_IRQHandler+0x48c>)
 800401e:	1852      	adds	r2, r2, r1
 8004020:	8815      	ldrh	r5, [r2, #0]
 8004022:	05ad      	lsls	r5, r5, #22
 8004024:	0dad      	lsrs	r5, r5, #22
            if (count != 0U)
 8004026:	d008      	beq.n	800403a <HAL_PCD_IRQHandler+0x426>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004028:	001a      	movs	r2, r3
 800402a:	32fe      	adds	r2, #254	; 0xfe
 800402c:	8e52      	ldrh	r2, [r2, #50]	; 0x32
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800402e:	33fc      	adds	r3, #252	; 0xfc
 8004030:	0019      	movs	r1, r3
 8004032:	002b      	movs	r3, r5
 8004034:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004036:	f000 fee5 	bl	8004e04 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800403a:	0173      	lsls	r3, r6, #5
 800403c:	18e3      	adds	r3, r4, r3
 800403e:	3329      	adds	r3, #41	; 0x29
 8004040:	33ff      	adds	r3, #255	; 0xff
 8004042:	781a      	ldrb	r2, [r3, #0]
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	0092      	lsls	r2, r2, #2
 8004048:	189a      	adds	r2, r3, r2
 800404a:	8813      	ldrh	r3, [r2, #0]
 800404c:	4915      	ldr	r1, [pc, #84]	; (80040a4 <HAL_PCD_IRQHandler+0x490>)
 800404e:	400b      	ands	r3, r1
 8004050:	4915      	ldr	r1, [pc, #84]	; (80040a8 <HAL_PCD_IRQHandler+0x494>)
 8004052:	430b      	orrs	r3, r1
 8004054:	8013      	strh	r3, [r2, #0]
 8004056:	e792      	b.n	8003f7e <HAL_PCD_IRQHandler+0x36a>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004058:	882a      	ldrh	r2, [r5, #0]
 800405a:	1882      	adds	r2, r0, r2
 800405c:	1852      	adds	r2, r2, r1
 800405e:	490e      	ldr	r1, [pc, #56]	; (8004098 <HAL_PCD_IRQHandler+0x484>)
 8004060:	1852      	adds	r2, r2, r1
 8004062:	8815      	ldrh	r5, [r2, #0]
 8004064:	05ad      	lsls	r5, r5, #22
 8004066:	0dad      	lsrs	r5, r5, #22
            if (count != 0U)
 8004068:	d0e7      	beq.n	800403a <HAL_PCD_IRQHandler+0x426>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800406a:	001a      	movs	r2, r3
 800406c:	32fe      	adds	r2, #254	; 0xfe
 800406e:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8004070:	e7dd      	b.n	800402e <HAL_PCD_IRQHandler+0x41a>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004072:	9b01      	ldr	r3, [sp, #4]
 8004074:	0020      	movs	r0, r4
 8004076:	3329      	adds	r3, #41	; 0x29
 8004078:	33ff      	adds	r3, #255	; 0xff
 800407a:	7819      	ldrb	r1, [r3, #0]
 800407c:	4663      	mov	r3, ip
 800407e:	f7ff fd8f 	bl	8003ba0 <HAL_PCD_EP_Receive>
 8004082:	e795      	b.n	8003fb0 <HAL_PCD_IRQHandler+0x39c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004084:	f7ff fdae 	bl	8003be4 <HAL_PCD_EP_Transmit>
 8004088:	e6a7      	b.n	8003dda <HAL_PCD_IRQHandler+0x1c6>
      HAL_PCD_SuspendCallback(hpcd);
 800408a:	0020      	movs	r0, r4
 800408c:	f001 fef2 	bl	8005e74 <HAL_PCD_SuspendCallback>
 8004090:	e655      	b.n	8003d3e <HAL_PCD_IRQHandler+0x12a>
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	00000f8f 	.word	0x00000f8f
 8004098:	00000406 	.word	0x00000406
 800409c:	ffff8f0f 	.word	0xffff8f0f
 80040a0:	00000402 	.word	0x00000402
 80040a4:	ffff8f8f 	.word	0xffff8f8f
 80040a8:	000080c0 	.word	0x000080c0

080040ac <HAL_PCD_EP_SetStall>:
{
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	0004      	movs	r4, r0
 80040b0:	2507      	movs	r5, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040b2:	6863      	ldr	r3, [r4, #4]
 80040b4:	400d      	ands	r5, r1
    return HAL_ERROR;
 80040b6:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040b8:	429d      	cmp	r5, r3
 80040ba:	d820      	bhi.n	80040fe <HAL_PCD_EP_SetStall+0x52>
  if ((0x80U & ep_addr) == 0x80U)
 80040bc:	b24b      	sxtb	r3, r1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	da1e      	bge.n	8004100 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c2:	016b      	lsls	r3, r5, #5
 80040c4:	0019      	movs	r1, r3
    ep->is_in = 1U;
 80040c6:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c8:	3128      	adds	r1, #40	; 0x28
    ep->is_in = 1U;
 80040ca:	3329      	adds	r3, #41	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040cc:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80040ce:	7018      	strb	r0, [r3, #0]
  ep->is_stall = 1U;
 80040d0:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 80040d2:	268a      	movs	r6, #138	; 0x8a
  ep->is_stall = 1U;
 80040d4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d6:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80040d8:	00b6      	lsls	r6, r6, #2
 80040da:	5da2      	ldrb	r2, [r4, r6]
 80040dc:	2002      	movs	r0, #2
 80040de:	429a      	cmp	r2, r3
 80040e0:	d00d      	beq.n	80040fe <HAL_PCD_EP_SetStall+0x52>
 80040e2:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040e4:	6820      	ldr	r0, [r4, #0]
 80040e6:	f000 fd0b 	bl	8004b00 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040ea:	2d00      	cmp	r5, #0
 80040ec:	d105      	bne.n	80040fa <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80040ee:	238c      	movs	r3, #140	; 0x8c
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	18e1      	adds	r1, r4, r3
 80040f4:	6820      	ldr	r0, [r4, #0]
 80040f6:	f000 fd86 	bl	8004c06 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80040fa:	2000      	movs	r0, #0
 80040fc:	55a0      	strb	r0, [r4, r6]
}
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8004100:	014b      	lsls	r3, r1, #5
 8004102:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8004104:	2200      	movs	r2, #0
 8004106:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8004108:	3129      	adds	r1, #41	; 0x29
    ep->is_in = 0U;
 800410a:	332a      	adds	r3, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr];
 800410c:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 800410e:	33ff      	adds	r3, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8004110:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	e7dc      	b.n	80040d0 <HAL_PCD_EP_SetStall+0x24>

08004116 <HAL_PCD_EP_ClrStall>:
{
 8004116:	b570      	push	{r4, r5, r6, lr}
 8004118:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800411a:	230f      	movs	r3, #15
 800411c:	6862      	ldr	r2, [r4, #4]
 800411e:	400b      	ands	r3, r1
    return HAL_ERROR;
 8004120:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004122:	4293      	cmp	r3, r2
 8004124:	d81a      	bhi.n	800415c <HAL_PCD_EP_ClrStall+0x46>
 8004126:	2507      	movs	r5, #7
 8004128:	400d      	ands	r5, r1
 800412a:	016b      	lsls	r3, r5, #5
  if ((0x80U & ep_addr) == 0x80U)
 800412c:	b249      	sxtb	r1, r1
 800412e:	18e2      	adds	r2, r4, r3
 8004130:	2900      	cmp	r1, #0
 8004132:	da14      	bge.n	800415e <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004134:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8004136:	3229      	adds	r2, #41	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004138:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 800413a:	7010      	strb	r0, [r2, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800413c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 0U;
 800413e:	2600      	movs	r6, #0
  __HAL_LOCK(hpcd);
 8004140:	258a      	movs	r5, #138	; 0x8a
  ep->is_stall = 0U;
 8004142:	708e      	strb	r6, [r1, #2]
  __HAL_LOCK(hpcd);
 8004144:	00ad      	lsls	r5, r5, #2
 8004146:	5d63      	ldrb	r3, [r4, r5]
 8004148:	2002      	movs	r0, #2
 800414a:	2b01      	cmp	r3, #1
 800414c:	d006      	beq.n	800415c <HAL_PCD_EP_ClrStall+0x46>
 800414e:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004150:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004152:	5563      	strb	r3, [r4, r5]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004154:	f000 fcf2 	bl	8004b3c <USB_EPClearStall>
  return HAL_OK;
 8004158:	0030      	movs	r0, r6
  __HAL_UNLOCK(hpcd);
 800415a:	5566      	strb	r6, [r4, r5]
}
 800415c:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800415e:	3329      	adds	r3, #41	; 0x29
 8004160:	33ff      	adds	r3, #255	; 0xff
 8004162:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	322a      	adds	r2, #42	; 0x2a
 8004168:	32ff      	adds	r2, #255	; 0xff
 800416a:	7013      	strb	r3, [r2, #0]
 800416c:	e7e6      	b.n	800413c <HAL_PCD_EP_ClrStall+0x26>

0800416e <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800416e:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004170:	060c      	lsls	r4, r1, #24
 8004172:	d50b      	bpl.n	800418c <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004174:	2407      	movs	r4, #7
 8004176:	4021      	ands	r1, r4
 8004178:	0149      	lsls	r1, r1, #5
 800417a:	3128      	adds	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800417c:	1841      	adds	r1, r0, r1
 800417e:	b298      	uxth	r0, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004180:	2a00      	cmp	r2, #0
 8004182:	d107      	bne.n	8004194 <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004184:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004186:	80c8      	strh	r0, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8004188:	2000      	movs	r0, #0
 800418a:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800418c:	0149      	lsls	r1, r1, #5
 800418e:	3129      	adds	r1, #41	; 0x29
 8004190:	31ff      	adds	r1, #255	; 0xff
 8004192:	e7f3      	b.n	800417c <HAL_PCDEx_PMAConfig+0xe>
    ep->doublebuffer = 1U;
 8004194:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004196:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8004198:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800419a:	8108      	strh	r0, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800419c:	814b      	strh	r3, [r1, #10]
 800419e:	e7f3      	b.n	8004188 <HAL_PCDEx_PMAConfig+0x1a>

080041a0 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 80041a0:	6803      	ldr	r3, [r0, #0]
{
 80041a2:	0001      	movs	r1, r0
  hpcd->lpm_active = 1U;
 80041a4:	209a      	movs	r0, #154	; 0x9a
 80041a6:	2201      	movs	r2, #1
{
 80041a8:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 80041aa:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 80041ac:	2498      	movs	r4, #152	; 0x98
  hpcd->lpm_active = 1U;
 80041ae:	500a      	str	r2, [r1, r0]
  hpcd->LPM_State = LPM_L0;
 80041b0:	2000      	movs	r0, #0
 80041b2:	00a4      	lsls	r4, r4, #2
 80041b4:	5508      	strb	r0, [r1, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80041b6:	3354      	adds	r3, #84	; 0x54
 80041b8:	8819      	ldrh	r1, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	801a      	strh	r2, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80041be:	2202      	movs	r2, #2
 80041c0:	8819      	ldrh	r1, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 80041c6:	bd10      	pop	{r4, pc}

080041c8 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80041c8:	4770      	bx	lr

080041ca <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041ca:	2201      	movs	r2, #1
 80041cc:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ce:	2007      	movs	r0, #7
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041d0:	68d9      	ldr	r1, [r3, #12]
 80041d2:	4311      	orrs	r1, r2
 80041d4:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041d6:	6899      	ldr	r1, [r3, #8]
 80041d8:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041da:	2906      	cmp	r1, #6
 80041dc:	d002      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0x1a>
  {
    __HAL_TIM_ENABLE(htim);
 80041de:	6819      	ldr	r1, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80041e4:	2000      	movs	r0, #0
 80041e6:	4770      	bx	lr

080041e8 <HAL_TIM_OC_DelayElapsedCallback>:
 80041e8:	4770      	bx	lr

080041ea <HAL_TIM_IC_CaptureCallback>:
 80041ea:	4770      	bx	lr

080041ec <HAL_TIM_PWM_PulseFinishedCallback>:
 80041ec:	4770      	bx	lr

080041ee <HAL_TIM_TriggerCallback>:
 80041ee:	4770      	bx	lr

080041f0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041f0:	2202      	movs	r2, #2
 80041f2:	6803      	ldr	r3, [r0, #0]
{
 80041f4:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041f6:	6919      	ldr	r1, [r3, #16]
{
 80041f8:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041fa:	4211      	tst	r1, r2
 80041fc:	d00e      	beq.n	800421c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041fe:	68d9      	ldr	r1, [r3, #12]
 8004200:	4211      	tst	r1, r2
 8004202:	d00b      	beq.n	800421c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004204:	3a05      	subs	r2, #5
 8004206:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004208:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800420a:	3204      	adds	r2, #4
 800420c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800420e:	079b      	lsls	r3, r3, #30
 8004210:	d100      	bne.n	8004214 <HAL_TIM_IRQHandler+0x24>
 8004212:	e079      	b.n	8004308 <HAL_TIM_IRQHandler+0x118>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004214:	f7ff ffe9 	bl	80041ea <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004218:	2300      	movs	r3, #0
 800421a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800421c:	2204      	movs	r2, #4
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	6919      	ldr	r1, [r3, #16]
 8004222:	4211      	tst	r1, r2
 8004224:	d010      	beq.n	8004248 <HAL_TIM_IRQHandler+0x58>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004226:	68d9      	ldr	r1, [r3, #12]
 8004228:	4211      	tst	r1, r2
 800422a:	d00d      	beq.n	8004248 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800422c:	3a09      	subs	r2, #9
 800422e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004230:	3207      	adds	r2, #7
 8004232:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	23c0      	movs	r3, #192	; 0xc0
 8004238:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800423c:	421a      	tst	r2, r3
 800423e:	d069      	beq.n	8004314 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8004240:	f7ff ffd3 	bl	80041ea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004244:	2300      	movs	r3, #0
 8004246:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004248:	2208      	movs	r2, #8
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	6919      	ldr	r1, [r3, #16]
 800424e:	4211      	tst	r1, r2
 8004250:	d00e      	beq.n	8004270 <HAL_TIM_IRQHandler+0x80>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004252:	68d9      	ldr	r1, [r3, #12]
 8004254:	4211      	tst	r1, r2
 8004256:	d00b      	beq.n	8004270 <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004258:	3a11      	subs	r2, #17
 800425a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800425c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800425e:	320d      	adds	r2, #13
 8004260:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004262:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004264:	079b      	lsls	r3, r3, #30
 8004266:	d05b      	beq.n	8004320 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8004268:	f7ff ffbf 	bl	80041ea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426c:	2300      	movs	r3, #0
 800426e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004270:	2210      	movs	r2, #16
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	6919      	ldr	r1, [r3, #16]
 8004276:	4211      	tst	r1, r2
 8004278:	d010      	beq.n	800429c <HAL_TIM_IRQHandler+0xac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800427a:	68d9      	ldr	r1, [r3, #12]
 800427c:	4211      	tst	r1, r2
 800427e:	d00d      	beq.n	800429c <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004280:	3a21      	subs	r2, #33	; 0x21
 8004282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004284:	3219      	adds	r2, #25
 8004286:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004288:	69da      	ldr	r2, [r3, #28]
 800428a:	23c0      	movs	r3, #192	; 0xc0
 800428c:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004290:	421a      	tst	r2, r3
 8004292:	d04b      	beq.n	800432c <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8004294:	f7ff ffa9 	bl	80041ea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004298:	2300      	movs	r3, #0
 800429a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800429c:	2201      	movs	r2, #1
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	6919      	ldr	r1, [r3, #16]
 80042a2:	4211      	tst	r1, r2
 80042a4:	d007      	beq.n	80042b6 <HAL_TIM_IRQHandler+0xc6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042a6:	68d9      	ldr	r1, [r3, #12]
 80042a8:	4211      	tst	r1, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042ac:	3a03      	subs	r2, #3
 80042ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042b0:	0020      	movs	r0, r4
 80042b2:	f7fd fa1f 	bl	80016f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042b6:	2280      	movs	r2, #128	; 0x80
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	6919      	ldr	r1, [r3, #16]
 80042bc:	4211      	tst	r1, r2
 80042be:	d008      	beq.n	80042d2 <HAL_TIM_IRQHandler+0xe2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042c0:	68d9      	ldr	r1, [r3, #12]
 80042c2:	4211      	tst	r1, r2
 80042c4:	d005      	beq.n	80042d2 <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042c6:	3a02      	subs	r2, #2
 80042c8:	3aff      	subs	r2, #255	; 0xff
 80042ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042cc:	0020      	movs	r0, r4
 80042ce:	f000 f968 	bl	80045a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042d2:	2240      	movs	r2, #64	; 0x40
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	6919      	ldr	r1, [r3, #16]
 80042d8:	4211      	tst	r1, r2
 80042da:	d007      	beq.n	80042ec <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042dc:	68d9      	ldr	r1, [r3, #12]
 80042de:	4211      	tst	r1, r2
 80042e0:	d004      	beq.n	80042ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042e2:	3a81      	subs	r2, #129	; 0x81
 80042e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042e6:	0020      	movs	r0, r4
 80042e8:	f7ff ff81 	bl	80041ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042ec:	2220      	movs	r2, #32
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	6919      	ldr	r1, [r3, #16]
 80042f2:	4211      	tst	r1, r2
 80042f4:	d007      	beq.n	8004306 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042f6:	68d9      	ldr	r1, [r3, #12]
 80042f8:	4211      	tst	r1, r2
 80042fa:	d004      	beq.n	8004306 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042fc:	3a41      	subs	r2, #65	; 0x41
 80042fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004300:	0020      	movs	r0, r4
 8004302:	f000 f94d 	bl	80045a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004306:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004308:	f7ff ff6e 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430c:	0020      	movs	r0, r4
 800430e:	f7ff ff6d 	bl	80041ec <HAL_TIM_PWM_PulseFinishedCallback>
 8004312:	e781      	b.n	8004218 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004314:	f7ff ff68 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004318:	0020      	movs	r0, r4
 800431a:	f7ff ff67 	bl	80041ec <HAL_TIM_PWM_PulseFinishedCallback>
 800431e:	e791      	b.n	8004244 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004320:	f7ff ff62 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	0020      	movs	r0, r4
 8004326:	f7ff ff61 	bl	80041ec <HAL_TIM_PWM_PulseFinishedCallback>
 800432a:	e79f      	b.n	800426c <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432c:	f7ff ff5c 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	0020      	movs	r0, r4
 8004332:	f7ff ff5b 	bl	80041ec <HAL_TIM_PWM_PulseFinishedCallback>
 8004336:	e7af      	b.n	8004298 <HAL_TIM_IRQHandler+0xa8>

08004338 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004338:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <TIM_Base_SetConfig+0x78>)
{
 800433a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800433c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800433e:	4290      	cmp	r0, r2
 8004340:	d006      	beq.n	8004350 <TIM_Base_SetConfig+0x18>
 8004342:	2480      	movs	r4, #128	; 0x80
 8004344:	05e4      	lsls	r4, r4, #23
 8004346:	42a0      	cmp	r0, r4
 8004348:	d002      	beq.n	8004350 <TIM_Base_SetConfig+0x18>
 800434a:	4c1a      	ldr	r4, [pc, #104]	; (80043b4 <TIM_Base_SetConfig+0x7c>)
 800434c:	42a0      	cmp	r0, r4
 800434e:	d10c      	bne.n	800436a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004350:	2470      	movs	r4, #112	; 0x70
 8004352:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004354:	684c      	ldr	r4, [r1, #4]
 8004356:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004358:	4290      	cmp	r0, r2
 800435a:	d00f      	beq.n	800437c <TIM_Base_SetConfig+0x44>
 800435c:	2480      	movs	r4, #128	; 0x80
 800435e:	05e4      	lsls	r4, r4, #23
 8004360:	42a0      	cmp	r0, r4
 8004362:	d00b      	beq.n	800437c <TIM_Base_SetConfig+0x44>
 8004364:	4c13      	ldr	r4, [pc, #76]	; (80043b4 <TIM_Base_SetConfig+0x7c>)
 8004366:	42a0      	cmp	r0, r4
 8004368:	d008      	beq.n	800437c <TIM_Base_SetConfig+0x44>
 800436a:	4c13      	ldr	r4, [pc, #76]	; (80043b8 <TIM_Base_SetConfig+0x80>)
 800436c:	42a0      	cmp	r0, r4
 800436e:	d005      	beq.n	800437c <TIM_Base_SetConfig+0x44>
 8004370:	4c12      	ldr	r4, [pc, #72]	; (80043bc <TIM_Base_SetConfig+0x84>)
 8004372:	42a0      	cmp	r0, r4
 8004374:	d002      	beq.n	800437c <TIM_Base_SetConfig+0x44>
 8004376:	4c12      	ldr	r4, [pc, #72]	; (80043c0 <TIM_Base_SetConfig+0x88>)
 8004378:	42a0      	cmp	r0, r4
 800437a:	d103      	bne.n	8004384 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800437c:	4c11      	ldr	r4, [pc, #68]	; (80043c4 <TIM_Base_SetConfig+0x8c>)
 800437e:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004380:	68cc      	ldr	r4, [r1, #12]
 8004382:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004384:	2480      	movs	r4, #128	; 0x80
 8004386:	43a3      	bics	r3, r4
 8004388:	694c      	ldr	r4, [r1, #20]
 800438a:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 800438c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800438e:	688b      	ldr	r3, [r1, #8]
 8004390:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004392:	680b      	ldr	r3, [r1, #0]
 8004394:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004396:	4290      	cmp	r0, r2
 8004398:	d005      	beq.n	80043a6 <TIM_Base_SetConfig+0x6e>
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <TIM_Base_SetConfig+0x84>)
 800439c:	4298      	cmp	r0, r3
 800439e:	d002      	beq.n	80043a6 <TIM_Base_SetConfig+0x6e>
 80043a0:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <TIM_Base_SetConfig+0x88>)
 80043a2:	4298      	cmp	r0, r3
 80043a4:	d101      	bne.n	80043aa <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a6:	690b      	ldr	r3, [r1, #16]
 80043a8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043aa:	2301      	movs	r3, #1
 80043ac:	6143      	str	r3, [r0, #20]
}
 80043ae:	bd10      	pop	{r4, pc}
 80043b0:	40012c00 	.word	0x40012c00
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40002000 	.word	0x40002000
 80043bc:	40014400 	.word	0x40014400
 80043c0:	40014800 	.word	0x40014800
 80043c4:	fffffcff 	.word	0xfffffcff

080043c8 <HAL_TIM_Base_Init>:
{
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	0004      	movs	r4, r0
    return HAL_ERROR;
 80043cc:	2001      	movs	r0, #1
  if (htim == NULL)
 80043ce:	2c00      	cmp	r4, #0
 80043d0:	d014      	beq.n	80043fc <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 80043d2:	0025      	movs	r5, r4
 80043d4:	353d      	adds	r5, #61	; 0x3d
 80043d6:	782b      	ldrb	r3, [r5, #0]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d105      	bne.n	80043ea <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80043de:	0022      	movs	r2, r4
 80043e0:	323c      	adds	r2, #60	; 0x3c
 80043e2:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80043e4:	0020      	movs	r0, r4
 80043e6:	f7fd ff11 	bl	800220c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80043ea:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ec:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80043ee:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f0:	1d21      	adds	r1, r4, #4
 80043f2:	f7ff ffa1 	bl	8004338 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80043f6:	2301      	movs	r3, #1
  return HAL_OK;
 80043f8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80043fa:	702b      	strb	r3, [r5, #0]
}
 80043fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004400:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004402:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004404:	4d03      	ldr	r5, [pc, #12]	; (8004414 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004406:	430a      	orrs	r2, r1
 8004408:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800440a:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800440c:	4313      	orrs	r3, r2
 800440e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004410:	6083      	str	r3, [r0, #8]
}
 8004412:	bd30      	pop	{r4, r5, pc}
 8004414:	ffff00ff 	.word	0xffff00ff

08004418 <HAL_TIM_ConfigClockSource>:
{
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800441a:	0005      	movs	r5, r0
 800441c:	2302      	movs	r3, #2
 800441e:	353c      	adds	r5, #60	; 0x3c
 8004420:	782a      	ldrb	r2, [r5, #0]
{
 8004422:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8004424:	0018      	movs	r0, r3
 8004426:	2a01      	cmp	r2, #1
 8004428:	d016      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 800442a:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 800442c:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 800442e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8004432:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004436:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004438:	4a40      	ldr	r2, [pc, #256]	; (800453c <HAL_TIM_ConfigClockSource+0x124>)
 800443a:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800443c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800443e:	680b      	ldr	r3, [r1, #0]
 8004440:	2b40      	cmp	r3, #64	; 0x40
 8004442:	d065      	beq.n	8004510 <HAL_TIM_ConfigClockSource+0xf8>
 8004444:	d814      	bhi.n	8004470 <HAL_TIM_ConfigClockSource+0x58>
 8004446:	2b10      	cmp	r3, #16
 8004448:	d00b      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x4a>
 800444a:	d806      	bhi.n	800445a <HAL_TIM_ConfigClockSource+0x42>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8004450:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004452:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004454:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8004456:	7028      	strb	r0, [r5, #0]
}
 8004458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800445a:	2b20      	cmp	r3, #32
 800445c:	d001      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x4a>
 800445e:	2b30      	cmp	r3, #48	; 0x30
 8004460:	d1f6      	bne.n	8004450 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8004462:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004464:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004466:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004468:	3a69      	subs	r2, #105	; 0x69
 800446a:	4313      	orrs	r3, r2
 800446c:	430b      	orrs	r3, r1
 800446e:	e01a      	b.n	80044a6 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8004470:	2b60      	cmp	r3, #96	; 0x60
 8004472:	d035      	beq.n	80044e0 <HAL_TIM_ConfigClockSource+0xc8>
 8004474:	d819      	bhi.n	80044aa <HAL_TIM_ConfigClockSource+0x92>
 8004476:	2b50      	cmp	r3, #80	; 0x50
 8004478:	d1ea      	bne.n	8004450 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800447a:	684a      	ldr	r2, [r1, #4]
 800447c:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800447e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004480:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004482:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004484:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004486:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004488:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800448a:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800448c:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800448e:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004490:	240a      	movs	r4, #10
 8004492:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004494:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004496:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004498:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800449a:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800449c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800449e:	4393      	bics	r3, r2
 80044a0:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044a2:	2357      	movs	r3, #87	; 0x57
 80044a4:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80044a6:	6083      	str	r3, [r0, #8]
 80044a8:	e7d2      	b.n	8004450 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80044aa:	2b70      	cmp	r3, #112	; 0x70
 80044ac:	d00d      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0xb2>
 80044ae:	2280      	movs	r2, #128	; 0x80
 80044b0:	0192      	lsls	r2, r2, #6
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d1cc      	bne.n	8004450 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80044b6:	68cb      	ldr	r3, [r1, #12]
 80044b8:	684a      	ldr	r2, [r1, #4]
 80044ba:	6889      	ldr	r1, [r1, #8]
 80044bc:	f7ff ffa0 	bl	8004400 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	6822      	ldr	r2, [r4, #0]
 80044c4:	01db      	lsls	r3, r3, #7
 80044c6:	6891      	ldr	r1, [r2, #8]
 80044c8:	e007      	b.n	80044da <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 80044ca:	68cb      	ldr	r3, [r1, #12]
 80044cc:	684a      	ldr	r2, [r1, #4]
 80044ce:	6889      	ldr	r1, [r1, #8]
 80044d0:	f7ff ff96 	bl	8004400 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d4:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044da:	430b      	orrs	r3, r1
 80044dc:	6093      	str	r3, [r2, #8]
      break;
 80044de:	e7b7      	b.n	8004450 <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e0:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044e2:	684b      	ldr	r3, [r1, #4]
 80044e4:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e6:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e8:	4f15      	ldr	r7, [pc, #84]	; (8004540 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ea:	43a1      	bics	r1, r4
 80044ec:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ee:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044f0:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044f2:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044f4:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f6:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80044f8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80044fa:	6182      	str	r2, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80044fc:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044fe:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8004504:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004506:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004508:	4393      	bics	r3, r2
 800450a:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800450c:	2367      	movs	r3, #103	; 0x67
 800450e:	e7c9      	b.n	80044a4 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004510:	684a      	ldr	r2, [r1, #4]
 8004512:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8004514:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004516:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004518:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451a:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800451c:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004520:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004522:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004524:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004526:	240a      	movs	r4, #10
 8004528:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800452a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800452c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800452e:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004530:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004532:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004534:	4393      	bics	r3, r2
 8004536:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004538:	2347      	movs	r3, #71	; 0x47
 800453a:	e7b3      	b.n	80044a4 <HAL_TIM_ConfigClockSource+0x8c>
 800453c:	ffff0088 	.word	0xffff0088
 8004540:	ffff0fff 	.word	0xffff0fff

08004544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004544:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004546:	0004      	movs	r4, r0
 8004548:	2202      	movs	r2, #2
 800454a:	343c      	adds	r4, #60	; 0x3c
 800454c:	7825      	ldrb	r5, [r4, #0]
{
 800454e:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004550:	0010      	movs	r0, r2
 8004552:	2d01      	cmp	r5, #1
 8004554:	d01f      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0x52>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004558:	2670      	movs	r6, #112	; 0x70
  tmpcr2 = htim->Instance->CR2;
 800455a:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(htim);
 800455c:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800455e:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8004560:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004562:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004564:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004566:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004568:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800456a:	680e      	ldr	r6, [r1, #0]
 800456c:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800456e:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004570:	4809      	ldr	r0, [pc, #36]	; (8004598 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004572:	4283      	cmp	r3, r0
 8004574:	d006      	beq.n	8004584 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004576:	2080      	movs	r0, #128	; 0x80
 8004578:	05c0      	lsls	r0, r0, #23
 800457a:	4283      	cmp	r3, r0
 800457c:	d002      	beq.n	8004584 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800457e:	4807      	ldr	r0, [pc, #28]	; (800459c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004580:	4283      	cmp	r3, r0
 8004582:	d104      	bne.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004584:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004586:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004588:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800458a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800458c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800458e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004590:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004592:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004594:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	40012c00 	.word	0x40012c00
 800459c:	40000400 	.word	0x40000400

080045a0 <HAL_TIMEx_CommutCallback>:
 80045a0:	4770      	bx	lr

080045a2 <HAL_TIMEx_BreakCallback>:
 80045a2:	4770      	bx	lr

080045a4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80045a4:	b510      	push	{r4, lr}
 80045a6:	0002      	movs	r2, r0
 80045a8:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80045aa:	7900      	ldrb	r0, [r0, #4]
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d03b      	beq.n	8004628 <LL_EXTI_Init+0x84>
  ErrorStatus status = SUCCESS;
 80045b0:	2000      	movs	r0, #0
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80045b2:	4283      	cmp	r3, r0
 80045b4:	d01f      	beq.n	80045f6 <LL_EXTI_Init+0x52>
    {
      switch (EXTI_InitStruct->Mode)
 80045b6:	7951      	ldrb	r1, [r2, #5]
 80045b8:	2901      	cmp	r1, #1
 80045ba:	d01d      	beq.n	80045f8 <LL_EXTI_Init+0x54>
 80045bc:	4281      	cmp	r1, r0
 80045be:	d003      	beq.n	80045c8 <LL_EXTI_Init+0x24>
 80045c0:	2902      	cmp	r1, #2
 80045c2:	d021      	beq.n	8004608 <LL_EXTI_Init+0x64>
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
          break;
        default:
          status = ERROR;
 80045c4:	2001      	movs	r0, #1
 80045c6:	e006      	b.n	80045d6 <LL_EXTI_Init+0x32>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80045c8:	491d      	ldr	r1, [pc, #116]	; (8004640 <LL_EXTI_Init+0x9c>)
 80045ca:	684c      	ldr	r4, [r1, #4]
 80045cc:	439c      	bics	r4, r3
 80045ce:	604c      	str	r4, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80045d0:	680c      	ldr	r4, [r1, #0]
 80045d2:	431c      	orrs	r4, r3
 80045d4:	600c      	str	r4, [r1, #0]
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80045d6:	7992      	ldrb	r2, [r2, #6]
 80045d8:	2a00      	cmp	r2, #0
 80045da:	d00c      	beq.n	80045f6 <LL_EXTI_Init+0x52>
      {
        switch (EXTI_InitStruct->Trigger)
 80045dc:	2a02      	cmp	r2, #2
 80045de:	d017      	beq.n	8004610 <LL_EXTI_Init+0x6c>
 80045e0:	2a03      	cmp	r2, #3
 80045e2:	d01d      	beq.n	8004620 <LL_EXTI_Init+0x7c>
 80045e4:	2a01      	cmp	r2, #1
 80045e6:	d128      	bne.n	800463a <LL_EXTI_Init+0x96>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80045e8:	4a15      	ldr	r2, [pc, #84]	; (8004640 <LL_EXTI_Init+0x9c>)
 80045ea:	68d1      	ldr	r1, [r2, #12]
 80045ec:	4399      	bics	r1, r3
 80045ee:	60d1      	str	r1, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80045f0:	6891      	ldr	r1, [r2, #8]
 80045f2:	430b      	orrs	r3, r1
 80045f4:	6093      	str	r3, [r2, #8]
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 80045f6:	bd10      	pop	{r4, pc}
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80045f8:	4911      	ldr	r1, [pc, #68]	; (8004640 <LL_EXTI_Init+0x9c>)
 80045fa:	680c      	ldr	r4, [r1, #0]
 80045fc:	439c      	bics	r4, r3
  SET_BIT(EXTI->IMR, ExtiLine);
 80045fe:	600c      	str	r4, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004600:	684c      	ldr	r4, [r1, #4]
 8004602:	431c      	orrs	r4, r3
 8004604:	604c      	str	r4, [r1, #4]
 8004606:	e7e6      	b.n	80045d6 <LL_EXTI_Init+0x32>
  SET_BIT(EXTI->IMR, ExtiLine);
 8004608:	490d      	ldr	r1, [pc, #52]	; (8004640 <LL_EXTI_Init+0x9c>)
 800460a:	680c      	ldr	r4, [r1, #0]
 800460c:	431c      	orrs	r4, r3
 800460e:	e7f6      	b.n	80045fe <LL_EXTI_Init+0x5a>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004610:	4a0b      	ldr	r2, [pc, #44]	; (8004640 <LL_EXTI_Init+0x9c>)
 8004612:	6891      	ldr	r1, [r2, #8]
 8004614:	4399      	bics	r1, r3
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004616:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004618:	68d1      	ldr	r1, [r2, #12]
 800461a:	430b      	orrs	r3, r1
 800461c:	60d3      	str	r3, [r2, #12]
 800461e:	e7ea      	b.n	80045f6 <LL_EXTI_Init+0x52>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004620:	4a07      	ldr	r2, [pc, #28]	; (8004640 <LL_EXTI_Init+0x9c>)
 8004622:	6891      	ldr	r1, [r2, #8]
 8004624:	4319      	orrs	r1, r3
 8004626:	e7f6      	b.n	8004616 <LL_EXTI_Init+0x72>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004628:	43db      	mvns	r3, r3
 800462a:	4a05      	ldr	r2, [pc, #20]	; (8004640 <LL_EXTI_Init+0x9c>)
 800462c:	6811      	ldr	r1, [r2, #0]
 800462e:	4019      	ands	r1, r3
 8004630:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004632:	6851      	ldr	r1, [r2, #4]
 8004634:	400b      	ands	r3, r1
 8004636:	6053      	str	r3, [r2, #4]
 8004638:	e7dd      	b.n	80045f6 <LL_EXTI_Init+0x52>
            status = ERROR;
 800463a:	2001      	movs	r0, #1
 800463c:	e7db      	b.n	80045f6 <LL_EXTI_Init+0x52>
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	40010400 	.word	0x40010400

08004644 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004644:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8004646:	2700      	movs	r7, #0
 8004648:	684b      	ldr	r3, [r1, #4]
{
 800464a:	b085      	sub	sp, #20
 800464c:	9301      	str	r3, [sp, #4]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800464e:	680e      	ldr	r6, [r1, #0]
 8004650:	3b01      	subs	r3, #1
 8004652:	9302      	str	r3, [sp, #8]
 8004654:	0033      	movs	r3, r6
 8004656:	40fb      	lsrs	r3, r7
 8004658:	d10b      	bne.n	8004672 <LL_GPIO_Init+0x2e>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800465a:	9b02      	ldr	r3, [sp, #8]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d805      	bhi.n	800466c <LL_GPIO_Init+0x28>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004660:	6843      	ldr	r3, [r0, #4]
 8004662:	68ca      	ldr	r2, [r1, #12]
 8004664:	43b3      	bics	r3, r6
 8004666:	4356      	muls	r6, r2
 8004668:	431e      	orrs	r6, r3
 800466a:	6046      	str	r6, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 800466c:	2000      	movs	r0, #0
 800466e:	b005      	add	sp, #20
 8004670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004672:	2301      	movs	r3, #1
 8004674:	40bb      	lsls	r3, r7
 8004676:	4033      	ands	r3, r6
    if (currentpin != 0x00u)
 8004678:	d033      	beq.n	80046e2 <LL_GPIO_Init+0x9e>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 800467a:	001a      	movs	r2, r3
 800467c:	2503      	movs	r5, #3
 800467e:	435a      	muls	r2, r3
 8004680:	4355      	muls	r5, r2
 8004682:	43ed      	mvns	r5, r5
 8004684:	6804      	ldr	r4, [r0, #0]
 8004686:	9500      	str	r5, [sp, #0]
 8004688:	402c      	ands	r4, r5
 800468a:	9d01      	ldr	r5, [sp, #4]
 800468c:	4355      	muls	r5, r2
 800468e:	432c      	orrs	r4, r5
 8004690:	6004      	str	r4, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004692:	9c02      	ldr	r4, [sp, #8]
 8004694:	2c01      	cmp	r4, #1
 8004696:	d80a      	bhi.n	80046ae <LL_GPIO_Init+0x6a>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8004698:	6884      	ldr	r4, [r0, #8]
 800469a:	46a4      	mov	ip, r4
 800469c:	4665      	mov	r5, ip
 800469e:	688c      	ldr	r4, [r1, #8]
 80046a0:	4354      	muls	r4, r2
 80046a2:	9403      	str	r4, [sp, #12]
 80046a4:	9c00      	ldr	r4, [sp, #0]
 80046a6:	4025      	ands	r5, r4
 80046a8:	9c03      	ldr	r4, [sp, #12]
 80046aa:	432c      	orrs	r4, r5
 80046ac:	6084      	str	r4, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80046ae:	68c4      	ldr	r4, [r0, #12]
 80046b0:	46a4      	mov	ip, r4
 80046b2:	4665      	mov	r5, ip
 80046b4:	690c      	ldr	r4, [r1, #16]
 80046b6:	4354      	muls	r4, r2
 80046b8:	9403      	str	r4, [sp, #12]
 80046ba:	9c00      	ldr	r4, [sp, #0]
 80046bc:	402c      	ands	r4, r5
 80046be:	0025      	movs	r5, r4
 80046c0:	9c03      	ldr	r4, [sp, #12]
 80046c2:	4325      	orrs	r5, r4
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80046c4:	9c01      	ldr	r4, [sp, #4]
 80046c6:	60c5      	str	r5, [r0, #12]
 80046c8:	2c02      	cmp	r4, #2
 80046ca:	d10a      	bne.n	80046e2 <LL_GPIO_Init+0x9e>
 80046cc:	694c      	ldr	r4, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 80046ce:	2bff      	cmp	r3, #255	; 0xff
 80046d0:	d809      	bhi.n	80046e6 <LL_GPIO_Init+0xa2>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80046d2:	250f      	movs	r5, #15
 80046d4:	4352      	muls	r2, r2
 80046d6:	4355      	muls	r5, r2
 80046d8:	4362      	muls	r2, r4
 80046da:	6a03      	ldr	r3, [r0, #32]
 80046dc:	43ab      	bics	r3, r5
 80046de:	4313      	orrs	r3, r2
 80046e0:	6203      	str	r3, [r0, #32]
    pinpos++;
 80046e2:	3701      	adds	r7, #1
 80046e4:	e7b6      	b.n	8004654 <LL_GPIO_Init+0x10>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80046e6:	220f      	movs	r2, #15
 80046e8:	0a1b      	lsrs	r3, r3, #8
 80046ea:	435b      	muls	r3, r3
 80046ec:	435b      	muls	r3, r3
 80046ee:	435a      	muls	r2, r3
 80046f0:	4363      	muls	r3, r4
 80046f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80046f4:	4395      	bics	r5, r2
 80046f6:	431d      	orrs	r5, r3
 80046f8:	6245      	str	r5, [r0, #36]	; 0x24
 80046fa:	e7f2      	b.n	80046e2 <LL_GPIO_Init+0x9e>

080046fc <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80046fc:	3002      	adds	r0, #2
 80046fe:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004700:	4a02      	ldr	r2, [pc, #8]	; (800470c <USB_EnableGlobalInt+0x10>)
 8004702:	4313      	orrs	r3, r2
 8004704:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 8004706:	2000      	movs	r0, #0
 8004708:	4770      	bx	lr
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	0000bf80 	.word	0x0000bf80

08004710 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004710:	3002      	adds	r0, #2
 8004712:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004714:	4a02      	ldr	r2, [pc, #8]	; (8004720 <USB_DisableGlobalInt+0x10>)
 8004716:	4013      	ands	r3, r2
 8004718:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 800471a:	2000      	movs	r0, #0
 800471c:	4770      	bx	lr
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	0000407f 	.word	0x0000407f

08004724 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004724:	b084      	sub	sp, #16
 8004726:	9303      	str	r3, [sp, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004728:	2301      	movs	r3, #1
{
 800472a:	9202      	str	r2, [sp, #8]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800472c:	2200      	movs	r2, #0
{
 800472e:	9101      	str	r1, [sp, #4]
  USBx->CNTR = USB_CNTR_FRES;
 8004730:	1c81      	adds	r1, r0, #2
 8004732:	87cb      	strh	r3, [r1, #62]	; 0x3e

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004734:	1d83      	adds	r3, r0, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004736:	3050      	adds	r0, #80	; 0x50
  USBx->CNTR = 0;
 8004738:	87ca      	strh	r2, [r1, #62]	; 0x3e
  USBx->ISTR = 0;
 800473a:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 800473c:	8002      	strh	r2, [r0, #0]
  USBx->CNTR |= winterruptmask;
 800473e:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8004740:	4802      	ldr	r0, [pc, #8]	; (800474c <USB_DevInit+0x28>)
 8004742:	4303      	orrs	r3, r0
 8004744:	87cb      	strh	r3, [r1, #62]	; 0x3e

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8004746:	0010      	movs	r0, r2
 8004748:	b004      	add	sp, #16
 800474a:	4770      	bx	lr
 800474c:	0000bf80 	.word	0x0000bf80

08004750 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004752:	780d      	ldrb	r5, [r1, #0]
 8004754:	4a91      	ldr	r2, [pc, #580]	; (800499c <USB_ActivateEndpoint+0x24c>)
 8004756:	00ad      	lsls	r5, r5, #2
 8004758:	1945      	adds	r5, r0, r5
 800475a:	882c      	ldrh	r4, [r5, #0]
{
 800475c:	0003      	movs	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800475e:	4014      	ands	r4, r2
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8004760:	2201      	movs	r2, #1
  switch (ep->type)
 8004762:	78c8      	ldrb	r0, [r1, #3]
      ret = HAL_ERROR;
 8004764:	9200      	str	r2, [sp, #0]
  switch (ep->type)
 8004766:	2803      	cmp	r0, #3
 8004768:	d808      	bhi.n	800477c <USB_ActivateEndpoint+0x2c>
 800476a:	f7fb fcd5 	bl	8000118 <__gnu_thumb1_case_uqi>
 800476e:	4b02      	.short	0x4b02
 8004770:	4805      	.short	0x4805
      wEpRegVal |= USB_EP_CONTROL;
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	0092      	lsls	r2, r2, #2
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004776:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8004778:	2200      	movs	r2, #0
 800477a:	9200      	str	r2, [sp, #0]
 800477c:	001e      	movs	r6, r3
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800477e:	4a88      	ldr	r2, [pc, #544]	; (80049a0 <USB_ActivateEndpoint+0x250>)

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004780:	4f88      	ldr	r7, [pc, #544]	; (80049a4 <USB_ActivateEndpoint+0x254>)
  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004782:	4314      	orrs	r4, r2
 8004784:	b2a4      	uxth	r4, r4
 8004786:	802c      	strh	r4, [r5, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004788:	780d      	ldrb	r5, [r1, #0]
 800478a:	3650      	adds	r6, #80	; 0x50
 800478c:	00ac      	lsls	r4, r5, #2
 800478e:	191c      	adds	r4, r3, r4
 8004790:	8820      	ldrh	r0, [r4, #0]
 8004792:	4038      	ands	r0, r7
 8004794:	4328      	orrs	r0, r5
 8004796:	4310      	orrs	r0, r2
 8004798:	b280      	uxth	r0, r0
 800479a:	8020      	strh	r0, [r4, #0]

  if (ep->doublebuffer == 0U)
 800479c:	7b0d      	ldrb	r5, [r1, #12]
 800479e:	7808      	ldrb	r0, [r1, #0]
 80047a0:	003c      	movs	r4, r7
 80047a2:	2d00      	cmp	r5, #0
 80047a4:	d000      	beq.n	80047a8 <USB_ActivateEndpoint+0x58>
 80047a6:	e06f      	b.n	8004888 <USB_ActivateEndpoint+0x138>
 80047a8:	00c0      	lsls	r0, r0, #3
 80047aa:	18c0      	adds	r0, r0, r3
 80047ac:	88cd      	ldrh	r5, [r1, #6]
 80047ae:	9001      	str	r0, [sp, #4]
  {
    if (ep->is_in != 0U)
 80047b0:	7848      	ldrb	r0, [r1, #1]
 80047b2:	086d      	lsrs	r5, r5, #1
 80047b4:	006d      	lsls	r5, r5, #1
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d029      	beq.n	800480e <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047ba:	8834      	ldrh	r4, [r6, #0]
 80047bc:	9801      	ldr	r0, [sp, #4]
 80047be:	1820      	adds	r0, r4, r0
 80047c0:	2480      	movs	r4, #128	; 0x80
 80047c2:	00e4      	lsls	r4, r4, #3
 80047c4:	1900      	adds	r0, r0, r4
 80047c6:	8005      	strh	r5, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047c8:	7808      	ldrb	r0, [r1, #0]
 80047ca:	0080      	lsls	r0, r0, #2
 80047cc:	1818      	adds	r0, r3, r0
 80047ce:	8804      	ldrh	r4, [r0, #0]
 80047d0:	0664      	lsls	r4, r4, #25
 80047d2:	d504      	bpl.n	80047de <USB_ActivateEndpoint+0x8e>
 80047d4:	8804      	ldrh	r4, [r0, #0]
 80047d6:	4027      	ands	r7, r4
 80047d8:	4c73      	ldr	r4, [pc, #460]	; (80049a8 <USB_ActivateEndpoint+0x258>)
 80047da:	4327      	orrs	r7, r4
 80047dc:	8007      	strh	r7, [r0, #0]
 80047de:	7808      	ldrb	r0, [r1, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047e0:	78c9      	ldrb	r1, [r1, #3]
 80047e2:	0080      	lsls	r0, r0, #2
 80047e4:	181b      	adds	r3, r3, r0
 80047e6:	4871      	ldr	r0, [pc, #452]	; (80049ac <USB_ActivateEndpoint+0x25c>)
 80047e8:	2901      	cmp	r1, #1
 80047ea:	d00d      	beq.n	8004808 <USB_ActivateEndpoint+0xb8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047ec:	8819      	ldrh	r1, [r3, #0]
 80047ee:	4008      	ands	r0, r1
 80047f0:	2120      	movs	r1, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047f2:	4041      	eors	r1, r0
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047f4:	430a      	orrs	r2, r1
 80047f6:	b292      	uxth	r2, r2
    }
  }

  return ret;
}
 80047f8:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047fa:	801a      	strh	r2, [r3, #0]
}
 80047fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 80047fe:	22c0      	movs	r2, #192	; 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004800:	00d2      	lsls	r2, r2, #3
 8004802:	e7b8      	b.n	8004776 <USB_ActivateEndpoint+0x26>
 8004804:	2280      	movs	r2, #128	; 0x80
 8004806:	e7fb      	b.n	8004800 <USB_ActivateEndpoint+0xb0>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004808:	8819      	ldrh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800480a:	4001      	ands	r1, r0
 800480c:	e7f2      	b.n	80047f4 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800480e:	8837      	ldrh	r7, [r6, #0]
 8004810:	9801      	ldr	r0, [sp, #4]
 8004812:	1838      	adds	r0, r7, r0
 8004814:	4f66      	ldr	r7, [pc, #408]	; (80049b0 <USB_ActivateEndpoint+0x260>)
 8004816:	19c0      	adds	r0, r0, r7
 8004818:	8005      	strh	r5, [r0, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800481a:	7808      	ldrb	r0, [r1, #0]
 800481c:	8835      	ldrh	r5, [r6, #0]
 800481e:	00c0      	lsls	r0, r0, #3
 8004820:	4e64      	ldr	r6, [pc, #400]	; (80049b4 <USB_ActivateEndpoint+0x264>)
 8004822:	18c0      	adds	r0, r0, r3
 8004824:	1980      	adds	r0, r0, r6
 8004826:	1940      	adds	r0, r0, r5
 8004828:	690d      	ldr	r5, [r1, #16]
 800482a:	2d00      	cmp	r5, #0
 800482c:	d119      	bne.n	8004862 <USB_ActivateEndpoint+0x112>
 800482e:	8805      	ldrh	r5, [r0, #0]
 8004830:	4e61      	ldr	r6, [pc, #388]	; (80049b8 <USB_ActivateEndpoint+0x268>)
 8004832:	402e      	ands	r6, r5
 8004834:	4d61      	ldr	r5, [pc, #388]	; (80049bc <USB_ActivateEndpoint+0x26c>)
 8004836:	4335      	orrs	r5, r6
 8004838:	8005      	strh	r5, [r0, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800483a:	7808      	ldrb	r0, [r1, #0]
 800483c:	0080      	lsls	r0, r0, #2
 800483e:	1818      	adds	r0, r3, r0
 8004840:	8805      	ldrh	r5, [r0, #0]
 8004842:	046d      	lsls	r5, r5, #17
 8004844:	d504      	bpl.n	8004850 <USB_ActivateEndpoint+0x100>
 8004846:	8805      	ldrh	r5, [r0, #0]
 8004848:	402c      	ands	r4, r5
 800484a:	4d5d      	ldr	r5, [pc, #372]	; (80049c0 <USB_ActivateEndpoint+0x270>)
 800484c:	432c      	orrs	r4, r5
 800484e:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004850:	7809      	ldrb	r1, [r1, #0]
 8004852:	485c      	ldr	r0, [pc, #368]	; (80049c4 <USB_ActivateEndpoint+0x274>)
 8004854:	0089      	lsls	r1, r1, #2
 8004856:	185b      	adds	r3, r3, r1
 8004858:	8819      	ldrh	r1, [r3, #0]
 800485a:	4008      	ands	r0, r1
 800485c:	21c0      	movs	r1, #192	; 0xc0
 800485e:	0189      	lsls	r1, r1, #6
 8004860:	e7c7      	b.n	80047f2 <USB_ActivateEndpoint+0xa2>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004862:	2d3e      	cmp	r5, #62	; 0x3e
 8004864:	d806      	bhi.n	8004874 <USB_ActivateEndpoint+0x124>
 8004866:	2701      	movs	r7, #1
 8004868:	086e      	lsrs	r6, r5, #1
 800486a:	403d      	ands	r5, r7
 800486c:	1976      	adds	r6, r6, r5
 800486e:	02b6      	lsls	r6, r6, #10
 8004870:	8006      	strh	r6, [r0, #0]
 8004872:	e7e2      	b.n	800483a <USB_ActivateEndpoint+0xea>
 8004874:	271f      	movs	r7, #31
 8004876:	096e      	lsrs	r6, r5, #5
 8004878:	403d      	ands	r5, r7
 800487a:	426f      	negs	r7, r5
 800487c:	417d      	adcs	r5, r7
 800487e:	1b76      	subs	r6, r6, r5
 8004880:	4d4e      	ldr	r5, [pc, #312]	; (80049bc <USB_ActivateEndpoint+0x26c>)
 8004882:	02b6      	lsls	r6, r6, #10
 8004884:	432e      	orrs	r6, r5
 8004886:	e7f3      	b.n	8004870 <USB_ActivateEndpoint+0x120>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004888:	0080      	lsls	r0, r0, #2
 800488a:	1818      	adds	r0, r3, r0
 800488c:	8805      	ldrh	r5, [r0, #0]
 800488e:	403d      	ands	r5, r7
 8004890:	4f4d      	ldr	r7, [pc, #308]	; (80049c8 <USB_ActivateEndpoint+0x278>)
 8004892:	433d      	orrs	r5, r7
 8004894:	8005      	strh	r5, [r0, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004896:	7808      	ldrb	r0, [r1, #0]
 8004898:	8835      	ldrh	r5, [r6, #0]
 800489a:	00c0      	lsls	r0, r0, #3
 800489c:	1940      	adds	r0, r0, r5
 800489e:	2580      	movs	r5, #128	; 0x80
 80048a0:	18c0      	adds	r0, r0, r3
 80048a2:	00ed      	lsls	r5, r5, #3
 80048a4:	1940      	adds	r0, r0, r5
 80048a6:	890d      	ldrh	r5, [r1, #8]
 80048a8:	086d      	lsrs	r5, r5, #1
 80048aa:	006d      	lsls	r5, r5, #1
 80048ac:	8005      	strh	r5, [r0, #0]
 80048ae:	8835      	ldrh	r5, [r6, #0]
 80048b0:	4e3e      	ldr	r6, [pc, #248]	; (80049ac <USB_ActivateEndpoint+0x25c>)
 80048b2:	7808      	ldrb	r0, [r1, #0]
 80048b4:	46b4      	mov	ip, r6
 80048b6:	2680      	movs	r6, #128	; 0x80
 80048b8:	00c0      	lsls	r0, r0, #3
 80048ba:	1940      	adds	r0, r0, r5
 80048bc:	4d3c      	ldr	r5, [pc, #240]	; (80049b0 <USB_ActivateEndpoint+0x260>)
 80048be:	18c0      	adds	r0, r0, r3
 80048c0:	1940      	adds	r0, r0, r5
 80048c2:	894d      	ldrh	r5, [r1, #10]
 80048c4:	01f6      	lsls	r6, r6, #7
 80048c6:	086d      	lsrs	r5, r5, #1
 80048c8:	006d      	lsls	r5, r5, #1
 80048ca:	8005      	strh	r5, [r0, #0]
 80048cc:	7808      	ldrb	r0, [r1, #0]
    if (ep->is_in == 0U)
 80048ce:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048d0:	0080      	lsls	r0, r0, #2
 80048d2:	1818      	adds	r0, r3, r0
    if (ep->is_in == 0U)
 80048d4:	2d00      	cmp	r5, #0
 80048d6:	d12d      	bne.n	8004934 <USB_ActivateEndpoint+0x1e4>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048d8:	8805      	ldrh	r5, [r0, #0]
 80048da:	4235      	tst	r5, r6
 80048dc:	d004      	beq.n	80048e8 <USB_ActivateEndpoint+0x198>
 80048de:	8805      	ldrh	r5, [r0, #0]
 80048e0:	4e37      	ldr	r6, [pc, #220]	; (80049c0 <USB_ActivateEndpoint+0x270>)
 80048e2:	4025      	ands	r5, r4
 80048e4:	4335      	orrs	r5, r6
 80048e6:	8005      	strh	r5, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048e8:	7808      	ldrb	r0, [r1, #0]
 80048ea:	4e38      	ldr	r6, [pc, #224]	; (80049cc <USB_ActivateEndpoint+0x27c>)
 80048ec:	0080      	lsls	r0, r0, #2
 80048ee:	1818      	adds	r0, r3, r0
 80048f0:	8805      	ldrh	r5, [r0, #0]
 80048f2:	066d      	lsls	r5, r5, #25
 80048f4:	d504      	bpl.n	8004900 <USB_ActivateEndpoint+0x1b0>
 80048f6:	8805      	ldrh	r5, [r0, #0]
 80048f8:	4025      	ands	r5, r4
 80048fa:	4335      	orrs	r5, r6
 80048fc:	b2ad      	uxth	r5, r5
 80048fe:	8005      	strh	r5, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8004900:	7808      	ldrb	r0, [r1, #0]
 8004902:	0080      	lsls	r0, r0, #2
 8004904:	1818      	adds	r0, r3, r0
 8004906:	8805      	ldrh	r5, [r0, #0]
 8004908:	402c      	ands	r4, r5
 800490a:	4326      	orrs	r6, r4
 800490c:	b2b6      	uxth	r6, r6
 800490e:	8006      	strh	r6, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004910:	780c      	ldrb	r4, [r1, #0]
 8004912:	482c      	ldr	r0, [pc, #176]	; (80049c4 <USB_ActivateEndpoint+0x274>)
 8004914:	00a4      	lsls	r4, r4, #2
 8004916:	191c      	adds	r4, r3, r4
 8004918:	8825      	ldrh	r5, [r4, #0]
 800491a:	4005      	ands	r5, r0
 800491c:	20c0      	movs	r0, #192	; 0xc0
 800491e:	0180      	lsls	r0, r0, #6
 8004920:	4068      	eors	r0, r5
 8004922:	4310      	orrs	r0, r2
 8004924:	b280      	uxth	r0, r0
 8004926:	8020      	strh	r0, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004928:	7809      	ldrb	r1, [r1, #0]
 800492a:	4660      	mov	r0, ip
 800492c:	0089      	lsls	r1, r1, #2
 800492e:	185b      	adds	r3, r3, r1
 8004930:	8819      	ldrh	r1, [r3, #0]
 8004932:	e76a      	b.n	800480a <USB_ActivateEndpoint+0xba>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004934:	8807      	ldrh	r7, [r0, #0]
 8004936:	4d26      	ldr	r5, [pc, #152]	; (80049d0 <USB_ActivateEndpoint+0x280>)
 8004938:	4237      	tst	r7, r6
 800493a:	d004      	beq.n	8004946 <USB_ActivateEndpoint+0x1f6>
 800493c:	8806      	ldrh	r6, [r0, #0]
 800493e:	4026      	ands	r6, r4
 8004940:	432e      	orrs	r6, r5
 8004942:	b2b6      	uxth	r6, r6
 8004944:	8006      	strh	r6, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004946:	7808      	ldrb	r0, [r1, #0]
 8004948:	0080      	lsls	r0, r0, #2
 800494a:	1818      	adds	r0, r3, r0
 800494c:	8806      	ldrh	r6, [r0, #0]
 800494e:	0676      	lsls	r6, r6, #25
 8004950:	d504      	bpl.n	800495c <USB_ActivateEndpoint+0x20c>
 8004952:	8806      	ldrh	r6, [r0, #0]
 8004954:	4f14      	ldr	r7, [pc, #80]	; (80049a8 <USB_ActivateEndpoint+0x258>)
 8004956:	4026      	ands	r6, r4
 8004958:	433e      	orrs	r6, r7
 800495a:	8006      	strh	r6, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800495c:	7808      	ldrb	r0, [r1, #0]
 800495e:	0080      	lsls	r0, r0, #2
 8004960:	1818      	adds	r0, r3, r0
 8004962:	8806      	ldrh	r6, [r0, #0]
 8004964:	4034      	ands	r4, r6
 8004966:	4325      	orrs	r5, r4
 8004968:	b2ad      	uxth	r5, r5
 800496a:	8005      	strh	r5, [r0, #0]
 800496c:	7808      	ldrb	r0, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 800496e:	78cc      	ldrb	r4, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004970:	0080      	lsls	r0, r0, #2
 8004972:	1818      	adds	r0, r3, r0
      if (ep->type != EP_TYPE_ISOC)
 8004974:	2c01      	cmp	r4, #1
 8004976:	d00d      	beq.n	8004994 <USB_ActivateEndpoint+0x244>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004978:	4664      	mov	r4, ip
 800497a:	8805      	ldrh	r5, [r0, #0]
 800497c:	4025      	ands	r5, r4
 800497e:	2420      	movs	r4, #32
 8004980:	406c      	eors	r4, r5
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004982:	4314      	orrs	r4, r2
 8004984:	b2a4      	uxth	r4, r4
 8004986:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004988:	7809      	ldrb	r1, [r1, #0]
 800498a:	480e      	ldr	r0, [pc, #56]	; (80049c4 <USB_ActivateEndpoint+0x274>)
 800498c:	0089      	lsls	r1, r1, #2
 800498e:	185b      	adds	r3, r3, r1
 8004990:	8819      	ldrh	r1, [r3, #0]
 8004992:	e73a      	b.n	800480a <USB_ActivateEndpoint+0xba>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004994:	4665      	mov	r5, ip
 8004996:	8804      	ldrh	r4, [r0, #0]
 8004998:	402c      	ands	r4, r5
 800499a:	e7f2      	b.n	8004982 <USB_ActivateEndpoint+0x232>
 800499c:	ffff898f 	.word	0xffff898f
 80049a0:	ffff8080 	.word	0xffff8080
 80049a4:	ffff8f8f 	.word	0xffff8f8f
 80049a8:	000080c0 	.word	0x000080c0
 80049ac:	ffff8fbf 	.word	0xffff8fbf
 80049b0:	00000404 	.word	0x00000404
 80049b4:	00000406 	.word	0x00000406
 80049b8:	ffff83ff 	.word	0xffff83ff
 80049bc:	ffff8000 	.word	0xffff8000
 80049c0:	0000c080 	.word	0x0000c080
 80049c4:	ffffbf8f 	.word	0xffffbf8f
 80049c8:	00008180 	.word	0x00008180
 80049cc:	ffff80c0 	.word	0xffff80c0
 80049d0:	ffffc080 	.word	0xffffc080

080049d4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049d6:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 80049d8:	7b0d      	ldrb	r5, [r1, #12]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	784c      	ldrb	r4, [r1, #1]
 80049de:	18c3      	adds	r3, r0, r3
 80049e0:	4a3f      	ldr	r2, [pc, #252]	; (8004ae0 <USB_DeactivateEndpoint+0x10c>)
 80049e2:	2d00      	cmp	r5, #0
 80049e4:	d121      	bne.n	8004a2a <USB_DeactivateEndpoint+0x56>
  {
    if (ep->is_in != 0U)
 80049e6:	2c00      	cmp	r4, #0
 80049e8:	d010      	beq.n	8004a0c <USB_DeactivateEndpoint+0x38>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ea:	881c      	ldrh	r4, [r3, #0]
 80049ec:	0664      	lsls	r4, r4, #25
 80049ee:	d505      	bpl.n	80049fc <USB_DeactivateEndpoint+0x28>
 80049f0:	881c      	ldrh	r4, [r3, #0]
 80049f2:	4d3c      	ldr	r5, [pc, #240]	; (8004ae4 <USB_DeactivateEndpoint+0x110>)
 80049f4:	402c      	ands	r4, r5
 80049f6:	4d3c      	ldr	r5, [pc, #240]	; (8004ae8 <USB_DeactivateEndpoint+0x114>)
 80049f8:	432c      	orrs	r4, r5
 80049fa:	801c      	strh	r4, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049fc:	780b      	ldrb	r3, [r1, #0]
 80049fe:	493b      	ldr	r1, [pc, #236]	; (8004aec <USB_DeactivateEndpoint+0x118>)
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	18c0      	adds	r0, r0, r3
 8004a04:	8803      	ldrh	r3, [r0, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a06:	400b      	ands	r3, r1
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	e03f      	b.n	8004a8c <USB_DeactivateEndpoint+0xb8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a0c:	881c      	ldrh	r4, [r3, #0]
 8004a0e:	0464      	lsls	r4, r4, #17
 8004a10:	d505      	bpl.n	8004a1e <USB_DeactivateEndpoint+0x4a>
 8004a12:	881c      	ldrh	r4, [r3, #0]
 8004a14:	4d33      	ldr	r5, [pc, #204]	; (8004ae4 <USB_DeactivateEndpoint+0x110>)
 8004a16:	402c      	ands	r4, r5
 8004a18:	4d35      	ldr	r5, [pc, #212]	; (8004af0 <USB_DeactivateEndpoint+0x11c>)
 8004a1a:	432c      	orrs	r4, r5
 8004a1c:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a1e:	780b      	ldrb	r3, [r1, #0]
 8004a20:	4934      	ldr	r1, [pc, #208]	; (8004af4 <USB_DeactivateEndpoint+0x120>)
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	18c0      	adds	r0, r0, r3
 8004a26:	8803      	ldrh	r3, [r0, #0]
 8004a28:	e7ed      	b.n	8004a06 <USB_DeactivateEndpoint+0x32>
 8004a2a:	2680      	movs	r6, #128	; 0x80
 8004a2c:	4d2d      	ldr	r5, [pc, #180]	; (8004ae4 <USB_DeactivateEndpoint+0x110>)
 8004a2e:	4f2f      	ldr	r7, [pc, #188]	; (8004aec <USB_DeactivateEndpoint+0x118>)
 8004a30:	01f6      	lsls	r6, r6, #7
    if (ep->is_in == 0U)
 8004a32:	2c00      	cmp	r4, #0
 8004a34:	d12e      	bne.n	8004a94 <USB_DeactivateEndpoint+0xc0>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a36:	881c      	ldrh	r4, [r3, #0]
 8004a38:	4234      	tst	r4, r6
 8004a3a:	d004      	beq.n	8004a46 <USB_DeactivateEndpoint+0x72>
 8004a3c:	881c      	ldrh	r4, [r3, #0]
 8004a3e:	4e2c      	ldr	r6, [pc, #176]	; (8004af0 <USB_DeactivateEndpoint+0x11c>)
 8004a40:	402c      	ands	r4, r5
 8004a42:	4334      	orrs	r4, r6
 8004a44:	801c      	strh	r4, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a46:	780b      	ldrb	r3, [r1, #0]
 8004a48:	4c2b      	ldr	r4, [pc, #172]	; (8004af8 <USB_DeactivateEndpoint+0x124>)
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	18c3      	adds	r3, r0, r3
 8004a4e:	881e      	ldrh	r6, [r3, #0]
 8004a50:	0676      	lsls	r6, r6, #25
 8004a52:	d504      	bpl.n	8004a5e <USB_DeactivateEndpoint+0x8a>
 8004a54:	881e      	ldrh	r6, [r3, #0]
 8004a56:	402e      	ands	r6, r5
 8004a58:	4326      	orrs	r6, r4
 8004a5a:	b2b6      	uxth	r6, r6
 8004a5c:	801e      	strh	r6, [r3, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8004a5e:	780b      	ldrb	r3, [r1, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	18c3      	adds	r3, r0, r3
 8004a64:	881e      	ldrh	r6, [r3, #0]
 8004a66:	4035      	ands	r5, r6
 8004a68:	432c      	orrs	r4, r5
 8004a6a:	b2a4      	uxth	r4, r4
 8004a6c:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a6e:	780c      	ldrb	r4, [r1, #0]
 8004a70:	4d20      	ldr	r5, [pc, #128]	; (8004af4 <USB_DeactivateEndpoint+0x120>)
 8004a72:	00a4      	lsls	r4, r4, #2
 8004a74:	1904      	adds	r4, r0, r4
 8004a76:	8823      	ldrh	r3, [r4, #0]
 8004a78:	402b      	ands	r3, r5
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a80:	780b      	ldrb	r3, [r1, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	18c0      	adds	r0, r0, r3
 8004a86:	8803      	ldrh	r3, [r0, #0]
 8004a88:	401f      	ands	r7, r3
 8004a8a:	433a      	orrs	r2, r7
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a8c:	b292      	uxth	r2, r2
 8004a8e:	8002      	strh	r2, [r0, #0]
    }
  }

  return HAL_OK;
}
 8004a90:	2000      	movs	r0, #0
 8004a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a94:	881c      	ldrh	r4, [r3, #0]
 8004a96:	4234      	tst	r4, r6
 8004a98:	d005      	beq.n	8004aa6 <USB_DeactivateEndpoint+0xd2>
 8004a9a:	881e      	ldrh	r6, [r3, #0]
 8004a9c:	4c17      	ldr	r4, [pc, #92]	; (8004afc <USB_DeactivateEndpoint+0x128>)
 8004a9e:	402e      	ands	r6, r5
 8004aa0:	4326      	orrs	r6, r4
 8004aa2:	b2b6      	uxth	r6, r6
 8004aa4:	801e      	strh	r6, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aa6:	780b      	ldrb	r3, [r1, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	18c3      	adds	r3, r0, r3
 8004aac:	881e      	ldrh	r6, [r3, #0]
 8004aae:	0674      	lsls	r4, r6, #25
 8004ab0:	d504      	bpl.n	8004abc <USB_DeactivateEndpoint+0xe8>
 8004ab2:	881e      	ldrh	r6, [r3, #0]
 8004ab4:	4c0c      	ldr	r4, [pc, #48]	; (8004ae8 <USB_DeactivateEndpoint+0x114>)
 8004ab6:	402e      	ands	r6, r5
 8004ab8:	4326      	orrs	r6, r4
 8004aba:	801e      	strh	r6, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004abc:	780b      	ldrb	r3, [r1, #0]
 8004abe:	4c0f      	ldr	r4, [pc, #60]	; (8004afc <USB_DeactivateEndpoint+0x128>)
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	18c3      	adds	r3, r0, r3
 8004ac4:	881e      	ldrh	r6, [r3, #0]
 8004ac6:	4035      	ands	r5, r6
 8004ac8:	432c      	orrs	r4, r5
 8004aca:	b2a4      	uxth	r4, r4
 8004acc:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ace:	780b      	ldrb	r3, [r1, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	18c3      	adds	r3, r0, r3
 8004ad4:	881c      	ldrh	r4, [r3, #0]
 8004ad6:	4027      	ands	r7, r4
 8004ad8:	4317      	orrs	r7, r2
 8004ada:	b2bf      	uxth	r7, r7
 8004adc:	801f      	strh	r7, [r3, #0]
 8004ade:	e79e      	b.n	8004a1e <USB_DeactivateEndpoint+0x4a>
 8004ae0:	ffff8080 	.word	0xffff8080
 8004ae4:	ffff8f8f 	.word	0xffff8f8f
 8004ae8:	000080c0 	.word	0x000080c0
 8004aec:	ffff8fbf 	.word	0xffff8fbf
 8004af0:	0000c080 	.word	0x0000c080
 8004af4:	ffffbf8f 	.word	0xffffbf8f
 8004af8:	ffff80c0 	.word	0xffff80c0
 8004afc:	ffffc080 	.word	0xffffc080

08004b00 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b00:	780b      	ldrb	r3, [r1, #0]
 8004b02:	4a0b      	ldr	r2, [pc, #44]	; (8004b30 <USB_EPSetStall+0x30>)
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8004b08:	784b      	ldrb	r3, [r1, #1]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <USB_EPSetStall+0x22>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004b0e:	8803      	ldrh	r3, [r0, #0]
 8004b10:	4908      	ldr	r1, [pc, #32]	; (8004b34 <USB_EPSetStall+0x34>)
 8004b12:	4019      	ands	r1, r3
 8004b14:	2310      	movs	r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004b16:	404b      	eors	r3, r1
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8004b1e:	2000      	movs	r0, #0
 8004b20:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004b22:	8803      	ldrh	r3, [r0, #0]
 8004b24:	4904      	ldr	r1, [pc, #16]	; (8004b38 <USB_EPSetStall+0x38>)
 8004b26:	4019      	ands	r1, r3
 8004b28:	2380      	movs	r3, #128	; 0x80
 8004b2a:	015b      	lsls	r3, r3, #5
 8004b2c:	e7f3      	b.n	8004b16 <USB_EPSetStall+0x16>
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	ffff8080 	.word	0xffff8080
 8004b34:	ffff8fbf 	.word	0xffff8fbf
 8004b38:	ffffbf8f 	.word	0xffffbf8f

08004b3c <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004b3c:	7b0b      	ldrb	r3, [r1, #12]
{
 8004b3e:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d11c      	bne.n	8004b7e <USB_EPClearStall+0x42>
 8004b44:	780b      	ldrb	r3, [r1, #0]
  {
    if (ep->is_in != 0U)
 8004b46:	784a      	ldrb	r2, [r1, #1]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	18c3      	adds	r3, r0, r3
 8004b4c:	2a00      	cmp	r2, #0
 8004b4e:	d018      	beq.n	8004b82 <USB_EPClearStall+0x46>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b50:	881a      	ldrh	r2, [r3, #0]
 8004b52:	0652      	lsls	r2, r2, #25
 8004b54:	d505      	bpl.n	8004b62 <USB_EPClearStall+0x26>
 8004b56:	881a      	ldrh	r2, [r3, #0]
 8004b58:	4c13      	ldr	r4, [pc, #76]	; (8004ba8 <USB_EPClearStall+0x6c>)
 8004b5a:	4022      	ands	r2, r4
 8004b5c:	4c13      	ldr	r4, [pc, #76]	; (8004bac <USB_EPClearStall+0x70>)
 8004b5e:	4322      	orrs	r2, r4
 8004b60:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b62:	78cb      	ldrb	r3, [r1, #3]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d00a      	beq.n	8004b7e <USB_EPClearStall+0x42>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b68:	780b      	ldrb	r3, [r1, #0]
 8004b6a:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <USB_EPClearStall+0x74>)
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	18c0      	adds	r0, r0, r3
 8004b70:	8803      	ldrh	r3, [r0, #0]
 8004b72:	401a      	ands	r2, r3
 8004b74:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b76:	4053      	eors	r3, r2
 8004b78:	4a0e      	ldr	r2, [pc, #56]	; (8004bb4 <USB_EPClearStall+0x78>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8004b7e:	2000      	movs	r0, #0
 8004b80:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b82:	881a      	ldrh	r2, [r3, #0]
 8004b84:	0452      	lsls	r2, r2, #17
 8004b86:	d505      	bpl.n	8004b94 <USB_EPClearStall+0x58>
 8004b88:	881a      	ldrh	r2, [r3, #0]
 8004b8a:	4c07      	ldr	r4, [pc, #28]	; (8004ba8 <USB_EPClearStall+0x6c>)
 8004b8c:	4022      	ands	r2, r4
 8004b8e:	4c0a      	ldr	r4, [pc, #40]	; (8004bb8 <USB_EPClearStall+0x7c>)
 8004b90:	4322      	orrs	r2, r4
 8004b92:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b94:	780b      	ldrb	r3, [r1, #0]
 8004b96:	4a09      	ldr	r2, [pc, #36]	; (8004bbc <USB_EPClearStall+0x80>)
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	18c0      	adds	r0, r0, r3
 8004b9c:	8803      	ldrh	r3, [r0, #0]
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	23c0      	movs	r3, #192	; 0xc0
 8004ba2:	019b      	lsls	r3, r3, #6
 8004ba4:	e7e7      	b.n	8004b76 <USB_EPClearStall+0x3a>
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	ffff8f8f 	.word	0xffff8f8f
 8004bac:	000080c0 	.word	0x000080c0
 8004bb0:	ffff8fbf 	.word	0xffff8fbf
 8004bb4:	00008080 	.word	0x00008080
 8004bb8:	0000c080 	.word	0x0000c080
 8004bbc:	ffffbf8f 	.word	0xffffbf8f

08004bc0 <USB_StopDevice>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
  /* disable all interrupts and force USB reset */
  USBx->CNTR = USB_CNTR_FRES;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	1c82      	adds	r2, r0, #2
 8004bc4:	87d3      	strh	r3, [r2, #62]	; 0x3e

  /* clear interrupt status register */
  USBx->ISTR = 0;
 8004bc6:	1d83      	adds	r3, r0, #6
 8004bc8:	2000      	movs	r0, #0
 8004bca:	87d8      	strh	r0, [r3, #62]	; 0x3e

  /* switch-off device */
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 8004bcc:	2303      	movs	r3, #3
 8004bce:	87d3      	strh	r3, [r2, #62]	; 0x3e

  return HAL_OK;
}
 8004bd0:	4770      	bx	lr

08004bd2 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004bd2:	2900      	cmp	r1, #0
 8004bd4:	d102      	bne.n	8004bdc <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	304c      	adds	r0, #76	; 0x4c
 8004bda:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8004bdc:	2000      	movs	r0, #0
 8004bde:	4770      	bx	lr

08004be0 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8004be0:	2280      	movs	r2, #128	; 0x80
 8004be2:	3058      	adds	r0, #88	; 0x58
 8004be4:	8803      	ldrh	r3, [r0, #0]
 8004be6:	0212      	lsls	r2, r2, #8
 8004be8:	4313      	orrs	r3, r2
 8004bea:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8004bec:	2000      	movs	r0, #0
 8004bee:	4770      	bx	lr

08004bf0 <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8004bf0:	3058      	adds	r0, #88	; 0x58
 8004bf2:	8803      	ldrh	r3, [r0, #0]
 8004bf4:	045b      	lsls	r3, r3, #17
 8004bf6:	0c5b      	lsrs	r3, r3, #17
 8004bf8:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	4770      	bx	lr

08004bfe <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004bfe:	3006      	adds	r0, #6
 8004c00:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8004c02:	b280      	uxth	r0, r0
  return tmpreg;
}
 8004c04:	4770      	bx	lr

08004c06 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004c06:	2000      	movs	r0, #0
 8004c08:	4770      	bx	lr

08004c0a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c0a:	b530      	push	{r4, r5, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c0c:	2480      	movs	r4, #128	; 0x80
 8004c0e:	00e4      	lsls	r4, r4, #3
 8004c10:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004c12:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c14:	1880      	adds	r0, r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	1a40      	subs	r0, r0, r1
 8004c1a:	1844      	adds	r4, r0, r1

  for (i = n; i != 0U; i--)
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d100      	bne.n	8004c22 <USB_WritePMA+0x18>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8004c20:	bd30      	pop	{r4, r5, pc}
 8004c22:	784a      	ldrb	r2, [r1, #1]
 8004c24:	780d      	ldrb	r5, [r1, #0]
 8004c26:	0212      	lsls	r2, r2, #8
 8004c28:	432a      	orrs	r2, r5
    *pdwVal = (uint16_t)temp2;
 8004c2a:	8022      	strh	r2, [r4, #0]
  for (i = n; i != 0U; i--)
 8004c2c:	3b01      	subs	r3, #1
    pBuf++;
 8004c2e:	3102      	adds	r1, #2
 8004c30:	e7f3      	b.n	8004c1a <USB_WritePMA+0x10>
	...

08004c34 <USB_EPStartXfer>:
{
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8004c36:	784c      	ldrb	r4, [r1, #1]
{
 8004c38:	0005      	movs	r5, r0
 8004c3a:	000e      	movs	r6, r1
 8004c3c:	698a      	ldr	r2, [r1, #24]
 8004c3e:	690b      	ldr	r3, [r1, #16]
 8004c40:	7b08      	ldrb	r0, [r1, #12]
  if (ep->is_in == 1U)
 8004c42:	2c01      	cmp	r4, #1
 8004c44:	d158      	bne.n	8004cf8 <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d922      	bls.n	8004c90 <USB_EPStartXfer+0x5c>
      ep->xfer_len -= len;
 8004c4a:	1ad2      	subs	r2, r2, r3
 8004c4c:	618a      	str	r2, [r1, #24]
 8004c4e:	002f      	movs	r7, r5
 8004c50:	6971      	ldr	r1, [r6, #20]
 8004c52:	b29c      	uxth	r4, r3
 8004c54:	3750      	adds	r7, #80	; 0x50
    if (ep->doublebuffer == 0U)
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d11e      	bne.n	8004c98 <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c5a:	88f2      	ldrh	r2, [r6, #6]
 8004c5c:	0023      	movs	r3, r4
 8004c5e:	0028      	movs	r0, r5
 8004c60:	f7ff ffd3 	bl	8004c0a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c64:	7833      	ldrb	r3, [r6, #0]
 8004c66:	883a      	ldrh	r2, [r7, #0]
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	189b      	adds	r3, r3, r2
 8004c6c:	4a5b      	ldr	r2, [pc, #364]	; (8004ddc <USB_EPStartXfer+0x1a8>)
 8004c6e:	18eb      	adds	r3, r5, r3
 8004c70:	189b      	adds	r3, r3, r2
 8004c72:	801c      	strh	r4, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c74:	7833      	ldrb	r3, [r6, #0]
 8004c76:	4a5a      	ldr	r2, [pc, #360]	; (8004de0 <USB_EPStartXfer+0x1ac>)
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	18ed      	adds	r5, r5, r3
 8004c7c:	882b      	ldrh	r3, [r5, #0]
 8004c7e:	401a      	ands	r2, r3
 8004c80:	2330      	movs	r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c82:	4053      	eors	r3, r2
 8004c84:	4a57      	ldr	r2, [pc, #348]	; (8004de4 <USB_EPStartXfer+0x1b0>)
}
 8004c86:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	802b      	strh	r3, [r5, #0]
}
 8004c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ep->xfer_len = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	618b      	str	r3, [r1, #24]
 8004c94:	0013      	movs	r3, r2
 8004c96:	e7da      	b.n	8004c4e <USB_EPStartXfer+0x1a>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c98:	7833      	ldrb	r3, [r6, #0]
 8004c9a:	009a      	lsls	r2, r3, #2
 8004c9c:	18aa      	adds	r2, r5, r2
 8004c9e:	8810      	ldrh	r0, [r2, #0]
 8004ca0:	00da      	lsls	r2, r3, #3
 8004ca2:	0643      	lsls	r3, r0, #25
 8004ca4:	d517      	bpl.n	8004cd6 <USB_EPStartXfer+0xa2>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ca6:	883b      	ldrh	r3, [r7, #0]
 8004ca8:	189b      	adds	r3, r3, r2
 8004caa:	4a4f      	ldr	r2, [pc, #316]	; (8004de8 <USB_EPStartXfer+0x1b4>)
 8004cac:	195b      	adds	r3, r3, r5
 8004cae:	189b      	adds	r3, r3, r2
 8004cb0:	801c      	strh	r4, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004cb2:	8972      	ldrh	r2, [r6, #10]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cb4:	0023      	movs	r3, r4
 8004cb6:	0028      	movs	r0, r5
 8004cb8:	f7ff ffa7 	bl	8004c0a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004cbc:	7872      	ldrb	r2, [r6, #1]
 8004cbe:	7833      	ldrb	r3, [r6, #0]
 8004cc0:	2a00      	cmp	r2, #0
 8004cc2:	d110      	bne.n	8004ce6 <USB_EPStartXfer+0xb2>
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	18eb      	adds	r3, r5, r3
 8004cc8:	4948      	ldr	r1, [pc, #288]	; (8004dec <USB_EPStartXfer+0x1b8>)
 8004cca:	881a      	ldrh	r2, [r3, #0]
 8004ccc:	400a      	ands	r2, r1
 8004cce:	4948      	ldr	r1, [pc, #288]	; (8004df0 <USB_EPStartXfer+0x1bc>)
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	e7ce      	b.n	8004c74 <USB_EPStartXfer+0x40>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004cd6:	883b      	ldrh	r3, [r7, #0]
 8004cd8:	189b      	adds	r3, r3, r2
 8004cda:	4a40      	ldr	r2, [pc, #256]	; (8004ddc <USB_EPStartXfer+0x1a8>)
 8004cdc:	195b      	adds	r3, r3, r5
 8004cde:	189b      	adds	r3, r3, r2
 8004ce0:	801c      	strh	r4, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8004ce2:	8932      	ldrh	r2, [r6, #8]
 8004ce4:	e7e6      	b.n	8004cb4 <USB_EPStartXfer+0x80>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004ce6:	2a01      	cmp	r2, #1
 8004ce8:	d1c4      	bne.n	8004c74 <USB_EPStartXfer+0x40>
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	18eb      	adds	r3, r5, r3
 8004cee:	493f      	ldr	r1, [pc, #252]	; (8004dec <USB_EPStartXfer+0x1b8>)
 8004cf0:	881a      	ldrh	r2, [r3, #0]
 8004cf2:	400a      	ands	r2, r1
 8004cf4:	493f      	ldr	r1, [pc, #252]	; (8004df4 <USB_EPStartXfer+0x1c0>)
 8004cf6:	e7eb      	b.n	8004cd0 <USB_EPStartXfer+0x9c>
    if (ep->xfer_len > ep->maxpacket)
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d915      	bls.n	8004d28 <USB_EPStartXfer+0xf4>
      ep->xfer_len -= len;
 8004cfc:	1ad2      	subs	r2, r2, r3
 8004cfe:	618a      	str	r2, [r1, #24]
 8004d00:	7831      	ldrb	r1, [r6, #0]
    if (ep->doublebuffer == 0U)
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d114      	bne.n	8004d30 <USB_EPStartXfer+0xfc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004d06:	002a      	movs	r2, r5
 8004d08:	3250      	adds	r2, #80	; 0x50
 8004d0a:	8810      	ldrh	r0, [r2, #0]
 8004d0c:	4a36      	ldr	r2, [pc, #216]	; (8004de8 <USB_EPStartXfer+0x1b4>)
 8004d0e:	00c9      	lsls	r1, r1, #3
 8004d10:	18aa      	adds	r2, r5, r2
 8004d12:	1812      	adds	r2, r2, r0
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004d14:	188a      	adds	r2, r1, r2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d139      	bne.n	8004d8e <USB_EPStartXfer+0x15a>
 8004d1a:	8813      	ldrh	r3, [r2, #0]
 8004d1c:	4936      	ldr	r1, [pc, #216]	; (8004df8 <USB_EPStartXfer+0x1c4>)
 8004d1e:	4019      	ands	r1, r3
 8004d20:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <USB_EPStartXfer+0x1c8>)
 8004d22:	430b      	orrs	r3, r1
 8004d24:	8013      	strh	r3, [r2, #0]
 8004d26:	e03a      	b.n	8004d9e <USB_EPStartXfer+0x16a>
      ep->xfer_len = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	618b      	str	r3, [r1, #24]
 8004d2c:	0013      	movs	r3, r2
 8004d2e:	e7e7      	b.n	8004d00 <USB_EPStartXfer+0xcc>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004d30:	2c00      	cmp	r4, #0
 8004d32:	d117      	bne.n	8004d64 <USB_EPStartXfer+0x130>
 8004d34:	002a      	movs	r2, r5
 8004d36:	3250      	adds	r2, #80	; 0x50
 8004d38:	8810      	ldrh	r0, [r2, #0]
 8004d3a:	4a28      	ldr	r2, [pc, #160]	; (8004ddc <USB_EPStartXfer+0x1a8>)
 8004d3c:	00c9      	lsls	r1, r1, #3
 8004d3e:	18aa      	adds	r2, r5, r2
 8004d40:	1812      	adds	r2, r2, r0
 8004d42:	1852      	adds	r2, r2, r1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d105      	bne.n	8004d54 <USB_EPStartXfer+0x120>
 8004d48:	8811      	ldrh	r1, [r2, #0]
 8004d4a:	482b      	ldr	r0, [pc, #172]	; (8004df8 <USB_EPStartXfer+0x1c4>)
 8004d4c:	4008      	ands	r0, r1
 8004d4e:	492b      	ldr	r1, [pc, #172]	; (8004dfc <USB_EPStartXfer+0x1c8>)
 8004d50:	4301      	orrs	r1, r0
 8004d52:	e006      	b.n	8004d62 <USB_EPStartXfer+0x12e>
 8004d54:	2b3e      	cmp	r3, #62	; 0x3e
 8004d56:	d811      	bhi.n	8004d7c <USB_EPStartXfer+0x148>
 8004d58:	2001      	movs	r0, #1
 8004d5a:	0859      	lsrs	r1, r3, #1
 8004d5c:	4018      	ands	r0, r3
 8004d5e:	1809      	adds	r1, r1, r0
 8004d60:	0289      	lsls	r1, r1, #10
 8004d62:	8011      	strh	r1, [r2, #0]
 8004d64:	7871      	ldrb	r1, [r6, #1]
 8004d66:	7832      	ldrb	r2, [r6, #0]
 8004d68:	2900      	cmp	r1, #0
 8004d6a:	d12b      	bne.n	8004dc4 <USB_EPStartXfer+0x190>
 8004d6c:	0029      	movs	r1, r5
 8004d6e:	3150      	adds	r1, #80	; 0x50
 8004d70:	8808      	ldrh	r0, [r1, #0]
 8004d72:	491d      	ldr	r1, [pc, #116]	; (8004de8 <USB_EPStartXfer+0x1b4>)
 8004d74:	00d2      	lsls	r2, r2, #3
 8004d76:	1869      	adds	r1, r5, r1
 8004d78:	1809      	adds	r1, r1, r0
 8004d7a:	e7cb      	b.n	8004d14 <USB_EPStartXfer+0xe0>
 8004d7c:	201f      	movs	r0, #31
 8004d7e:	4018      	ands	r0, r3
 8004d80:	4244      	negs	r4, r0
 8004d82:	4160      	adcs	r0, r4
 8004d84:	0959      	lsrs	r1, r3, #5
 8004d86:	1a09      	subs	r1, r1, r0
 8004d88:	0289      	lsls	r1, r1, #10
 8004d8a:	481c      	ldr	r0, [pc, #112]	; (8004dfc <USB_EPStartXfer+0x1c8>)
 8004d8c:	e7e0      	b.n	8004d50 <USB_EPStartXfer+0x11c>
 8004d8e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d90:	d80e      	bhi.n	8004db0 <USB_EPStartXfer+0x17c>
 8004d92:	2401      	movs	r4, #1
 8004d94:	0859      	lsrs	r1, r3, #1
 8004d96:	401c      	ands	r4, r3
 8004d98:	1909      	adds	r1, r1, r4
 8004d9a:	0289      	lsls	r1, r1, #10
 8004d9c:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d9e:	7833      	ldrb	r3, [r6, #0]
 8004da0:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <USB_EPStartXfer+0x1cc>)
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	18ed      	adds	r5, r5, r3
 8004da6:	882b      	ldrh	r3, [r5, #0]
 8004da8:	401a      	ands	r2, r3
 8004daa:	23c0      	movs	r3, #192	; 0xc0
 8004dac:	019b      	lsls	r3, r3, #6
 8004dae:	e768      	b.n	8004c82 <USB_EPStartXfer+0x4e>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004db0:	241f      	movs	r4, #31
 8004db2:	401c      	ands	r4, r3
 8004db4:	0959      	lsrs	r1, r3, #5
 8004db6:	4263      	negs	r3, r4
 8004db8:	415c      	adcs	r4, r3
 8004dba:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <USB_EPStartXfer+0x1c8>)
 8004dbc:	1b09      	subs	r1, r1, r4
 8004dbe:	0289      	lsls	r1, r1, #10
 8004dc0:	4319      	orrs	r1, r3
 8004dc2:	e7eb      	b.n	8004d9c <USB_EPStartXfer+0x168>
 8004dc4:	2901      	cmp	r1, #1
 8004dc6:	d1ea      	bne.n	8004d9e <USB_EPStartXfer+0x16a>
 8004dc8:	0029      	movs	r1, r5
 8004dca:	3150      	adds	r1, #80	; 0x50
 8004dcc:	8809      	ldrh	r1, [r1, #0]
 8004dce:	00d2      	lsls	r2, r2, #3
 8004dd0:	1852      	adds	r2, r2, r1
 8004dd2:	4905      	ldr	r1, [pc, #20]	; (8004de8 <USB_EPStartXfer+0x1b4>)
 8004dd4:	18aa      	adds	r2, r5, r2
 8004dd6:	1852      	adds	r2, r2, r1
 8004dd8:	e7a4      	b.n	8004d24 <USB_EPStartXfer+0xf0>
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	00000402 	.word	0x00000402
 8004de0:	ffff8fbf 	.word	0xffff8fbf
 8004de4:	ffff8080 	.word	0xffff8080
 8004de8:	00000406 	.word	0x00000406
 8004dec:	ffff8f8f 	.word	0xffff8f8f
 8004df0:	000080c0 	.word	0x000080c0
 8004df4:	0000c080 	.word	0x0000c080
 8004df8:	ffff83ff 	.word	0xffff83ff
 8004dfc:	ffff8000 	.word	0xffff8000
 8004e00:	ffffbf8f 	.word	0xffffbf8f

08004e04 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e04:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e06:	2580      	movs	r5, #128	; 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004e08:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e0a:	00ed      	lsls	r5, r5, #3
 8004e0c:	1952      	adds	r2, r2, r5

  for (i = n; i != 0U; i--)
 8004e0e:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 8004e10:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e12:	1880      	adds	r0, r0, r2
 8004e14:	1a47      	subs	r7, r0, r1
 8004e16:	197a      	adds	r2, r7, r5
  for (i = n; i != 0U; i--)
 8004e18:	2e00      	cmp	r6, #0
 8004e1a:	d107      	bne.n	8004e2c <USB_ReadPMA+0x28>
 8004e1c:	0064      	lsls	r4, r4, #1
 8004e1e:	1900      	adds	r0, r0, r4
 8004e20:	1909      	adds	r1, r1, r4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004e22:	07db      	lsls	r3, r3, #31
 8004e24:	d501      	bpl.n	8004e2a <USB_ReadPMA+0x26>
  {
    temp = *pdwVal;
 8004e26:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004e28:	700b      	strb	r3, [r1, #0]
  }
}
 8004e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8004e2c:	8812      	ldrh	r2, [r2, #0]
  for (i = n; i != 0U; i--)
 8004e2e:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8004e30:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004e32:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004e34:	0a12      	lsrs	r2, r2, #8
 8004e36:	706a      	strb	r2, [r5, #1]
    pBuf++;
 8004e38:	3502      	adds	r5, #2
 8004e3a:	e7ec      	b.n	8004e16 <USB_ReadPMA+0x12>

08004e3c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004e3c:	4b01      	ldr	r3, [pc, #4]	; (8004e44 <LL_SetSystemCoreClock+0x8>)
 8004e3e:	6018      	str	r0, [r3, #0]
}
 8004e40:	4770      	bx	lr
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	2000000c 	.word	0x2000000c

08004e48 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e48:	23af      	movs	r3, #175	; 0xaf
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	58c3      	ldr	r3, [r0, r3]
{
 8004e4e:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00e      	beq.n	8004e72 <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e54:	22ae      	movs	r2, #174	; 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e56:	2580      	movs	r5, #128	; 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e58:	0092      	lsls	r2, r2, #2
 8004e5a:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e5c:	00ad      	lsls	r5, r5, #2
 8004e5e:	5d60      	ldrb	r0, [r4, r5]
 8004e60:	28ff      	cmp	r0, #255	; 0xff
 8004e62:	d006      	beq.n	8004e72 <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e64:	4a04      	ldr	r2, [pc, #16]	; (8004e78 <USBD_CDC_EP0_RxReady+0x30>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	5ca2      	ldrb	r2, [r4, r2]
 8004e6a:	0021      	movs	r1, r4
 8004e6c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8004e6e:	23ff      	movs	r3, #255	; 0xff
 8004e70:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 8004e72:	2000      	movs	r0, #0
 8004e74:	bd70      	pop	{r4, r5, r6, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	00000201 	.word	0x00000201

08004e7c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004e7c:	2343      	movs	r3, #67	; 0x43
 8004e7e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004e80:	4800      	ldr	r0, [pc, #0]	; (8004e84 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004e82:	4770      	bx	lr
 8004e84:	20000050 	.word	0x20000050

08004e88 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004e88:	2343      	movs	r3, #67	; 0x43
 8004e8a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004e8c:	4800      	ldr	r0, [pc, #0]	; (8004e90 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004e8e:	4770      	bx	lr
 8004e90:	20000094 	.word	0x20000094

08004e94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004e94:	2343      	movs	r3, #67	; 0x43
 8004e96:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004e98:	4800      	ldr	r0, [pc, #0]	; (8004e9c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004e9a:	4770      	bx	lr
 8004e9c:	200000e4 	.word	0x200000e4

08004ea0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ea0:	230a      	movs	r3, #10
 8004ea2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004ea4:	4800      	ldr	r0, [pc, #0]	; (8004ea8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004ea6:	4770      	bx	lr
 8004ea8:	200000d8 	.word	0x200000d8

08004eac <USBD_CDC_DataOut>:
{
 8004eac:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004eae:	26ae      	movs	r6, #174	; 0xae
 8004eb0:	00b6      	lsls	r6, r6, #2
{
 8004eb2:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004eb4:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004eb6:	f001 f8f7 	bl	80060a8 <USBD_LL_GetRxDataSize>
 8004eba:	2383      	movs	r3, #131	; 0x83
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 8004ec0:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 8004ec2:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004ec8:	2383      	movs	r3, #131	; 0x83
 8004eca:	2281      	movs	r2, #129	; 0x81
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	18e9      	adds	r1, r5, r3
 8004ed0:	33b0      	adds	r3, #176	; 0xb0
 8004ed2:	58e3      	ldr	r3, [r4, r3]
 8004ed4:	0092      	lsls	r2, r2, #2
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	58a8      	ldr	r0, [r5, r2]
 8004eda:	4798      	blx	r3
    return USBD_OK;
 8004edc:	2000      	movs	r0, #0
}
 8004ede:	bd70      	pop	{r4, r5, r6, pc}

08004ee0 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ee0:	23ae      	movs	r3, #174	; 0xae
{
 8004ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	58c3      	ldr	r3, [r0, r3]
{
 8004ee8:	0006      	movs	r6, r0
 8004eea:	000f      	movs	r7, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004eec:	9301      	str	r3, [sp, #4]
    return USBD_FAIL;
 8004eee:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d017      	beq.n	8004f24 <USBD_CDC_DataIn+0x44>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004ef4:	2514      	movs	r5, #20
 8004ef6:	434d      	muls	r5, r1
 8004ef8:	1975      	adds	r5, r6, r5
 8004efa:	69e8      	ldr	r0, [r5, #28]
 8004efc:	2800      	cmp	r0, #0
 8004efe:	d012      	beq.n	8004f26 <USBD_CDC_DataIn+0x46>
 8004f00:	23b0      	movs	r3, #176	; 0xb0
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	58f3      	ldr	r3, [r6, r3]
 8004f06:	014a      	lsls	r2, r1, #5
 8004f08:	189b      	adds	r3, r3, r2
 8004f0a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004f0c:	f7fb f99e 	bl	800024c <__aeabi_uidivmod>
 8004f10:	1e0c      	subs	r4, r1, #0
 8004f12:	d108      	bne.n	8004f26 <USBD_CDC_DataIn+0x46>
      pdev->ep_in[epnum].total_length = 0U;
 8004f14:	61e9      	str	r1, [r5, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004f16:	000b      	movs	r3, r1
 8004f18:	000a      	movs	r2, r1
 8004f1a:	0030      	movs	r0, r6
 8004f1c:	0039      	movs	r1, r7
 8004f1e:	f001 f8a3 	bl	8006068 <USBD_LL_Transmit>
    return USBD_OK;
 8004f22:	0020      	movs	r0, r4
}
 8004f24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8004f26:	2385      	movs	r3, #133	; 0x85
 8004f28:	2000      	movs	r0, #0
 8004f2a:	9a01      	ldr	r2, [sp, #4]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	50d0      	str	r0, [r2, r3]
 8004f30:	e7f8      	b.n	8004f24 <USBD_CDC_DataIn+0x44>
	...

08004f34 <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f34:	23ae      	movs	r3, #174	; 0xae
{
 8004f36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	58c7      	ldr	r7, [r0, r3]
  uint8_t ifalt = 0U;
 8004f3c:	466b      	mov	r3, sp
  uint16_t status_info = 0U;
 8004f3e:	466a      	mov	r2, sp
{
 8004f40:	000e      	movs	r6, r1
  uint8_t ifalt = 0U;
 8004f42:	1d59      	adds	r1, r3, #5
 8004f44:	2300      	movs	r3, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f46:	2460      	movs	r4, #96	; 0x60
{
 8004f48:	0005      	movs	r5, r0
  uint16_t status_info = 0U;
 8004f4a:	1d90      	adds	r0, r2, #6
  uint8_t ifalt = 0U;
 8004f4c:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 8004f4e:	8003      	strh	r3, [r0, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f50:	7833      	ldrb	r3, [r6, #0]
 8004f52:	401c      	ands	r4, r3
 8004f54:	d029      	beq.n	8004faa <USBD_CDC_Setup+0x76>
 8004f56:	2c20      	cmp	r4, #32
 8004f58:	d142      	bne.n	8004fe0 <USBD_CDC_Setup+0xac>
      if (req->wLength)
 8004f5a:	88f4      	ldrh	r4, [r6, #6]
 8004f5c:	7870      	ldrb	r0, [r6, #1]
 8004f5e:	2c00      	cmp	r4, #0
 8004f60:	d01b      	beq.n	8004f9a <USBD_CDC_Setup+0x66>
        if (req->bmRequest & 0x80U)
 8004f62:	b25b      	sxtb	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	da0c      	bge.n	8004f82 <USBD_CDC_Setup+0x4e>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f68:	23af      	movs	r3, #175	; 0xaf
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	58eb      	ldr	r3, [r5, r3]
 8004f6e:	0022      	movs	r2, r4
 8004f70:	0039      	movs	r1, r7
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f76:	0039      	movs	r1, r7
 8004f78:	88f2      	ldrh	r2, [r6, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f7a:	0028      	movs	r0, r5
 8004f7c:	f000 fcc2 	bl	8005904 <USBD_CtlSendData>
 8004f80:	e009      	b.n	8004f96 <USBD_CDC_Setup+0x62>
          hcdc->CmdOpCode = req->bRequest;
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	54f8      	strb	r0, [r7, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004f88:	4b18      	ldr	r3, [pc, #96]	; (8004fec <USBD_CDC_Setup+0xb8>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f8a:	0022      	movs	r2, r4
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004f8c:	54fc      	strb	r4, [r7, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f8e:	0039      	movs	r1, r7
 8004f90:	0028      	movs	r0, r5
 8004f92:	f000 fccd 	bl	8005930 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8004f96:	2000      	movs	r0, #0
}
 8004f98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f9a:	23af      	movs	r3, #175	; 0xaf
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	58eb      	ldr	r3, [r5, r3]
 8004fa0:	0022      	movs	r2, r4
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	0031      	movs	r1, r6
 8004fa6:	4798      	blx	r3
 8004fa8:	e7f5      	b.n	8004f96 <USBD_CDC_Setup+0x62>
      switch (req->bRequest)
 8004faa:	7877      	ldrb	r7, [r6, #1]
 8004fac:	2f0a      	cmp	r7, #10
 8004fae:	d00b      	beq.n	8004fc8 <USBD_CDC_Setup+0x94>
 8004fb0:	2f0b      	cmp	r7, #11
 8004fb2:	d010      	beq.n	8004fd6 <USBD_CDC_Setup+0xa2>
 8004fb4:	2f00      	cmp	r7, #0
 8004fb6:	d113      	bne.n	8004fe0 <USBD_CDC_Setup+0xac>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fb8:	23a7      	movs	r3, #167	; 0xa7
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	5ceb      	ldrb	r3, [r5, r3]
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d10e      	bne.n	8004fe0 <USBD_CDC_Setup+0xac>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	0001      	movs	r1, r0
 8004fc6:	e7d8      	b.n	8004f7a <USBD_CDC_Setup+0x46>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fc8:	23a7      	movs	r3, #167	; 0xa7
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	5ceb      	ldrb	r3, [r5, r3]
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d106      	bne.n	8004fe0 <USBD_CDC_Setup+0xac>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	e7d1      	b.n	8004f7a <USBD_CDC_Setup+0x46>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004fd6:	23a7      	movs	r3, #167	; 0xa7
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	5ceb      	ldrb	r3, [r5, r3]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d0da      	beq.n	8004f96 <USBD_CDC_Setup+0x62>
          USBD_CtlError(pdev, req);
 8004fe0:	0028      	movs	r0, r5
 8004fe2:	0031      	movs	r1, r6
 8004fe4:	f000 fc67 	bl	80058b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fe8:	2002      	movs	r0, #2
          break;
 8004fea:	e7d5      	b.n	8004f98 <USBD_CDC_Setup+0x64>
 8004fec:	00000201 	.word	0x00000201

08004ff0 <USBD_CDC_DeInit>:
{
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004ff4:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004ff6:	2181      	movs	r1, #129	; 0x81
 8004ff8:	f000 ffe4 	bl	8005fc4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004ffc:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004ffe:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005000:	0020      	movs	r0, r4
 8005002:	f000 ffdf 	bl	8005fc4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005006:	0023      	movs	r3, r4
  if (pdev->pClassData != NULL)
 8005008:	26ae      	movs	r6, #174	; 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800500a:	33fc      	adds	r3, #252	; 0xfc
 800500c:	671d      	str	r5, [r3, #112]	; 0x70
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800500e:	2182      	movs	r1, #130	; 0x82
 8005010:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 8005012:	00b6      	lsls	r6, r6, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005014:	f000 ffd6 	bl	8005fc4 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8005018:	59a3      	ldr	r3, [r4, r6]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800501a:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800501c:	42ab      	cmp	r3, r5
 800501e:	d008      	beq.n	8005032 <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005020:	23af      	movs	r3, #175	; 0xaf
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	58e3      	ldr	r3, [r4, r3]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800502a:	59a0      	ldr	r0, [r4, r6]
 800502c:	f001 f848 	bl	80060c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005030:	51a5      	str	r5, [r4, r6]
}
 8005032:	2000      	movs	r0, #0
 8005034:	bd70      	pop	{r4, r5, r6, pc}

08005036 <USBD_CDC_Init>:
{
 8005036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005038:	0006      	movs	r6, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800503a:	7c03      	ldrb	r3, [r0, #16]
{
 800503c:	0004      	movs	r4, r0
 800503e:	36fc      	adds	r6, #252	; 0xfc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005040:	2b00      	cmp	r3, #0
 8005042:	d141      	bne.n	80050c8 <USBD_CDC_Init+0x92>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005044:	2380      	movs	r3, #128	; 0x80
 8005046:	2202      	movs	r2, #2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	2181      	movs	r1, #129	; 0x81
 800504c:	f000 ffa8 	bl	8005fa0 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005050:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005052:	2380      	movs	r3, #128	; 0x80
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005054:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005056:	009b      	lsls	r3, r3, #2
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005058:	0029      	movs	r1, r5
 800505a:	2202      	movs	r2, #2
 800505c:	0020      	movs	r0, r4
 800505e:	f000 ff9f 	bl	8005fa0 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005062:	6735      	str	r5, [r6, #112]	; 0x70
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005064:	2308      	movs	r3, #8
 8005066:	2203      	movs	r2, #3
 8005068:	2182      	movs	r1, #130	; 0x82
 800506a:	0020      	movs	r0, r4
 800506c:	f000 ff98 	bl	8005fa0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005070:	2601      	movs	r6, #1
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005072:	2087      	movs	r0, #135	; 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005074:	6426      	str	r6, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005076:	0080      	lsls	r0, r0, #2
 8005078:	25ae      	movs	r5, #174	; 0xae
 800507a:	f001 f81d 	bl	80060b8 <USBD_static_malloc>
  memset(pdev->pClassData,0,sizeof(USBD_CDC_HandleTypeDef)); // THIS LINE WAS ADDED
 800507e:	2287      	movs	r2, #135	; 0x87
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005080:	00ad      	lsls	r5, r5, #2
 8005082:	5160      	str	r0, [r4, r5]
  memset(pdev->pClassData,0,sizeof(USBD_CDC_HandleTypeDef)); // THIS LINE WAS ADDED
 8005084:	0092      	lsls	r2, r2, #2
 8005086:	2100      	movs	r1, #0
 8005088:	f001 f84f 	bl	800612a <memset>
  if (pdev->pClassData == NULL)
 800508c:	5965      	ldr	r5, [r4, r5]
    ret = 1U;
 800508e:	0030      	movs	r0, r6
  if (pdev->pClassData == NULL)
 8005090:	2d00      	cmp	r5, #0
 8005092:	d018      	beq.n	80050c6 <USBD_CDC_Init+0x90>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005094:	23af      	movs	r3, #175	; 0xaf
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	58e3      	ldr	r3, [r4, r3]
    hcdc->TxState = 0U;
 800509a:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4798      	blx	r3
    hcdc->TxState = 0U;
 80050a0:	2385      	movs	r3, #133	; 0x85
 80050a2:	2281      	movs	r2, #129	; 0x81
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	50ef      	str	r7, [r5, r3]
    hcdc->RxState = 0U;
 80050a8:	3304      	adds	r3, #4
 80050aa:	50ef      	str	r7, [r5, r3]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050ac:	7c23      	ldrb	r3, [r4, #16]
 80050ae:	0092      	lsls	r2, r2, #2
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	42bb      	cmp	r3, r7
 80050b4:	d111      	bne.n	80050da <USBD_CDC_Init+0xa4>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050b6:	2380      	movs	r3, #128	; 0x80
 80050b8:	58aa      	ldr	r2, [r5, r2]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	0031      	movs	r1, r6
 80050be:	0020      	movs	r0, r4
 80050c0:	f000 ffe2 	bl	8006088 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80050c4:	9801      	ldr	r0, [sp, #4]
}
 80050c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80050c8:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80050ca:	2340      	movs	r3, #64	; 0x40
 80050cc:	2202      	movs	r2, #2
 80050ce:	2181      	movs	r1, #129	; 0x81
 80050d0:	f000 ff66 	bl	8005fa0 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80050d4:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80050d6:	2340      	movs	r3, #64	; 0x40
 80050d8:	e7be      	b.n	8005058 <USBD_CDC_Init+0x22>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050da:	2340      	movs	r3, #64	; 0x40
 80050dc:	58aa      	ldr	r2, [r5, r2]
 80050de:	0031      	movs	r1, r6
 80050e0:	0020      	movs	r0, r4
 80050e2:	f000 ffd1 	bl	8006088 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80050e6:	0038      	movs	r0, r7
 80050e8:	e7ed      	b.n	80050c6 <USBD_CDC_Init+0x90>

080050ea <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 80050ea:	2302      	movs	r3, #2

  if (fops != NULL)
 80050ec:	2900      	cmp	r1, #0
 80050ee:	d003      	beq.n	80050f8 <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData = fops;
 80050f0:	23af      	movs	r3, #175	; 0xaf
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;
 80050f6:	2300      	movs	r3, #0
  }

  return ret;
}
 80050f8:	0018      	movs	r0, r3
 80050fa:	4770      	bx	lr

080050fc <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050fc:	23ae      	movs	r3, #174	; 0xae
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 8005102:	2082      	movs	r0, #130	; 0x82
 8005104:	0080      	lsls	r0, r0, #2
 8005106:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 8005108:	2184      	movs	r1, #132	; 0x84
 800510a:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 800510c:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 800510e:	505a      	str	r2, [r3, r1]
}
 8005110:	4770      	bx	lr

08005112 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005112:	23ae      	movs	r3, #174	; 0xae
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	58c2      	ldr	r2, [r0, r3]
 8005118:	3bb4      	subs	r3, #180	; 0xb4

  return USBD_OK;
}
 800511a:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800511c:	50d1      	str	r1, [r2, r3]
}
 800511e:	4770      	bx	lr

08005120 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005120:	23ae      	movs	r3, #174	; 0xae
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	58c2      	ldr	r2, [r0, r3]
{
 8005126:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8005128:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 800512a:	2a00      	cmp	r2, #0
 800512c:	d012      	beq.n	8005154 <USBD_CDC_TransmitPacket+0x34>
    if (hcdc->TxState == 0U)
 800512e:	2185      	movs	r1, #133	; 0x85
 8005130:	0089      	lsls	r1, r1, #2
 8005132:	5854      	ldr	r4, [r2, r1]
 8005134:	3b01      	subs	r3, #1
 8005136:	2c00      	cmp	r4, #0
 8005138:	d10c      	bne.n	8005154 <USBD_CDC_TransmitPacket+0x34>
      hcdc->TxState = 1U;
 800513a:	5053      	str	r3, [r2, r1]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800513c:	2384      	movs	r3, #132	; 0x84
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005142:	390c      	subs	r1, #12
 8005144:	5852      	ldr	r2, [r2, r1]
 8005146:	3988      	subs	r1, #136	; 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005148:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800514a:	39ff      	subs	r1, #255	; 0xff
 800514c:	b29b      	uxth	r3, r3
 800514e:	f000 ff8b 	bl	8006068 <USBD_LL_Transmit>
      return USBD_OK;
 8005152:	0023      	movs	r3, r4
  }
}
 8005154:	0018      	movs	r0, r3
 8005156:	bd10      	pop	{r4, pc}

08005158 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005158:	23ae      	movs	r3, #174	; 0xae
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	58c2      	ldr	r2, [r0, r3]
{
 800515e:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8005160:	2402      	movs	r4, #2
  if (pdev->pClassData != NULL)
 8005162:	2a00      	cmp	r2, #0
 8005164:	d008      	beq.n	8005178 <USBD_CDC_ReceivePacket+0x20>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005166:	7c04      	ldrb	r4, [r0, #16]
 8005168:	3bb4      	subs	r3, #180	; 0xb4
 800516a:	58d2      	ldr	r2, [r2, r3]
 800516c:	2c00      	cmp	r4, #0
 800516e:	d105      	bne.n	800517c <USBD_CDC_ReceivePacket+0x24>
      USBD_LL_PrepareReceive(pdev,
 8005170:	3b04      	subs	r3, #4
 8005172:	2101      	movs	r1, #1
 8005174:	f000 ff88 	bl	8006088 <USBD_LL_PrepareReceive>
  }
}
 8005178:	0020      	movs	r0, r4
 800517a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800517c:	2340      	movs	r3, #64	; 0x40
 800517e:	2101      	movs	r1, #1
 8005180:	f000 ff82 	bl	8006088 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8005184:	2400      	movs	r4, #0
 8005186:	e7f7      	b.n	8005178 <USBD_CDC_ReceivePacket+0x20>

08005188 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005188:	b510      	push	{r4, lr}
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800518a:	2302      	movs	r3, #2
  if (pdev == NULL)
 800518c:	2800      	cmp	r0, #0
 800518e:	d013      	beq.n	80051b8 <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005190:	23ad      	movs	r3, #173	; 0xad
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	58c4      	ldr	r4, [r0, r3]
 8005196:	2c00      	cmp	r4, #0
 8005198:	d001      	beq.n	800519e <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 800519a:	2400      	movs	r4, #0
 800519c:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800519e:	2900      	cmp	r1, #0
 80051a0:	d002      	beq.n	80051a8 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 80051a2:	23ac      	movs	r3, #172	; 0xac
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051a8:	23a7      	movs	r3, #167	; 0xa7
 80051aa:	2101      	movs	r1, #1
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 80051b0:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80051b2:	f000 fe85 	bl	8005ec0 <USBD_LL_Init>

  return USBD_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	0018      	movs	r0, r3
 80051ba:	bd10      	pop	{r4, pc}

080051bc <USBD_DeInit>:
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051bc:	23a7      	movs	r3, #167	; 0xa7
 80051be:	2201      	movs	r2, #1
 80051c0:	009b      	lsls	r3, r3, #2
{
 80051c2:	b510      	push	{r4, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051c4:	54c2      	strb	r2, [r0, r3]

  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80051c6:	6843      	ldr	r3, [r0, #4]
{
 80051c8:	0004      	movs	r4, r0
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80051ca:	b2d9      	uxtb	r1, r3
 80051cc:	23ad      	movs	r3, #173	; 0xad
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	58c3      	ldr	r3, [r0, r3]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev);
 80051d6:	0020      	movs	r0, r4
 80051d8:	f000 fed2 	bl	8005f80 <USBD_LL_Stop>

  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 80051dc:	0020      	movs	r0, r4
 80051de:	f000 feaf 	bl	8005f40 <USBD_LL_DeInit>

  return USBD_OK;
}
 80051e2:	2000      	movs	r0, #0
 80051e4:	bd10      	pop	{r4, pc}

080051e6 <USBD_RegisterClass>:
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80051e6:	2302      	movs	r3, #2
  if (pclass != NULL)
 80051e8:	2900      	cmp	r1, #0
 80051ea:	d003      	beq.n	80051f4 <USBD_RegisterClass+0xe>
    pdev->pClass = pclass;
 80051ec:	23ad      	movs	r3, #173	; 0xad
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 80051f2:	2300      	movs	r3, #0
  }

  return status;
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	4770      	bx	lr

080051f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80051f8:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80051fa:	f000 feb1 	bl	8005f60 <USBD_LL_Start>

  return USBD_OK;
}
 80051fe:	2000      	movs	r0, #0
 8005200:	bd10      	pop	{r4, pc}

08005202 <USBD_Stop>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005202:	6843      	ldr	r3, [r0, #4]
{
 8005204:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005206:	b2d9      	uxtb	r1, r3
 8005208:	23ad      	movs	r3, #173	; 0xad
{
 800520a:	0004      	movs	r4, r0
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	58c3      	ldr	r3, [r0, r3]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8005214:	0020      	movs	r0, r4
 8005216:	f000 feb3 	bl	8005f80 <USBD_LL_Stop>

  return USBD_OK;
}
 800521a:	2000      	movs	r0, #0
 800521c:	bd10      	pop	{r4, pc}

0800521e <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800521e:	23ad      	movs	r3, #173	; 0xad
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	58c3      	ldr	r3, [r0, r3]
{
 8005224:	b510      	push	{r4, lr}
  if (pdev->pClass != NULL)
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <USBD_SetClassConfig+0x10>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800522a:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800522c:	bd10      	pop	{r4, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4798      	blx	r3
 8005232:	2800      	cmp	r0, #0
 8005234:	d0fa      	beq.n	800522c <USBD_SetClassConfig+0xe>
 8005236:	e7f8      	b.n	800522a <USBD_SetClassConfig+0xc>

08005238 <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005238:	23ad      	movs	r3, #173	; 0xad
{
 800523a:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	58c3      	ldr	r3, [r0, r3]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	4798      	blx	r3

  return USBD_OK;
}
 8005244:	2000      	movs	r0, #0
 8005246:	bd10      	pop	{r4, pc}

08005248 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005248:	23aa      	movs	r3, #170	; 0xaa
 800524a:	009b      	lsls	r3, r3, #2
{
 800524c:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800524e:	18c5      	adds	r5, r0, r3
{
 8005250:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005252:	0028      	movs	r0, r5
 8005254:	f000 fb1b 	bl	800588e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005258:	23a5      	movs	r3, #165	; 0xa5
 800525a:	2201      	movs	r2, #1
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005260:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <USBD_LL_SetupStage+0x60>)
 8005262:	5ae2      	ldrh	r2, [r4, r3]
 8005264:	3b16      	subs	r3, #22
 8005266:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005268:	3310      	adds	r3, #16
 800526a:	5ce1      	ldrb	r1, [r4, r3]
 800526c:	231f      	movs	r3, #31
 800526e:	400b      	ands	r3, r1
 8005270:	2b01      	cmp	r3, #1
 8005272:	d00f      	beq.n	8005294 <USBD_LL_SetupStage+0x4c>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <USBD_LL_SetupStage+0x40>
 8005278:	2b02      	cmp	r3, #2
 800527a:	d010      	beq.n	800529e <USBD_LL_SetupStage+0x56>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800527c:	237f      	movs	r3, #127	; 0x7f
 800527e:	0020      	movs	r0, r4
 8005280:	4399      	bics	r1, r3
 8005282:	f000 feaf 	bl	8005fe4 <USBD_LL_StallEP>
      break;
 8005286:	e003      	b.n	8005290 <USBD_LL_SetupStage+0x48>
      USBD_StdDevReq(pdev, &pdev->request);
 8005288:	0029      	movs	r1, r5
 800528a:	0020      	movs	r0, r4
 800528c:	f000 f914 	bl	80054b8 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8005290:	2000      	movs	r0, #0
 8005292:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005294:	0029      	movs	r1, r5
 8005296:	0020      	movs	r0, r4
 8005298:	f000 fa3c 	bl	8005714 <USBD_StdItfReq>
      break;
 800529c:	e7f8      	b.n	8005290 <USBD_LL_SetupStage+0x48>
      USBD_StdEPReq(pdev, &pdev->request);
 800529e:	0029      	movs	r1, r5
 80052a0:	0020      	movs	r0, r4
 80052a2:	f000 fa61 	bl	8005768 <USBD_StdEPReq>
      break;
 80052a6:	e7f3      	b.n	8005290 <USBD_LL_SetupStage+0x48>
 80052a8:	000002ae 	.word	0x000002ae

080052ac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	0004      	movs	r4, r0
 80052b0:	0015      	movs	r5, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80052b2:	2900      	cmp	r1, #0
 80052b4:	d130      	bne.n	8005318 <USBD_LL_DataOutStage+0x6c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052b6:	23a5      	movs	r3, #165	; 0xa5
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	58c2      	ldr	r2, [r0, r3]
 80052bc:	2a03      	cmp	r2, #3
 80052be:	d123      	bne.n	8005308 <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 80052c0:	0002      	movs	r2, r0
 80052c2:	3255      	adds	r2, #85	; 0x55
 80052c4:	32ff      	adds	r2, #255	; 0xff
 80052c6:	68d3      	ldr	r3, [r2, #12]
 80052c8:	6910      	ldr	r0, [r2, #16]
 80052ca:	4283      	cmp	r3, r0
 80052cc:	d90b      	bls.n	80052e6 <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 80052ce:	1a1b      	subs	r3, r3, r0
 80052d0:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 80052d2:	b282      	uxth	r2, r0
 80052d4:	4298      	cmp	r0, r3
 80052d6:	d900      	bls.n	80052da <USBD_LL_DataOutStage+0x2e>
 80052d8:	b29a      	uxth	r2, r3
 80052da:	0029      	movs	r1, r5
 80052dc:	0020      	movs	r0, r4
 80052de:	f000 fb37 	bl	8005950 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80052e2:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 80052e4:	e016      	b.n	8005314 <USBD_LL_DataOutStage+0x68>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052e6:	23ad      	movs	r3, #173	; 0xad
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	58e3      	ldr	r3, [r4, r3]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d006      	beq.n	8005300 <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052f2:	22a7      	movs	r2, #167	; 0xa7
 80052f4:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052f6:	5ca2      	ldrb	r2, [r4, r2]
 80052f8:	2a03      	cmp	r2, #3
 80052fa:	d101      	bne.n	8005300 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 80052fc:	0020      	movs	r0, r4
 80052fe:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005300:	0020      	movs	r0, r4
 8005302:	f000 fb2d 	bl	8005960 <USBD_CtlSendStatus>
 8005306:	e7ec      	b.n	80052e2 <USBD_LL_DataOutStage+0x36>
  return USBD_OK;
 8005308:	000d      	movs	r5, r1
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800530a:	2a05      	cmp	r2, #5
 800530c:	d102      	bne.n	8005314 <USBD_LL_DataOutStage+0x68>
        pdev->ep0_state = USBD_EP0_IDLE;
 800530e:	50e1      	str	r1, [r4, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005310:	f000 fe68 	bl	8005fe4 <USBD_LL_StallEP>
}
 8005314:	0028      	movs	r0, r5
 8005316:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8005318:	23ad      	movs	r3, #173	; 0xad
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 800531e:	2502      	movs	r5, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f6      	beq.n	8005314 <USBD_LL_DataOutStage+0x68>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005326:	22a7      	movs	r2, #167	; 0xa7
 8005328:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 800532a:	5c82      	ldrb	r2, [r0, r2]
 800532c:	2a03      	cmp	r2, #3
 800532e:	d1f1      	bne.n	8005314 <USBD_LL_DataOutStage+0x68>
    pdev->pClass->DataOut(pdev, epnum);
 8005330:	4798      	blx	r3
 8005332:	e7d6      	b.n	80052e2 <USBD_LL_DataOutStage+0x36>

08005334 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	000d      	movs	r5, r1
 8005338:	0004      	movs	r4, r0
 800533a:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800533c:	2d00      	cmp	r5, #0
 800533e:	d14b      	bne.n	80053d8 <USBD_LL_DataInStage+0xa4>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005340:	23a5      	movs	r3, #165	; 0xa5
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	58c3      	ldr	r3, [r0, r3]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d13f      	bne.n	80053ca <USBD_LL_DataInStage+0x96>
    {
      if (pep->rem_length > pep->maxpacket)
 800534a:	6a02      	ldr	r2, [r0, #32]
 800534c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800534e:	42b2      	cmp	r2, r6
 8005350:	d912      	bls.n	8005378 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8005352:	1b92      	subs	r2, r2, r6
 8005354:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005356:	b292      	uxth	r2, r2
 8005358:	f000 fae2 	bl	8005920 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800535c:	002b      	movs	r3, r5
 800535e:	002a      	movs	r2, r5
 8005360:	0029      	movs	r1, r5
 8005362:	0020      	movs	r0, r4
 8005364:	f000 fe90 	bl	8006088 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005368:	23a8      	movs	r3, #168	; 0xa8
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	5ce2      	ldrb	r2, [r4, r3]
 800536e:	2000      	movs	r0, #0
 8005370:	2a01      	cmp	r2, #1
 8005372:	d100      	bne.n	8005376 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005374:	54e0      	strb	r0, [r4, r3]
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8005376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005378:	69c7      	ldr	r7, [r0, #28]
 800537a:	0031      	movs	r1, r6
 800537c:	0038      	movs	r0, r7
 800537e:	f7fa ff65 	bl	800024c <__aeabi_uidivmod>
 8005382:	1e0d      	subs	r5, r1, #0
 8005384:	d10c      	bne.n	80053a0 <USBD_LL_DataInStage+0x6c>
 8005386:	42be      	cmp	r6, r7
 8005388:	d80a      	bhi.n	80053a0 <USBD_LL_DataInStage+0x6c>
            (pep->total_length < pdev->ep0_data_len))
 800538a:	26a6      	movs	r6, #166	; 0xa6
 800538c:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 800538e:	59a3      	ldr	r3, [r4, r6]
 8005390:	429f      	cmp	r7, r3
 8005392:	d205      	bcs.n	80053a0 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005394:	000a      	movs	r2, r1
 8005396:	0020      	movs	r0, r4
 8005398:	f000 fac2 	bl	8005920 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800539c:	51a5      	str	r5, [r4, r6]
 800539e:	e7dd      	b.n	800535c <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80053a0:	23ad      	movs	r3, #173	; 0xad
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	58e3      	ldr	r3, [r4, r3]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d006      	beq.n	80053ba <USBD_LL_DataInStage+0x86>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80053ac:	22a7      	movs	r2, #167	; 0xa7
 80053ae:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80053b0:	5ca2      	ldrb	r2, [r4, r2]
 80053b2:	2a03      	cmp	r2, #3
 80053b4:	d101      	bne.n	80053ba <USBD_LL_DataInStage+0x86>
            pdev->pClass->EP0_TxSent(pdev);
 80053b6:	0020      	movs	r0, r4
 80053b8:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80053ba:	2180      	movs	r1, #128	; 0x80
 80053bc:	0020      	movs	r0, r4
 80053be:	f000 fe11 	bl	8005fe4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80053c2:	0020      	movs	r0, r4
 80053c4:	f000 fad8 	bl	8005978 <USBD_CtlReceiveStatus>
 80053c8:	e7ce      	b.n	8005368 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80053ca:	2204      	movs	r2, #4
 80053cc:	4393      	bics	r3, r2
 80053ce:	d1cb      	bne.n	8005368 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80053d0:	2180      	movs	r1, #128	; 0x80
 80053d2:	f000 fe07 	bl	8005fe4 <USBD_LL_StallEP>
 80053d6:	e7c7      	b.n	8005368 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80053d8:	23ad      	movs	r3, #173	; 0xad
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 80053de:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0c7      	beq.n	8005376 <USBD_LL_DataInStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80053e6:	22a7      	movs	r2, #167	; 0xa7
 80053e8:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 80053ea:	5ca2      	ldrb	r2, [r4, r2]
 80053ec:	2a03      	cmp	r2, #3
 80053ee:	d1c2      	bne.n	8005376 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum);
 80053f0:	0029      	movs	r1, r5
 80053f2:	0020      	movs	r0, r4
 80053f4:	4798      	blx	r3
  return USBD_OK;
 80053f6:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80053f8:	e7bd      	b.n	8005376 <USBD_LL_DataInStage+0x42>

080053fa <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053fa:	2200      	movs	r2, #0
{
 80053fc:	b570      	push	{r4, r5, r6, lr}
 80053fe:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005400:	0011      	movs	r1, r2
 8005402:	2340      	movs	r3, #64	; 0x40
 8005404:	f000 fdcc 	bl	8005fa0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005408:	0023      	movs	r3, r4
 800540a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800540c:	2640      	movs	r6, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800540e:	33fc      	adds	r3, #252	; 0xfc
 8005410:	65dd      	str	r5, [r3, #92]	; 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005412:	669e      	str	r6, [r3, #104]	; 0x68

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005414:	2180      	movs	r1, #128	; 0x80
 8005416:	0033      	movs	r3, r6
 8005418:	2200      	movs	r2, #0
 800541a:	0020      	movs	r0, r4
 800541c:	f000 fdc0 	bl	8005fa0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005420:	23a7      	movs	r3, #167	; 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 8005422:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005424:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005426:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005428:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800542a:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800542c:	3b08      	subs	r3, #8
 800542e:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 8005430:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 8005432:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005434:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 8005436:	3314      	adds	r3, #20
 8005438:	58e3      	ldr	r3, [r4, r3]
 800543a:	428b      	cmp	r3, r1
 800543c:	d005      	beq.n	800544a <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800543e:	23ad      	movs	r3, #173	; 0xad
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	58e3      	ldr	r3, [r4, r3]
 8005444:	0020      	movs	r0, r4
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4798      	blx	r3
  }

  return USBD_OK;
}
 800544a:	2000      	movs	r0, #0
 800544c:	bd70      	pop	{r4, r5, r6, pc}

0800544e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800544e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005450:	2000      	movs	r0, #0
 8005452:	4770      	bx	lr

08005454 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005454:	23a7      	movs	r3, #167	; 0xa7
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	5cc1      	ldrb	r1, [r0, r3]
 800545a:	4a03      	ldr	r2, [pc, #12]	; (8005468 <USBD_LL_Suspend+0x14>)
 800545c:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800545e:	2204      	movs	r2, #4
 8005460:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 8005462:	2000      	movs	r0, #0
 8005464:	4770      	bx	lr
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	0000029d 	.word	0x0000029d

0800546c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800546c:	23a7      	movs	r3, #167	; 0xa7
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	5cc2      	ldrb	r2, [r0, r3]
 8005472:	2a04      	cmp	r2, #4
 8005474:	d102      	bne.n	800547c <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005476:	4a02      	ldr	r2, [pc, #8]	; (8005480 <USBD_LL_Resume+0x14>)
 8005478:	5c82      	ldrb	r2, [r0, r2]
 800547a:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 800547c:	2000      	movs	r0, #0
 800547e:	4770      	bx	lr
 8005480:	0000029d 	.word	0x0000029d

08005484 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005484:	23a7      	movs	r3, #167	; 0xa7
{
 8005486:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	5cc3      	ldrb	r3, [r0, r3]
 800548c:	2b03      	cmp	r3, #3
 800548e:	d106      	bne.n	800549e <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 8005490:	23ad      	movs	r3, #173	; 0xad
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	58c3      	ldr	r3, [r0, r3]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d000      	beq.n	800549e <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 800549c:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800549e:	2000      	movs	r0, #0
 80054a0:	bd10      	pop	{r4, pc}

080054a2 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80054a2:	b510      	push	{r4, lr}
 80054a4:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80054a6:	2180      	movs	r1, #128	; 0x80
 80054a8:	f000 fd9c 	bl	8005fe4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80054ac:	2100      	movs	r1, #0
 80054ae:	0020      	movs	r0, r4
 80054b0:	f000 fd98 	bl	8005fe4 <USBD_LL_StallEP>
}
 80054b4:	bd10      	pop	{r4, pc}
	...

080054b8 <USBD_StdDevReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054b8:	2260      	movs	r2, #96	; 0x60
 80054ba:	780b      	ldrb	r3, [r1, #0]
{
 80054bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054be:	4013      	ands	r3, r2
{
 80054c0:	0004      	movs	r4, r0
 80054c2:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d014      	beq.n	80054f2 <USBD_StdDevReq+0x3a>
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d012      	beq.n	80054f2 <USBD_StdDevReq+0x3a>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d000      	beq.n	80054d2 <USBD_StdDevReq+0x1a>
 80054d0:	e090      	b.n	80055f4 <USBD_StdDevReq+0x13c>
      switch (req->bRequest)
 80054d2:	7848      	ldrb	r0, [r1, #1]
 80054d4:	2809      	cmp	r0, #9
 80054d6:	d900      	bls.n	80054da <USBD_StdDevReq+0x22>
 80054d8:	e08c      	b.n	80055f4 <USBD_StdDevReq+0x13c>
 80054da:	f7fa fe27 	bl	800012c <__gnu_thumb1_case_uhi>
 80054de:	00e9      	.short	0x00e9
 80054e0:	008b0107 	.word	0x008b0107
 80054e4:	008b00ff 	.word	0x008b00ff
 80054e8:	0013007d 	.word	0x0013007d
 80054ec:	00d3008b 	.word	0x00d3008b
 80054f0:	009e      	.short	0x009e
      pdev->pClass->Setup(pdev, req);
 80054f2:	23ad      	movs	r3, #173	; 0xad
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	58e3      	ldr	r3, [r4, r3]
 80054f8:	0029      	movs	r1, r5
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	0020      	movs	r0, r4
 80054fe:	4798      	blx	r3
}
 8005500:	2000      	movs	r0, #0
 8005502:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  uint16_t len = 0U;
 8005504:	466b      	mov	r3, sp
 8005506:	1d9e      	adds	r6, r3, #6
 8005508:	2300      	movs	r3, #0
 800550a:	8033      	strh	r3, [r6, #0]
  switch (req->wValue >> 8)
 800550c:	884b      	ldrh	r3, [r1, #2]
 800550e:	0a18      	lsrs	r0, r3, #8
 8005510:	3801      	subs	r0, #1
 8005512:	2806      	cmp	r0, #6
 8005514:	d86e      	bhi.n	80055f4 <USBD_StdDevReq+0x13c>
 8005516:	f7fa fdff 	bl	8000118 <__gnu_thumb1_case_uqi>
 800551a:	2204      	.short	0x2204
 800551c:	4a6d6d30 	.word	0x4a6d6d30
 8005520:	54          	.byte	0x54
 8005521:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005522:	23ac      	movs	r3, #172	; 0xac
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	58e3      	ldr	r3, [r4, r3]
 8005528:	7c20      	ldrb	r0, [r4, #16]
 800552a:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800552c:	0031      	movs	r1, r6
 800552e:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005530:	8831      	ldrh	r1, [r6, #0]
 8005532:	2900      	cmp	r1, #0
 8005534:	d00c      	beq.n	8005550 <USBD_StdDevReq+0x98>
 8005536:	88ea      	ldrh	r2, [r5, #6]
 8005538:	2a00      	cmp	r2, #0
 800553a:	d009      	beq.n	8005550 <USBD_StdDevReq+0x98>
      len = MIN(len, req->wLength);
 800553c:	1c0b      	adds	r3, r1, #0
 800553e:	4291      	cmp	r1, r2
 8005540:	d900      	bls.n	8005544 <USBD_StdDevReq+0x8c>
 8005542:	1c13      	adds	r3, r2, #0
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005544:	0001      	movs	r1, r0
      len = MIN(len, req->wLength);
 8005546:	b29a      	uxth	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005548:	0020      	movs	r0, r4
      len = MIN(len, req->wLength);
 800554a:	8033      	strh	r3, [r6, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800554c:	f000 f9da 	bl	8005904 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005550:	88eb      	ldrh	r3, [r5, #6]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1d4      	bne.n	8005500 <USBD_StdDevReq+0x48>
        USBD_CtlSendStatus(pdev);
 8005556:	0020      	movs	r0, r4
 8005558:	f000 fa02 	bl	8005960 <USBD_CtlSendStatus>
 800555c:	e7d0      	b.n	8005500 <USBD_StdDevReq+0x48>
 800555e:	23ad      	movs	r3, #173	; 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005560:	7c22      	ldrb	r2, [r4, #16]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	58e3      	ldr	r3, [r4, r3]
 8005566:	2a00      	cmp	r2, #0
 8005568:	d105      	bne.n	8005576 <USBD_StdDevReq+0xbe>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800556c:	0030      	movs	r0, r6
 800556e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005570:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005572:	7043      	strb	r3, [r0, #1]
 8005574:	e7dc      	b.n	8005530 <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	e7f8      	b.n	800556c <USBD_StdDevReq+0xb4>
      switch ((uint8_t)(req->wValue))
 800557a:	b2d8      	uxtb	r0, r3
 800557c:	2805      	cmp	r0, #5
 800557e:	d839      	bhi.n	80055f4 <USBD_StdDevReq+0x13c>
 8005580:	23ac      	movs	r3, #172	; 0xac
 8005582:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005584:	58e3      	ldr	r3, [r4, r3]
      switch ((uint8_t)(req->wValue))
 8005586:	f7fa fdc7 	bl	8000118 <__gnu_thumb1_case_uqi>
 800558a:	0803      	.short	0x0803
 800558c:	100e0c0a 	.word	0x100e0c0a
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d02e      	beq.n	80055f4 <USBD_StdDevReq+0x13c>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005596:	7c20      	ldrb	r0, [r4, #16]
 8005598:	e7c8      	b.n	800552c <USBD_StdDevReq+0x74>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	e7f9      	b.n	8005592 <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	e7f7      	b.n	8005592 <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	e7f5      	b.n	8005592 <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	e7f3      	b.n	8005592 <USBD_StdDevReq+0xda>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	e7f1      	b.n	8005592 <USBD_StdDevReq+0xda>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055ae:	7c23      	ldrb	r3, [r4, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d11f      	bne.n	80055f4 <USBD_StdDevReq+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80055b4:	23ad      	movs	r3, #173	; 0xad
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	58e3      	ldr	r3, [r4, r3]
 80055ba:	0030      	movs	r0, r6
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	4798      	blx	r3
 80055c0:	e7b6      	b.n	8005530 <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055c2:	7c23      	ldrb	r3, [r4, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d115      	bne.n	80055f4 <USBD_StdDevReq+0x13c>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80055c8:	23ad      	movs	r3, #173	; 0xad
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	58e3      	ldr	r3, [r4, r3]
 80055ce:	0030      	movs	r0, r6
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80055d4:	2307      	movs	r3, #7
 80055d6:	e7cc      	b.n	8005572 <USBD_StdDevReq+0xba>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80055d8:	888b      	ldrh	r3, [r1, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <USBD_StdDevReq+0x13c>
 80055de:	88cb      	ldrh	r3, [r1, #6]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d107      	bne.n	80055f4 <USBD_StdDevReq+0x13c>
 80055e4:	884e      	ldrh	r6, [r1, #2]
 80055e6:	2e7f      	cmp	r6, #127	; 0x7f
 80055e8:	d804      	bhi.n	80055f4 <USBD_StdDevReq+0x13c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ea:	25a7      	movs	r5, #167	; 0xa7
 80055ec:	00ad      	lsls	r5, r5, #2
 80055ee:	5d63      	ldrb	r3, [r4, r5]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d103      	bne.n	80055fc <USBD_StdDevReq+0x144>
        USBD_CtlError(pdev, req);
 80055f4:	0020      	movs	r0, r4
 80055f6:	f7ff ff54 	bl	80054a2 <USBD_CtlError.constprop.1>
 80055fa:	e781      	b.n	8005500 <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 80055fc:	4b43      	ldr	r3, [pc, #268]	; (800570c <USBD_StdDevReq+0x254>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80055fe:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8005600:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005602:	0020      	movs	r0, r4
 8005604:	f000 fd20 	bl	8006048 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005608:	0020      	movs	r0, r4
 800560a:	f000 f9a9 	bl	8005960 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800560e:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 8005610:	2e00      	cmp	r6, #0
 8005612:	d100      	bne.n	8005616 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005614:	2301      	movs	r3, #1
 8005616:	5563      	strb	r3, [r4, r5]
 8005618:	e772      	b.n	8005500 <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 800561a:	7889      	ldrb	r1, [r1, #2]
 800561c:	4d3c      	ldr	r5, [pc, #240]	; (8005710 <USBD_StdDevReq+0x258>)
 800561e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005620:	2901      	cmp	r1, #1
 8005622:	d8e7      	bhi.n	80055f4 <USBD_StdDevReq+0x13c>
    switch (pdev->dev_state)
 8005624:	23a7      	movs	r3, #167	; 0xa7
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	5ce2      	ldrb	r2, [r4, r3]
 800562a:	2a02      	cmp	r2, #2
 800562c:	d009      	beq.n	8005642 <USBD_StdDevReq+0x18a>
 800562e:	2a03      	cmp	r2, #3
 8005630:	d014      	beq.n	800565c <USBD_StdDevReq+0x1a4>
        USBD_CtlError(pdev, req);
 8005632:	0020      	movs	r0, r4
 8005634:	f7ff ff35 	bl	80054a2 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005638:	7829      	ldrb	r1, [r5, #0]
 800563a:	0020      	movs	r0, r4
 800563c:	f7ff fdfc 	bl	8005238 <USBD_ClrClassConfig>
 8005640:	e75e      	b.n	8005500 <USBD_StdDevReq+0x48>
        if (cfgidx)
 8005642:	2900      	cmp	r1, #0
 8005644:	d087      	beq.n	8005556 <USBD_StdDevReq+0x9e>
          pdev->dev_config = cfgidx;
 8005646:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005648:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 800564a:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800564c:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800564e:	0020      	movs	r0, r4
 8005650:	f7ff fde5 	bl	800521e <USBD_SetClassConfig>
 8005654:	2802      	cmp	r0, #2
 8005656:	d000      	beq.n	800565a <USBD_StdDevReq+0x1a2>
 8005658:	e77d      	b.n	8005556 <USBD_StdDevReq+0x9e>
 800565a:	e7cb      	b.n	80055f4 <USBD_StdDevReq+0x13c>
        if (cfgidx == 0U)
 800565c:	2900      	cmp	r1, #0
 800565e:	d106      	bne.n	800566e <USBD_StdDevReq+0x1b6>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005660:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 8005662:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005664:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 8005666:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005668:	f7ff fde6 	bl	8005238 <USBD_ClrClassConfig>
 800566c:	e773      	b.n	8005556 <USBD_StdDevReq+0x9e>
        else if (cfgidx != pdev->dev_config)
 800566e:	6861      	ldr	r1, [r4, #4]
 8005670:	2901      	cmp	r1, #1
 8005672:	d100      	bne.n	8005676 <USBD_StdDevReq+0x1be>
 8005674:	e76f      	b.n	8005556 <USBD_StdDevReq+0x9e>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005676:	b2c9      	uxtb	r1, r1
 8005678:	0020      	movs	r0, r4
 800567a:	f7ff fddd 	bl	8005238 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800567e:	7829      	ldrb	r1, [r5, #0]
 8005680:	6061      	str	r1, [r4, #4]
 8005682:	e7e4      	b.n	800564e <USBD_StdDevReq+0x196>
  if (req->wLength != 1U)
 8005684:	88ca      	ldrh	r2, [r1, #6]
 8005686:	2a01      	cmp	r2, #1
 8005688:	d1b4      	bne.n	80055f4 <USBD_StdDevReq+0x13c>
    switch (pdev->dev_state)
 800568a:	23a7      	movs	r3, #167	; 0xa7
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	5ce3      	ldrb	r3, [r4, r3]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0af      	beq.n	80055f4 <USBD_StdDevReq+0x13c>
 8005694:	2b02      	cmp	r3, #2
 8005696:	d906      	bls.n	80056a6 <USBD_StdDevReq+0x1ee>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005698:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 800569a:	2b03      	cmp	r3, #3
 800569c:	d1aa      	bne.n	80055f4 <USBD_StdDevReq+0x13c>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800569e:	0020      	movs	r0, r4
 80056a0:	f000 f930 	bl	8005904 <USBD_CtlSendData>
 80056a4:	e72c      	b.n	8005500 <USBD_StdDevReq+0x48>
        pdev->dev_default_config = 0U;
 80056a6:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80056a8:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 80056aa:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80056ac:	3108      	adds	r1, #8
 80056ae:	e7f6      	b.n	800569e <USBD_StdDevReq+0x1e6>
  switch (pdev->dev_state)
 80056b0:	23a7      	movs	r3, #167	; 0xa7
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	5ce3      	ldrb	r3, [r4, r3]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d89b      	bhi.n	80055f4 <USBD_StdDevReq+0x13c>
      if (req->wLength != 0x2U)
 80056bc:	88cb      	ldrh	r3, [r1, #6]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d198      	bne.n	80055f4 <USBD_StdDevReq+0x13c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80056c2:	3b01      	subs	r3, #1
 80056c4:	60e3      	str	r3, [r4, #12]
      if (pdev->dev_remote_wakeup)
 80056c6:	23a9      	movs	r3, #169	; 0xa9
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	58e3      	ldr	r3, [r4, r3]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <USBD_StdDevReq+0x21c>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80056d0:	2303      	movs	r3, #3
 80056d2:	60e3      	str	r3, [r4, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80056d4:	0021      	movs	r1, r4
 80056d6:	2202      	movs	r2, #2
 80056d8:	310c      	adds	r1, #12
 80056da:	e7e0      	b.n	800569e <USBD_StdDevReq+0x1e6>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056dc:	884b      	ldrh	r3, [r1, #2]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d000      	beq.n	80056e4 <USBD_StdDevReq+0x22c>
 80056e2:	e70d      	b.n	8005500 <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 80056e4:	22a9      	movs	r2, #169	; 0xa9
 80056e6:	0092      	lsls	r2, r2, #2
 80056e8:	50a3      	str	r3, [r4, r2]
 80056ea:	e734      	b.n	8005556 <USBD_StdDevReq+0x9e>
  switch (pdev->dev_state)
 80056ec:	23a7      	movs	r3, #167	; 0xa7
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	5ce3      	ldrb	r3, [r4, r3]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d900      	bls.n	80056fa <USBD_StdDevReq+0x242>
 80056f8:	e77c      	b.n	80055f4 <USBD_StdDevReq+0x13c>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056fa:	884b      	ldrh	r3, [r1, #2]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d000      	beq.n	8005702 <USBD_StdDevReq+0x24a>
 8005700:	e6fe      	b.n	8005500 <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 8005702:	23a9      	movs	r3, #169	; 0xa9
 8005704:	2200      	movs	r2, #0
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	50e2      	str	r2, [r4, r3]
 800570a:	e724      	b.n	8005556 <USBD_StdDevReq+0x9e>
 800570c:	0000029e 	.word	0x0000029e
 8005710:	2000078c 	.word	0x2000078c

08005714 <USBD_StdItfReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005714:	2260      	movs	r2, #96	; 0x60
 8005716:	780b      	ldrb	r3, [r1, #0]
{
 8005718:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800571a:	4013      	ands	r3, r2
{
 800571c:	0004      	movs	r4, r0
 800571e:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005720:	2b20      	cmp	r3, #32
 8005722:	d003      	beq.n	800572c <USBD_StdItfReq+0x18>
 8005724:	2b40      	cmp	r3, #64	; 0x40
 8005726:	d001      	beq.n	800572c <USBD_StdItfReq+0x18>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d119      	bne.n	8005760 <USBD_StdItfReq+0x4c>
      switch (pdev->dev_state)
 800572c:	23a7      	movs	r3, #167	; 0xa7
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	5ce3      	ldrb	r3, [r4, r3]
 8005732:	3b01      	subs	r3, #1
 8005734:	2b02      	cmp	r3, #2
 8005736:	d813      	bhi.n	8005760 <USBD_StdItfReq+0x4c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005738:	792b      	ldrb	r3, [r5, #4]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d810      	bhi.n	8005760 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800573e:	23ad      	movs	r3, #173	; 0xad
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	58e3      	ldr	r3, [r4, r3]
 8005744:	0029      	movs	r1, r5
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	0020      	movs	r0, r4
 800574a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800574c:	88eb      	ldrh	r3, [r5, #6]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d104      	bne.n	800575c <USBD_StdItfReq+0x48>
 8005752:	2800      	cmp	r0, #0
 8005754:	d102      	bne.n	800575c <USBD_StdItfReq+0x48>
              USBD_CtlSendStatus(pdev);
 8005756:	0020      	movs	r0, r4
 8005758:	f000 f902 	bl	8005960 <USBD_CtlSendStatus>
}
 800575c:	2000      	movs	r0, #0
 800575e:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8005760:	0020      	movs	r0, r4
 8005762:	f7ff fe9e 	bl	80054a2 <USBD_CtlError.constprop.1>
          break;
 8005766:	e7f9      	b.n	800575c <USBD_StdItfReq+0x48>

08005768 <USBD_StdEPReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005768:	780a      	ldrb	r2, [r1, #0]
{
 800576a:	000b      	movs	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800576c:	2160      	movs	r1, #96	; 0x60
{
 800576e:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005770:	400a      	ands	r2, r1
{
 8005772:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005774:	2a20      	cmp	r2, #32
 8005776:	d017      	beq.n	80057a8 <USBD_StdEPReq+0x40>
 8005778:	2a40      	cmp	r2, #64	; 0x40
 800577a:	d015      	beq.n	80057a8 <USBD_StdEPReq+0x40>
 800577c:	2a00      	cmp	r2, #0
 800577e:	d10f      	bne.n	80057a0 <USBD_StdEPReq+0x38>
  ep_addr  = LOBYTE(req->wIndex);
 8005780:	8898      	ldrh	r0, [r3, #4]
      switch (req->bRequest)
 8005782:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005784:	b2c1      	uxtb	r1, r0
      switch (req->bRequest)
 8005786:	2a01      	cmp	r2, #1
 8005788:	d026      	beq.n	80057d8 <USBD_StdEPReq+0x70>
 800578a:	2a00      	cmp	r2, #0
 800578c:	d03e      	beq.n	800580c <USBD_StdEPReq+0xa4>
 800578e:	2a03      	cmp	r2, #3
 8005790:	d106      	bne.n	80057a0 <USBD_StdEPReq+0x38>
          switch (pdev->dev_state)
 8005792:	22a7      	movs	r2, #167	; 0xa7
 8005794:	0092      	lsls	r2, r2, #2
 8005796:	5ca2      	ldrb	r2, [r4, r2]
 8005798:	2a02      	cmp	r2, #2
 800579a:	d02d      	beq.n	80057f8 <USBD_StdEPReq+0x90>
 800579c:	2a03      	cmp	r2, #3
 800579e:	d00c      	beq.n	80057ba <USBD_StdEPReq+0x52>
              USBD_CtlError(pdev, req);
 80057a0:	0020      	movs	r0, r4
 80057a2:	f7ff fe7e 	bl	80054a2 <USBD_CtlError.constprop.1>
              break;
 80057a6:	e006      	b.n	80057b6 <USBD_StdEPReq+0x4e>
      pdev->pClass->Setup(pdev, req);
 80057a8:	22ad      	movs	r2, #173	; 0xad
 80057aa:	0092      	lsls	r2, r2, #2
 80057ac:	58a2      	ldr	r2, [r4, r2]
 80057ae:	0019      	movs	r1, r3
 80057b0:	6892      	ldr	r2, [r2, #8]
 80057b2:	0020      	movs	r0, r4
 80057b4:	4790      	blx	r2
}
 80057b6:	2000      	movs	r0, #0
 80057b8:	bd70      	pop	{r4, r5, r6, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057ba:	885a      	ldrh	r2, [r3, #2]
 80057bc:	2a00      	cmp	r2, #0
 80057be:	d107      	bne.n	80057d0 <USBD_StdEPReq+0x68>
                if ((ep_addr != 0x00U) &&
 80057c0:	064a      	lsls	r2, r1, #25
 80057c2:	d005      	beq.n	80057d0 <USBD_StdEPReq+0x68>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057c4:	88db      	ldrh	r3, [r3, #6]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <USBD_StdEPReq+0x68>
                  USBD_LL_StallEP(pdev, ep_addr);
 80057ca:	0020      	movs	r0, r4
 80057cc:	f000 fc0a 	bl	8005fe4 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80057d0:	0020      	movs	r0, r4
 80057d2:	f000 f8c5 	bl	8005960 <USBD_CtlSendStatus>
              break;
 80057d6:	e7ee      	b.n	80057b6 <USBD_StdEPReq+0x4e>
          switch (pdev->dev_state)
 80057d8:	22a7      	movs	r2, #167	; 0xa7
 80057da:	0092      	lsls	r2, r2, #2
 80057dc:	5ca2      	ldrb	r2, [r4, r2]
 80057de:	2a02      	cmp	r2, #2
 80057e0:	d00a      	beq.n	80057f8 <USBD_StdEPReq+0x90>
 80057e2:	2a03      	cmp	r2, #3
 80057e4:	d1dc      	bne.n	80057a0 <USBD_StdEPReq+0x38>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057e6:	885b      	ldrh	r3, [r3, #2]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e4      	bne.n	80057b6 <USBD_StdEPReq+0x4e>
                if ((ep_addr & 0x7FU) != 0x00U)
 80057ec:	064b      	lsls	r3, r1, #25
 80057ee:	d0ef      	beq.n	80057d0 <USBD_StdEPReq+0x68>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80057f0:	0020      	movs	r0, r4
 80057f2:	f000 fc07 	bl	8006004 <USBD_LL_ClearStallEP>
 80057f6:	e7eb      	b.n	80057d0 <USBD_StdEPReq+0x68>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057f8:	064b      	lsls	r3, r1, #25
 80057fa:	d0d1      	beq.n	80057a0 <USBD_StdEPReq+0x38>
                USBD_LL_StallEP(pdev, ep_addr);
 80057fc:	0020      	movs	r0, r4
 80057fe:	f000 fbf1 	bl	8005fe4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005802:	2180      	movs	r1, #128	; 0x80
 8005804:	0020      	movs	r0, r4
 8005806:	f000 fbed 	bl	8005fe4 <USBD_LL_StallEP>
 800580a:	e7d4      	b.n	80057b6 <USBD_StdEPReq+0x4e>
          switch (pdev->dev_state)
 800580c:	23a7      	movs	r3, #167	; 0xa7
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	5ce3      	ldrb	r3, [r4, r3]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d017      	beq.n	8005846 <USBD_StdEPReq+0xde>
 8005816:	2b03      	cmp	r3, #3
 8005818:	d1c2      	bne.n	80057a0 <USBD_StdEPReq+0x38>
 800581a:	220f      	movs	r2, #15
 800581c:	2314      	movs	r3, #20
 800581e:	400a      	ands	r2, r1
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005820:	435a      	muls	r2, r3
 8005822:	18a2      	adds	r2, r4, r2
              if ((ep_addr & 0x80U) == 0x80U)
 8005824:	0600      	lsls	r0, r0, #24
 8005826:	d51e      	bpl.n	8005866 <USBD_StdEPReq+0xfe>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005828:	6992      	ldr	r2, [r2, #24]
 800582a:	2a00      	cmp	r2, #0
 800582c:	d0b8      	beq.n	80057a0 <USBD_StdEPReq+0x38>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800582e:	257f      	movs	r5, #127	; 0x7f
 8005830:	400d      	ands	r5, r1
 8005832:	3501      	adds	r5, #1
 8005834:	435d      	muls	r5, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005836:	237f      	movs	r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005838:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800583a:	400b      	ands	r3, r1
 800583c:	d11e      	bne.n	800587c <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 800583e:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005840:	2202      	movs	r2, #2
 8005842:	0029      	movs	r1, r5
 8005844:	e00b      	b.n	800585e <USBD_StdEPReq+0xf6>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005846:	064b      	lsls	r3, r1, #25
 8005848:	d1aa      	bne.n	80057a0 <USBD_StdEPReq+0x38>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800584a:	0021      	movs	r1, r4
 800584c:	3155      	adds	r1, #85	; 0x55
 800584e:	31ff      	adds	r1, #255	; 0xff
 8005850:	0603      	lsls	r3, r0, #24
 8005852:	d501      	bpl.n	8005858 <USBD_StdEPReq+0xf0>
 8005854:	3941      	subs	r1, #65	; 0x41
 8005856:	39ff      	subs	r1, #255	; 0xff
              pep->status = 0x0000U;
 8005858:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800585a:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 800585c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800585e:	0020      	movs	r0, r4
 8005860:	f000 f850 	bl	8005904 <USBD_CtlSendData>
              break;
 8005864:	e7a7      	b.n	80057b6 <USBD_StdEPReq+0x4e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005866:	32fc      	adds	r2, #252	; 0xfc
 8005868:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800586a:	2a00      	cmp	r2, #0
 800586c:	d100      	bne.n	8005870 <USBD_StdEPReq+0x108>
 800586e:	e797      	b.n	80057a0 <USBD_StdEPReq+0x38>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005870:	257f      	movs	r5, #127	; 0x7f
 8005872:	400d      	ands	r5, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005874:	435d      	muls	r5, r3
 8005876:	3555      	adds	r5, #85	; 0x55
 8005878:	35ff      	adds	r5, #255	; 0xff
 800587a:	e7dc      	b.n	8005836 <USBD_StdEPReq+0xce>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800587c:	0020      	movs	r0, r4
 800587e:	f000 fbd1 	bl	8006024 <USBD_LL_IsStallEP>
 8005882:	2800      	cmp	r0, #0
 8005884:	d001      	beq.n	800588a <USBD_StdEPReq+0x122>
                pep->status = 0x0001U;
 8005886:	2301      	movs	r3, #1
 8005888:	e7d9      	b.n	800583e <USBD_StdEPReq+0xd6>
                pep->status = 0x0000U;
 800588a:	6028      	str	r0, [r5, #0]
 800588c:	e7d8      	b.n	8005840 <USBD_StdEPReq+0xd8>

0800588e <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800588e:	780b      	ldrb	r3, [r1, #0]
 8005890:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005892:	784b      	ldrb	r3, [r1, #1]
 8005894:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005896:	78ca      	ldrb	r2, [r1, #3]
 8005898:	788b      	ldrb	r3, [r1, #2]
 800589a:	0212      	lsls	r2, r2, #8
 800589c:	189b      	adds	r3, r3, r2
 800589e:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80058a0:	794a      	ldrb	r2, [r1, #5]
 80058a2:	790b      	ldrb	r3, [r1, #4]
 80058a4:	0212      	lsls	r2, r2, #8
 80058a6:	189b      	adds	r3, r3, r2
 80058a8:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80058aa:	79ca      	ldrb	r2, [r1, #7]
 80058ac:	798b      	ldrb	r3, [r1, #6]
 80058ae:	0212      	lsls	r2, r2, #8
 80058b0:	189b      	adds	r3, r3, r2
 80058b2:	80c3      	strh	r3, [r0, #6]
}
 80058b4:	4770      	bx	lr

080058b6 <USBD_CtlError>:
{
 80058b6:	b510      	push	{r4, lr}
 80058b8:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80058ba:	2180      	movs	r1, #128	; 0x80
 80058bc:	f000 fb92 	bl	8005fe4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80058c0:	2100      	movs	r1, #0
 80058c2:	0020      	movs	r0, r4
 80058c4:	f000 fb8e 	bl	8005fe4 <USBD_LL_StallEP>
}
 80058c8:	bd10      	pop	{r4, pc}

080058ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80058ca:	2300      	movs	r3, #0
 80058cc:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80058ce:	4298      	cmp	r0, r3
 80058d0:	d101      	bne.n	80058d6 <USBD_GetString+0xc>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0U;
    }
  }
}
 80058d2:	bd30      	pop	{r4, r5, pc}
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80058d4:	002b      	movs	r3, r5
 80058d6:	5cc4      	ldrb	r4, [r0, r3]
 80058d8:	1c5d      	adds	r5, r3, #1
 80058da:	2c00      	cmp	r4, #0
 80058dc:	d1fa      	bne.n	80058d4 <USBD_GetString+0xa>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	3301      	adds	r3, #1
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80058e6:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80058e8:	2303      	movs	r3, #3
 80058ea:	704b      	strb	r3, [r1, #1]
 80058ec:	3b01      	subs	r3, #1
    while (*desc != '\0')
 80058ee:	7805      	ldrb	r5, [r0, #0]
 80058f0:	2d00      	cmp	r5, #0
 80058f2:	d0ee      	beq.n	80058d2 <USBD_GetString+0x8>
      unicode[idx++] = *desc++;
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	54cd      	strb	r5, [r1, r3]
 80058f8:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80058fa:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 80058fc:	3001      	adds	r0, #1
      unicode[idx++] =  0U;
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	548c      	strb	r4, [r1, r2]
 8005902:	e7f4      	b.n	80058ee <USBD_GetString+0x24>

08005904 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005904:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005906:	22a5      	movs	r2, #165	; 0xa5
{
 8005908:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800590a:	2402      	movs	r4, #2
 800590c:	0092      	lsls	r2, r2, #2
 800590e:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005910:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8005912:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8005914:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005916:	2100      	movs	r1, #0
 8005918:	f000 fba6 	bl	8006068 <USBD_LL_Transmit>

  return USBD_OK;
}
 800591c:	2000      	movs	r0, #0
 800591e:	bd10      	pop	{r4, pc}

08005920 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005920:	b510      	push	{r4, lr}
 8005922:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005924:	000a      	movs	r2, r1
 8005926:	2100      	movs	r1, #0
 8005928:	f000 fb9e 	bl	8006068 <USBD_LL_Transmit>

  return USBD_OK;
}
 800592c:	2000      	movs	r0, #0
 800592e:	bd10      	pop	{r4, pc}

08005930 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005930:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005932:	22a5      	movs	r2, #165	; 0xa5
{
 8005934:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005936:	2403      	movs	r4, #3
 8005938:	0092      	lsls	r2, r2, #2
 800593a:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 800593c:	0002      	movs	r2, r0
 800593e:	32fc      	adds	r2, #252	; 0xfc
 8005940:	6613      	str	r3, [r2, #96]	; 0x60
  pdev->ep_out[0].rem_length   = len;
 8005942:	6653      	str	r3, [r2, #100]	; 0x64

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005944:	000a      	movs	r2, r1
 8005946:	2100      	movs	r1, #0
 8005948:	f000 fb9e 	bl	8006088 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800594c:	2000      	movs	r0, #0
 800594e:	bd10      	pop	{r4, pc}

08005950 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005950:	b510      	push	{r4, lr}
 8005952:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005954:	000a      	movs	r2, r1
 8005956:	2100      	movs	r1, #0
 8005958:	f000 fb96 	bl	8006088 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800595c:	2000      	movs	r0, #0
 800595e:	bd10      	pop	{r4, pc}

08005960 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005960:	23a5      	movs	r3, #165	; 0xa5
 8005962:	2204      	movs	r2, #4
 8005964:	009b      	lsls	r3, r3, #2
{
 8005966:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005968:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800596a:	2300      	movs	r3, #0
 800596c:	001a      	movs	r2, r3
 800596e:	0019      	movs	r1, r3
 8005970:	f000 fb7a 	bl	8006068 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005974:	2000      	movs	r0, #0
 8005976:	bd10      	pop	{r4, pc}

08005978 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005978:	23a5      	movs	r3, #165	; 0xa5
 800597a:	2205      	movs	r2, #5
 800597c:	009b      	lsls	r3, r3, #2
{
 800597e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005980:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005982:	2300      	movs	r3, #0
 8005984:	001a      	movs	r2, r3
 8005986:	0019      	movs	r1, r3
 8005988:	f000 fb7e 	bl	8006088 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800598c:	2000      	movs	r0, #0
 800598e:	bd10      	pop	{r4, pc}

08005990 <MX_USB_DEVICE_Init>:
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==RESET))
 8005990:	2180      	movs	r1, #128	; 0x80
 8005992:	2090      	movs	r0, #144	; 0x90
{
 8005994:	b510      	push	{r4, lr}
	if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==RESET))
 8005996:	0049      	lsls	r1, r1, #1
 8005998:	05c0      	lsls	r0, r0, #23
 800599a:	f7fd fadd 	bl	8002f58 <HAL_GPIO_ReadPin>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d020      	beq.n	80059e4 <MX_USB_DEVICE_Init+0x54>
		return;
	}
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80059a2:	4c11      	ldr	r4, [pc, #68]	; (80059e8 <MX_USB_DEVICE_Init+0x58>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	4911      	ldr	r1, [pc, #68]	; (80059ec <MX_USB_DEVICE_Init+0x5c>)
 80059a8:	0020      	movs	r0, r4
 80059aa:	f7ff fbed 	bl	8005188 <USBD_Init>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d001      	beq.n	80059b6 <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 80059b2:	f7fc fa4d 	bl	8001e50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80059b6:	490e      	ldr	r1, [pc, #56]	; (80059f0 <MX_USB_DEVICE_Init+0x60>)
 80059b8:	0020      	movs	r0, r4
 80059ba:	f7ff fc14 	bl	80051e6 <USBD_RegisterClass>
 80059be:	2800      	cmp	r0, #0
 80059c0:	d001      	beq.n	80059c6 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 80059c2:	f7fc fa45 	bl	8001e50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80059c6:	490b      	ldr	r1, [pc, #44]	; (80059f4 <MX_USB_DEVICE_Init+0x64>)
 80059c8:	0020      	movs	r0, r4
 80059ca:	f7ff fb8e 	bl	80050ea <USBD_CDC_RegisterInterface>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d001      	beq.n	80059d6 <MX_USB_DEVICE_Init+0x46>
  {
    Error_Handler();
 80059d2:	f7fc fa3d 	bl	8001e50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80059d6:	0020      	movs	r0, r4
 80059d8:	f7ff fc0e 	bl	80051f8 <USBD_Start>
 80059dc:	2800      	cmp	r0, #0
 80059de:	d001      	beq.n	80059e4 <MX_USB_DEVICE_Init+0x54>
  {
    Error_Handler();
 80059e0:	f7fc fa36 	bl	8001e50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80059e4:	bd10      	pop	{r4, pc}
 80059e6:	46c0      	nop			; (mov r8, r8)
 80059e8:	20000b04 	.word	0x20000b04
 80059ec:	200002b0 	.word	0x200002b0
 80059f0:	20000018 	.word	0x20000018
 80059f4:	200002a0 	.word	0x200002a0

080059f8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
	/* USER CODE END 4 */
}
 80059f8:	2000      	movs	r0, #0
 80059fa:	4770      	bx	lr

080059fc <CDC_Control_FS>:
		break;
	}

	return (USBD_OK);
	/* USER CODE END 5 */
}
 80059fc:	2000      	movs	r0, #0
 80059fe:	4770      	bx	lr

08005a00 <CDC_Init_FS>:
{
 8005a00:	b510      	push	{r4, lr}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005a02:	4c06      	ldr	r4, [pc, #24]	; (8005a1c <CDC_Init_FS+0x1c>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	4906      	ldr	r1, [pc, #24]	; (8005a20 <CDC_Init_FS+0x20>)
 8005a08:	0020      	movs	r0, r4
 8005a0a:	f7ff fb77 	bl	80050fc <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005a0e:	4905      	ldr	r1, [pc, #20]	; (8005a24 <CDC_Init_FS+0x24>)
 8005a10:	0020      	movs	r0, r4
 8005a12:	f7ff fb7e 	bl	8005112 <USBD_CDC_SetRxBuffer>
}
 8005a16:	2000      	movs	r0, #0
 8005a18:	bd10      	pop	{r4, pc}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	20000b04 	.word	0x20000b04
 8005a20:	20000e91 	.word	0x20000e91
 8005a24:	20000dc9 	.word	0x20000dc9

08005a28 <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 8005a28:	000a      	movs	r2, r1
	uint8_t result = USBD_OK;
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8005a2a:	21ae      	movs	r1, #174	; 0xae
{
 8005a2c:	b510      	push	{r4, lr}
	USBD_CDC_HandleTypeDef *hcdc =
 8005a2e:	4c08      	ldr	r4, [pc, #32]	; (8005a50 <CDC_Transmit_FS+0x28>)
 8005a30:	0089      	lsls	r1, r1, #2
{
 8005a32:	0003      	movs	r3, r0
	USBD_CDC_HandleTypeDef *hcdc =
 8005a34:	5860      	ldr	r0, [r4, r1]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0)
 8005a36:	39a4      	subs	r1, #164	; 0xa4
 8005a38:	5841      	ldr	r1, [r0, r1]
	{
		return USBD_BUSY;
 8005a3a:	2001      	movs	r0, #1
	if (hcdc->TxState != 0)
 8005a3c:	2900      	cmp	r1, #0
 8005a3e:	d106      	bne.n	8005a4e <CDC_Transmit_FS+0x26>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005a40:	0019      	movs	r1, r3
 8005a42:	0020      	movs	r0, r4
 8005a44:	f7ff fb5a 	bl	80050fc <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005a48:	0020      	movs	r0, r4
 8005a4a:	f7ff fb69 	bl	8005120 <USBD_CDC_TransmitPacket>
	/* USER CODE END 7 */
	return result;
}
 8005a4e:	bd10      	pop	{r4, pc}
 8005a50:	20000b04 	.word	0x20000b04

08005a54 <CDC_Receive_FS>:
{
 8005a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a56:	0004      	movs	r4, r0
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005a58:	4d8b      	ldr	r5, [pc, #556]	; (8005c88 <CDC_Receive_FS+0x234>)
 8005a5a:	0001      	movs	r1, r0
{
 8005a5c:	b087      	sub	sp, #28
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005a5e:	0028      	movs	r0, r5
 8005a60:	f7ff fb57 	bl	8005112 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005a64:	0028      	movs	r0, r5
 8005a66:	f7ff fb77 	bl	8005158 <USBD_CDC_ReceivePacket>
	if (Buf[0] == 0b00000001 || Buf[0] == 'q' || Buf[0] == 'Q')
 8005a6a:	7823      	ldrb	r3, [r4, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d005      	beq.n	8005a7c <CDC_Receive_FS+0x28>
 8005a70:	2220      	movs	r2, #32
 8005a72:	0019      	movs	r1, r3
 8005a74:	4391      	bics	r1, r2
 8005a76:	2951      	cmp	r1, #81	; 0x51
 8005a78:	d000      	beq.n	8005a7c <CDC_Receive_FS+0x28>
 8005a7a:	e0af      	b.n	8005bdc <CDC_Receive_FS+0x188>
		HAL_GPIO_WritePin(PWR1_GPIO_Port, PWR1_Pin, RESET);
 8005a7c:	2180      	movs	r1, #128	; 0x80
 8005a7e:	2200      	movs	r2, #0
 8005a80:	0209      	lsls	r1, r1, #8
		HAL_GPIO_WritePin(PWR6_GPIO_Port, PWR6_Pin, RESET);
 8005a82:	4882      	ldr	r0, [pc, #520]	; (8005c8c <CDC_Receive_FS+0x238>)
 8005a84:	f7fd fa6e 	bl	8002f64 <HAL_GPIO_WritePin>
		CDC_Transmit_FS((uint8_t*) buf, 8);
 8005a88:	2108      	movs	r1, #8
 8005a8a:	4881      	ldr	r0, [pc, #516]	; (8005c90 <CDC_Receive_FS+0x23c>)
 8005a8c:	f7ff ffcc 	bl	8005a28 <CDC_Transmit_FS>
	if (Buf[0] == 0b00000001 || Buf[0] == 'z' || Buf[0] == 'Z')
 8005a90:	7823      	ldrb	r3, [r4, #0]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d005      	beq.n	8005aa2 <CDC_Receive_FS+0x4e>
 8005a96:	2220      	movs	r2, #32
 8005a98:	0019      	movs	r1, r3
 8005a9a:	4391      	bics	r1, r2
 8005a9c:	295a      	cmp	r1, #90	; 0x5a
 8005a9e:	d000      	beq.n	8005aa2 <CDC_Receive_FS+0x4e>
 8005aa0:	e0c5      	b.n	8005c2e <CDC_Receive_FS+0x1da>
		HAL_GPIO_WritePin(PWR1_GPIO_Port, PWR1_Pin, SET);
 8005aa2:	2180      	movs	r1, #128	; 0x80
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	0209      	lsls	r1, r1, #8
		HAL_GPIO_WritePin(PWR2_GPIO_Port, PWR2_Pin, SET);
 8005aa8:	4878      	ldr	r0, [pc, #480]	; (8005c8c <CDC_Receive_FS+0x238>)
 8005aaa:	f7fd fa5b 	bl	8002f64 <HAL_GPIO_WritePin>
		CDC_Transmit_FS((uint8_t*) buf, 8);
 8005aae:	2108      	movs	r1, #8
 8005ab0:	4877      	ldr	r0, [pc, #476]	; (8005c90 <CDC_Receive_FS+0x23c>)
 8005ab2:	f7ff ffb9 	bl	8005a28 <CDC_Transmit_FS>
	if (Buf[0] == 0b00111111 || Buf[0] == 0b11111111 || Buf[0] == 'a'
 8005ab6:	7823      	ldrb	r3, [r4, #0]
 8005ab8:	2b3f      	cmp	r3, #63	; 0x3f
 8005aba:	d005      	beq.n	8005ac8 <CDC_Receive_FS+0x74>
 8005abc:	2bff      	cmp	r3, #255	; 0xff
 8005abe:	d003      	beq.n	8005ac8 <CDC_Receive_FS+0x74>
			|| Buf[0] == 'A')
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	4393      	bics	r3, r2
 8005ac4:	2b41      	cmp	r3, #65	; 0x41
 8005ac6:	d109      	bne.n	8005adc <CDC_Receive_FS+0x88>
		HAL_GPIO_WritePin(GPIOB, 0xFC00, RESET);
 8005ac8:	21fc      	movs	r1, #252	; 0xfc
 8005aca:	4870      	ldr	r0, [pc, #448]	; (8005c8c <CDC_Receive_FS+0x238>)
 8005acc:	0209      	lsls	r1, r1, #8
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f7fd fa48 	bl	8002f64 <HAL_GPIO_WritePin>
		CDC_Transmit_FS((uint8_t*) buf, 8);
 8005ad4:	2108      	movs	r1, #8
 8005ad6:	486e      	ldr	r0, [pc, #440]	; (8005c90 <CDC_Receive_FS+0x23c>)
 8005ad8:	f7ff ffa6 	bl	8005a28 <CDC_Transmit_FS>
	if (Buf[0] == 0x00 || Buf[0] == 's' || Buf[0] == 'S')
 8005adc:	7823      	ldrb	r3, [r4, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <CDC_Receive_FS+0x96>
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	4393      	bics	r3, r2
 8005ae6:	2b53      	cmp	r3, #83	; 0x53
 8005ae8:	d109      	bne.n	8005afe <CDC_Receive_FS+0xaa>
		HAL_GPIO_WritePin(GPIOB, 0xFC00, SET);
 8005aea:	21fc      	movs	r1, #252	; 0xfc
 8005aec:	4867      	ldr	r0, [pc, #412]	; (8005c8c <CDC_Receive_FS+0x238>)
 8005aee:	0209      	lsls	r1, r1, #8
 8005af0:	2201      	movs	r2, #1
 8005af2:	f7fd fa37 	bl	8002f64 <HAL_GPIO_WritePin>
		CDC_Transmit_FS((uint8_t*) buf, 8);
 8005af6:	2108      	movs	r1, #8
 8005af8:	4865      	ldr	r0, [pc, #404]	; (8005c90 <CDC_Receive_FS+0x23c>)
 8005afa:	f7ff ff95 	bl	8005a28 <CDC_Transmit_FS>
	if (Buf[0] == 'P' || Buf[0] == 'p')
 8005afe:	2220      	movs	r2, #32
 8005b00:	7823      	ldrb	r3, [r4, #0]
 8005b02:	4393      	bics	r3, r2
 8005b04:	2b50      	cmp	r3, #80	; 0x50
 8005b06:	d108      	bne.n	8005b1a <CDC_Receive_FS+0xc6>
		pstat = ((GPIOB->IDR & LL_GPIO_PIN_15) >> 10)  & 0x3f;
 8005b08:	4b60      	ldr	r3, [pc, #384]	; (8005c8c <CDC_Receive_FS+0x238>)
		CDC_Transmit_FS((uint8_t*) pstat, 30);
 8005b0a:	211e      	movs	r1, #30
		pstat = ((GPIOB->IDR & LL_GPIO_PIN_15) >> 10)  & 0x3f;
 8005b0c:	6918      	ldr	r0, [r3, #16]
 8005b0e:	4b61      	ldr	r3, [pc, #388]	; (8005c94 <CDC_Receive_FS+0x240>)
 8005b10:	0a80      	lsrs	r0, r0, #10
 8005b12:	4010      	ands	r0, r2
 8005b14:	7018      	strb	r0, [r3, #0]
		CDC_Transmit_FS((uint8_t*) pstat, 30);
 8005b16:	f7ff ff87 	bl	8005a28 <CDC_Transmit_FS>
	if (Buf[0] == 'm' || Buf[0] == 'M')
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	7823      	ldrb	r3, [r4, #0]
 8005b1e:	4393      	bics	r3, r2
 8005b20:	2b4d      	cmp	r3, #77	; 0x4d
 8005b22:	d107      	bne.n	8005b34 <CDC_Receive_FS+0xe0>
		CDC_Transmit_FS((uint8_t*) Manual, strlen(Manual));
 8005b24:	4d5c      	ldr	r5, [pc, #368]	; (8005c98 <CDC_Receive_FS+0x244>)
 8005b26:	0028      	movs	r0, r5
 8005b28:	f7fa faee 	bl	8000108 <strlen>
 8005b2c:	b281      	uxth	r1, r0
 8005b2e:	0028      	movs	r0, r5
 8005b30:	f7ff ff7a 	bl	8005a28 <CDC_Transmit_FS>
	if (Buf[0] == 'i' || Buf[0] == 'I')
 8005b34:	2220      	movs	r2, #32
 8005b36:	7823      	ldrb	r3, [r4, #0]
 8005b38:	4393      	bics	r3, r2
 8005b3a:	2b49      	cmp	r3, #73	; 0x49
 8005b3c:	d102      	bne.n	8005b44 <CDC_Receive_FS+0xf0>
		action = 1;
 8005b3e:	4b57      	ldr	r3, [pc, #348]	; (8005c9c <CDC_Receive_FS+0x248>)
 8005b40:	3a1f      	subs	r2, #31
 8005b42:	701a      	strb	r2, [r3, #0]
	if (Buf[0] == 'k' || Buf[0] == 'K') // View Voltage
 8005b44:	2220      	movs	r2, #32
 8005b46:	7823      	ldrb	r3, [r4, #0]
 8005b48:	4393      	bics	r3, r2
 8005b4a:	2b4b      	cmp	r3, #75	; 0x4b
 8005b4c:	d143      	bne.n	8005bd6 <CDC_Receive_FS+0x182>
		int btmp = _bresult * 10;
 8005b4e:	4b54      	ldr	r3, [pc, #336]	; (8005ca0 <CDC_Receive_FS+0x24c>)
 8005b50:	4954      	ldr	r1, [pc, #336]	; (8005ca4 <CDC_Receive_FS+0x250>)
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	f7fa fcc6 	bl	80004e4 <__aeabi_fmul>
 8005b58:	f7fa fdf6 	bl	8000748 <__aeabi_f2iz>
		int ctmp = _cresult * 10;
 8005b5c:	4b52      	ldr	r3, [pc, #328]	; (8005ca8 <CDC_Receive_FS+0x254>)
		int btmp = _bresult * 10;
 8005b5e:	0005      	movs	r5, r0
		int ctmp = _cresult * 10;
 8005b60:	4950      	ldr	r1, [pc, #320]	; (8005ca4 <CDC_Receive_FS+0x250>)
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	f7fa fcbe 	bl	80004e4 <__aeabi_fmul>
 8005b68:	f7fa fdee 	bl	8000748 <__aeabi_f2iz>
				(btmp % 100) / 10, btmp % 10, ctmp / 100, (ctmp % 100) / 10,
 8005b6c:	2164      	movs	r1, #100	; 0x64
		int ctmp = _cresult * 10;
 8005b6e:	0006      	movs	r6, r0
				(btmp % 100) / 10, btmp % 10, ctmp / 100, (ctmp % 100) / 10,
 8005b70:	0028      	movs	r0, r5
 8005b72:	f7fa fc55 	bl	8000420 <__aeabi_idivmod>
 8005b76:	0008      	movs	r0, r1
		sprintf(buf, "bat : %d%d.%d :: cap : %d%d.%d\r\n", btmp / 100,
 8005b78:	210a      	movs	r1, #10
 8005b7a:	f7fa fb6b 	bl	8000254 <__divsi3>
 8005b7e:	2164      	movs	r1, #100	; 0x64
 8005b80:	0007      	movs	r7, r0
 8005b82:	0028      	movs	r0, r5
 8005b84:	f7fa fb66 	bl	8000254 <__divsi3>
 8005b88:	210a      	movs	r1, #10
 8005b8a:	9005      	str	r0, [sp, #20]
 8005b8c:	0030      	movs	r0, r6
 8005b8e:	f7fa fc47 	bl	8000420 <__aeabi_idivmod>
				(btmp % 100) / 10, btmp % 10, ctmp / 100, (ctmp % 100) / 10,
 8005b92:	0030      	movs	r0, r6
		sprintf(buf, "bat : %d%d.%d :: cap : %d%d.%d\r\n", btmp / 100,
 8005b94:	9103      	str	r1, [sp, #12]
				(btmp % 100) / 10, btmp % 10, ctmp / 100, (ctmp % 100) / 10,
 8005b96:	2164      	movs	r1, #100	; 0x64
 8005b98:	f7fa fc42 	bl	8000420 <__aeabi_idivmod>
 8005b9c:	0008      	movs	r0, r1
		sprintf(buf, "bat : %d%d.%d :: cap : %d%d.%d\r\n", btmp / 100,
 8005b9e:	210a      	movs	r1, #10
 8005ba0:	f7fa fb58 	bl	8000254 <__divsi3>
 8005ba4:	2164      	movs	r1, #100	; 0x64
 8005ba6:	9002      	str	r0, [sp, #8]
 8005ba8:	0030      	movs	r0, r6
 8005baa:	f7fa fb53 	bl	8000254 <__divsi3>
 8005bae:	210a      	movs	r1, #10
 8005bb0:	9001      	str	r0, [sp, #4]
 8005bb2:	0028      	movs	r0, r5
 8005bb4:	f7fa fc34 	bl	8000420 <__aeabi_idivmod>
 8005bb8:	4c35      	ldr	r4, [pc, #212]	; (8005c90 <CDC_Receive_FS+0x23c>)
 8005bba:	9100      	str	r1, [sp, #0]
 8005bbc:	003b      	movs	r3, r7
 8005bbe:	493b      	ldr	r1, [pc, #236]	; (8005cac <CDC_Receive_FS+0x258>)
 8005bc0:	9a05      	ldr	r2, [sp, #20]
 8005bc2:	0020      	movs	r0, r4
 8005bc4:	f000 faba 	bl	800613c <siprintf>
		CDC_Transmit_FS((uint8_t*) buf, strlen(buf));
 8005bc8:	0020      	movs	r0, r4
 8005bca:	f7fa fa9d 	bl	8000108 <strlen>
 8005bce:	b281      	uxth	r1, r0
 8005bd0:	0020      	movs	r0, r4
 8005bd2:	f7ff ff29 	bl	8005a28 <CDC_Transmit_FS>
}
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	b007      	add	sp, #28
 8005bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (Buf[0] == 0b00000010 || Buf[0] == 'w' || Buf[0] == 'W')
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d001      	beq.n	8005be4 <CDC_Receive_FS+0x190>
 8005be0:	2957      	cmp	r1, #87	; 0x57
 8005be2:	d103      	bne.n	8005bec <CDC_Receive_FS+0x198>
		HAL_GPIO_WritePin(PWR2_GPIO_Port, PWR2_Pin, RESET);
 8005be4:	2180      	movs	r1, #128	; 0x80
 8005be6:	2200      	movs	r2, #0
 8005be8:	01c9      	lsls	r1, r1, #7
 8005bea:	e74a      	b.n	8005a82 <CDC_Receive_FS+0x2e>
	else if (Buf[0] == 0b00000100 || Buf[0] == 'e' || Buf[0] == 'E')
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d001      	beq.n	8005bf4 <CDC_Receive_FS+0x1a0>
 8005bf0:	2945      	cmp	r1, #69	; 0x45
 8005bf2:	d103      	bne.n	8005bfc <CDC_Receive_FS+0x1a8>
		HAL_GPIO_WritePin(PWR3_GPIO_Port, PWR3_Pin, RESET);
 8005bf4:	2180      	movs	r1, #128	; 0x80
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	0189      	lsls	r1, r1, #6
 8005bfa:	e742      	b.n	8005a82 <CDC_Receive_FS+0x2e>
	else if (Buf[0] == 0b00001000 || Buf[0] == 'r' || Buf[0] == 'R')
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d001      	beq.n	8005c04 <CDC_Receive_FS+0x1b0>
 8005c00:	2952      	cmp	r1, #82	; 0x52
 8005c02:	d103      	bne.n	8005c0c <CDC_Receive_FS+0x1b8>
		HAL_GPIO_WritePin(PWR4_GPIO_Port, PWR4_Pin, RESET);
 8005c04:	2180      	movs	r1, #128	; 0x80
 8005c06:	2200      	movs	r2, #0
 8005c08:	0149      	lsls	r1, r1, #5
 8005c0a:	e73a      	b.n	8005a82 <CDC_Receive_FS+0x2e>
	else if (Buf[0] == 0b00010000 || Buf[0] == 't' || Buf[0] == 'T')
 8005c0c:	2b10      	cmp	r3, #16
 8005c0e:	d001      	beq.n	8005c14 <CDC_Receive_FS+0x1c0>
 8005c10:	2954      	cmp	r1, #84	; 0x54
 8005c12:	d103      	bne.n	8005c1c <CDC_Receive_FS+0x1c8>
		HAL_GPIO_WritePin(PWR5_GPIO_Port, PWR5_Pin, RESET);
 8005c14:	2180      	movs	r1, #128	; 0x80
 8005c16:	2200      	movs	r2, #0
 8005c18:	0109      	lsls	r1, r1, #4
 8005c1a:	e732      	b.n	8005a82 <CDC_Receive_FS+0x2e>
	else if (Buf[0] == 0b00100000 || Buf[0] == 'y' || Buf[0] == 'Y')
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d002      	beq.n	8005c26 <CDC_Receive_FS+0x1d2>
 8005c20:	2959      	cmp	r1, #89	; 0x59
 8005c22:	d000      	beq.n	8005c26 <CDC_Receive_FS+0x1d2>
 8005c24:	e734      	b.n	8005a90 <CDC_Receive_FS+0x3c>
		HAL_GPIO_WritePin(PWR6_GPIO_Port, PWR6_Pin, RESET);
 8005c26:	2180      	movs	r1, #128	; 0x80
 8005c28:	2200      	movs	r2, #0
 8005c2a:	00c9      	lsls	r1, r1, #3
 8005c2c:	e729      	b.n	8005a82 <CDC_Receive_FS+0x2e>
	else if (Buf[0] == 0b00000010 || Buf[0] == 'x' || Buf[0] == 'X')
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d001      	beq.n	8005c36 <CDC_Receive_FS+0x1e2>
 8005c32:	2958      	cmp	r1, #88	; 0x58
 8005c34:	d103      	bne.n	8005c3e <CDC_Receive_FS+0x1ea>
		HAL_GPIO_WritePin(PWR2_GPIO_Port, PWR2_Pin, SET);
 8005c36:	2180      	movs	r1, #128	; 0x80
 8005c38:	2201      	movs	r2, #1
 8005c3a:	01c9      	lsls	r1, r1, #7
 8005c3c:	e734      	b.n	8005aa8 <CDC_Receive_FS+0x54>
	else if (Buf[0] == 0b00000100 || Buf[0] == 'c' || Buf[0] == 'C')
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d001      	beq.n	8005c46 <CDC_Receive_FS+0x1f2>
 8005c42:	2943      	cmp	r1, #67	; 0x43
 8005c44:	d103      	bne.n	8005c4e <CDC_Receive_FS+0x1fa>
		HAL_GPIO_WritePin(PWR3_GPIO_Port, PWR3_Pin, SET);
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	2201      	movs	r2, #1
 8005c4a:	0189      	lsls	r1, r1, #6
 8005c4c:	e72c      	b.n	8005aa8 <CDC_Receive_FS+0x54>
	else if (Buf[0] == 0b00001000 || Buf[0] == 'v' || Buf[0] == 'V')
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d001      	beq.n	8005c56 <CDC_Receive_FS+0x202>
 8005c52:	2956      	cmp	r1, #86	; 0x56
 8005c54:	d103      	bne.n	8005c5e <CDC_Receive_FS+0x20a>
		HAL_GPIO_WritePin(PWR4_GPIO_Port, PWR4_Pin, SET);
 8005c56:	2180      	movs	r1, #128	; 0x80
 8005c58:	2201      	movs	r2, #1
 8005c5a:	0149      	lsls	r1, r1, #5
 8005c5c:	e724      	b.n	8005aa8 <CDC_Receive_FS+0x54>
	else if (Buf[0] == 0b00010000 || Buf[0] == 'b' || Buf[0] == 'B')
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d001      	beq.n	8005c66 <CDC_Receive_FS+0x212>
 8005c62:	2942      	cmp	r1, #66	; 0x42
 8005c64:	d103      	bne.n	8005c6e <CDC_Receive_FS+0x21a>
		HAL_GPIO_WritePin(PWR5_GPIO_Port, PWR5_Pin, SET);
 8005c66:	2180      	movs	r1, #128	; 0x80
 8005c68:	2201      	movs	r2, #1
 8005c6a:	0109      	lsls	r1, r1, #4
 8005c6c:	e71c      	b.n	8005aa8 <CDC_Receive_FS+0x54>
	else if (Buf[0] == 0b00100000 || Buf[0] == 'n' || Buf[0] == 'N')
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d002      	beq.n	8005c78 <CDC_Receive_FS+0x224>
 8005c72:	294e      	cmp	r1, #78	; 0x4e
 8005c74:	d000      	beq.n	8005c78 <CDC_Receive_FS+0x224>
 8005c76:	e71e      	b.n	8005ab6 <CDC_Receive_FS+0x62>
		HAL_GPIO_WritePin(PWR6_GPIO_Port, PWR6_Pin, SET);
 8005c78:	2180      	movs	r1, #128	; 0x80
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	00c9      	lsls	r1, r1, #3
 8005c7e:	4803      	ldr	r0, [pc, #12]	; (8005c8c <CDC_Receive_FS+0x238>)
 8005c80:	f7fd f970 	bl	8002f64 <HAL_GPIO_WritePin>
 8005c84:	e717      	b.n	8005ab6 <CDC_Receive_FS+0x62>
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	20000b04 	.word	0x20000b04
 8005c8c:	48000400 	.word	0x48000400
 8005c90:	20000f59 	.word	0x20000f59
 8005c94:	20000dc8 	.word	0x20000dc8
 8005c98:	20000127 	.word	0x20000127
 8005c9c:	2000078d 	.word	0x2000078d
 8005ca0:	20000a1c 	.word	0x20000a1c
 8005ca4:	41200000 	.word	0x41200000
 8005ca8:	20000a04 	.word	0x20000a04
 8005cac:	080077a2 	.word	0x080077a2

08005cb0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005cb0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005cb2:	4801      	ldr	r0, [pc, #4]	; (8005cb8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005cb4:	800b      	strh	r3, [r1, #0]
}
 8005cb6:	4770      	bx	lr
 8005cb8:	200002cc 	.word	0x200002cc

08005cbc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005cbc:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005cbe:	4801      	ldr	r0, [pc, #4]	; (8005cc4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005cc0:	800b      	strh	r3, [r1, #0]
}
 8005cc2:	4770      	bx	lr
 8005cc4:	200002e0 	.word	0x200002e0

08005cc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005cc8:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005cca:	2500      	movs	r5, #0
 8005ccc:	3a01      	subs	r2, #1
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	0052      	lsls	r2, r2, #1
 8005cd2:	1c8b      	adds	r3, r1, #2
 8005cd4:	18d2      	adds	r2, r2, r3
    if (((value >> 28)) < 0xA)
 8005cd6:	0f04      	lsrs	r4, r0, #28
 8005cd8:	b2e3      	uxtb	r3, r4
 8005cda:	2c09      	cmp	r4, #9
 8005cdc:	d807      	bhi.n	8005cee <IntToUnicode+0x26>
      pbuf[2 * idx] = (value >> 28) + '0';
 8005cde:	3330      	adds	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005ce0:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8005ce2:	704d      	strb	r5, [r1, #1]
 8005ce4:	3102      	adds	r1, #2
    value = value << 4;
 8005ce6:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 8005ce8:	428a      	cmp	r2, r1
 8005cea:	d1f4      	bne.n	8005cd6 <IntToUnicode+0xe>
  }
}
 8005cec:	bd30      	pop	{r4, r5, pc}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005cee:	3337      	adds	r3, #55	; 0x37
 8005cf0:	e7f6      	b.n	8005ce0 <IntToUnicode+0x18>
	...

08005cf4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8005cf4:	231a      	movs	r3, #26
{
 8005cf6:	b570      	push	{r4, r5, r6, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005cf8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005cfa:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <USBD_FS_SerialStrDescriptor+0x34>)
 8005cfc:	4c0b      	ldr	r4, [pc, #44]	; (8005d2c <USBD_FS_SerialStrDescriptor+0x38>)
 8005cfe:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <USBD_FS_SerialStrDescriptor+0x3c>)
  deviceserial0 += deviceserial2;
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d00b      	beq.n	8005d22 <USBD_FS_SerialStrDescriptor+0x2e>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <USBD_FS_SerialStrDescriptor+0x40>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005d0c:	1ca1      	adds	r1, r4, #2
 8005d0e:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005d10:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005d12:	f7ff ffd9 	bl	8005cc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005d16:	0021      	movs	r1, r4
 8005d18:	2204      	movs	r2, #4
 8005d1a:	3112      	adds	r1, #18
 8005d1c:	0028      	movs	r0, r5
 8005d1e:	f7ff ffd3 	bl	8005cc8 <IntToUnicode>
}
 8005d22:	0020      	movs	r0, r4
 8005d24:	bd70      	pop	{r4, r5, r6, pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	1ffff7ac 	.word	0x1ffff7ac
 8005d2c:	200002e4 	.word	0x200002e4
 8005d30:	1ffff7b4 	.word	0x1ffff7b4
 8005d34:	1ffff7b0 	.word	0x1ffff7b0

08005d38 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005d38:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005d3a:	4c04      	ldr	r4, [pc, #16]	; (8005d4c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8005d3c:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005d3e:	4804      	ldr	r0, [pc, #16]	; (8005d50 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005d40:	0021      	movs	r1, r4
 8005d42:	f7ff fdc2 	bl	80058ca <USBD_GetString>
}
 8005d46:	0020      	movs	r0, r4
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	20000f70 	.word	0x20000f70
 8005d50:	080077dc 	.word	0x080077dc

08005d54 <USBD_FS_ProductStrDescriptor>:
{
 8005d54:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d56:	4c04      	ldr	r4, [pc, #16]	; (8005d68 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8005d58:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005d5a:	4804      	ldr	r0, [pc, #16]	; (8005d6c <USBD_FS_ProductStrDescriptor+0x18>)
 8005d5c:	0021      	movs	r1, r4
 8005d5e:	f7ff fdb4 	bl	80058ca <USBD_GetString>
}
 8005d62:	0020      	movs	r0, r4
 8005d64:	bd10      	pop	{r4, pc}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	20000f70 	.word	0x20000f70
 8005d6c:	080077e6 	.word	0x080077e6

08005d70 <USBD_FS_ConfigStrDescriptor>:
{
 8005d70:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005d72:	4c04      	ldr	r4, [pc, #16]	; (8005d84 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8005d74:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005d76:	4804      	ldr	r0, [pc, #16]	; (8005d88 <USBD_FS_ConfigStrDescriptor+0x18>)
 8005d78:	0021      	movs	r1, r4
 8005d7a:	f7ff fda6 	bl	80058ca <USBD_GetString>
}
 8005d7e:	0020      	movs	r0, r4
 8005d80:	bd10      	pop	{r4, pc}
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	20000f70 	.word	0x20000f70
 8005d88:	080077c3 	.word	0x080077c3

08005d8c <USBD_FS_InterfaceStrDescriptor>:
{
 8005d8c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005d8e:	4c04      	ldr	r4, [pc, #16]	; (8005da0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8005d90:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005d92:	4804      	ldr	r0, [pc, #16]	; (8005da4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8005d94:	0021      	movs	r1, r4
 8005d96:	f7ff fd98 	bl	80058ca <USBD_GetString>
}
 8005d9a:	0020      	movs	r0, r4
 8005d9c:	bd10      	pop	{r4, pc}
 8005d9e:	46c0      	nop			; (mov r8, r8)
 8005da0:	20000f70 	.word	0x20000f70
 8005da4:	080077ce 	.word	0x080077ce

08005da8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005da8:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8005daa:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <HAL_PCD_MspInit+0x30>)
 8005dac:	6802      	ldr	r2, [r0, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d111      	bne.n	8005dd6 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005db2:	2080      	movs	r0, #128	; 0x80
 8005db4:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <HAL_PCD_MspInit+0x34>)
 8005db6:	0400      	lsls	r0, r0, #16
 8005db8:	69d1      	ldr	r1, [r2, #28]
 8005dba:	4301      	orrs	r1, r0
 8005dbc:	61d1      	str	r1, [r2, #28]
 8005dbe:	69d3      	ldr	r3, [r2, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005dc0:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8005dc2:	4003      	ands	r3, r0
 8005dc4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005dc6:	201f      	movs	r0, #31
 8005dc8:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8005dca:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005dcc:	f7fc fe64 	bl	8002a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8005dd0:	201f      	movs	r0, #31
 8005dd2:	f7fc fe8b 	bl	8002aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005dd6:	bd07      	pop	{r0, r1, r2, pc}
 8005dd8:	40005c00 	.word	0x40005c00
 8005ddc:	40021000 	.word	0x40021000

08005de0 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8005de0:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <HAL_PCD_MspDeInit+0x1c>)
 8005de2:	6802      	ldr	r2, [r0, #0]
{
 8005de4:	b510      	push	{r4, lr}
  if(pcdHandle->Instance==USB)
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d107      	bne.n	8005dfa <HAL_PCD_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN USB_MspDeInit 0 */

  /* USER CODE END USB_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_CLK_DISABLE();
 8005dea:	4a05      	ldr	r2, [pc, #20]	; (8005e00 <HAL_PCD_MspDeInit+0x20>)
 8005dec:	4905      	ldr	r1, [pc, #20]	; (8005e04 <HAL_PCD_MspDeInit+0x24>)
 8005dee:	69d3      	ldr	r3, [r2, #28]

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(USB_IRQn);
 8005df0:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_DISABLE();
 8005df2:	400b      	ands	r3, r1
 8005df4:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(USB_IRQn);
 8005df6:	f7fc fe85 	bl	8002b04 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_MspDeInit 1 */

  /* USER CODE END USB_MspDeInit 1 */
  }
}
 8005dfa:	bd10      	pop	{r4, pc}
 8005dfc:	40005c00 	.word	0x40005c00
 8005e00:	40021000 	.word	0x40021000
 8005e04:	ff7fffff 	.word	0xff7fffff

08005e08 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005e08:	238c      	movs	r3, #140	; 0x8c
{
 8005e0a:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	18c1      	adds	r1, r0, r3
 8005e10:	3340      	adds	r3, #64	; 0x40
 8005e12:	58c0      	ldr	r0, [r0, r3]
 8005e14:	f7ff fa18 	bl	8005248 <USBD_LL_SetupStage>
}
 8005e18:	bd10      	pop	{r4, pc}

08005e1a <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005e1a:	014b      	lsls	r3, r1, #5
 8005e1c:	18c3      	adds	r3, r0, r3
 8005e1e:	33fc      	adds	r3, #252	; 0xfc
 8005e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e22:	239c      	movs	r3, #156	; 0x9c
{
 8005e24:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	58c0      	ldr	r0, [r0, r3]
 8005e2a:	f7ff fa3f 	bl	80052ac <USBD_LL_DataOutStage>
}
 8005e2e:	bd10      	pop	{r4, pc}

08005e30 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005e30:	014b      	lsls	r3, r1, #5
 8005e32:	18c3      	adds	r3, r0, r3
 8005e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e36:	239c      	movs	r3, #156	; 0x9c
{
 8005e38:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	58c0      	ldr	r0, [r0, r3]
 8005e3e:	f7ff fa79 	bl	8005334 <USBD_LL_DataInStage>
}
 8005e42:	bd10      	pop	{r4, pc}

08005e44 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005e44:	239c      	movs	r3, #156	; 0x9c
{
 8005e46:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	58c0      	ldr	r0, [r0, r3]
 8005e4c:	f7ff fb1a 	bl	8005484 <USBD_LL_SOF>
}
 8005e50:	bd10      	pop	{r4, pc}

08005e52 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005e52:	6883      	ldr	r3, [r0, #8]
{
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d001      	beq.n	8005e60 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8005e5c:	f7fb fff8 	bl	8001e50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005e60:	259c      	movs	r5, #156	; 0x9c
 8005e62:	00ad      	lsls	r5, r5, #2
 8005e64:	2101      	movs	r1, #1
 8005e66:	5960      	ldr	r0, [r4, r5]
 8005e68:	f7ff faf1 	bl	800544e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005e6c:	5960      	ldr	r0, [r4, r5]
 8005e6e:	f7ff fac4 	bl	80053fa <USBD_LL_Reset>
}
 8005e72:	bd70      	pop	{r4, r5, r6, pc}

08005e74 <HAL_PCD_SuspendCallback>:
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005e74:	239c      	movs	r3, #156	; 0x9c
{
 8005e76:	b510      	push	{r4, lr}
 8005e78:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	58c0      	ldr	r0, [r0, r3]
 8005e7e:	f7ff fae9 	bl	8005454 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005e82:	69a3      	ldr	r3, [r4, #24]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005e88:	2306      	movs	r3, #6
 8005e8a:	4a02      	ldr	r2, [pc, #8]	; (8005e94 <HAL_PCD_SuspendCallback+0x20>)
 8005e8c:	6911      	ldr	r1, [r2, #16]
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005e92:	bd10      	pop	{r4, pc}
 8005e94:	e000ed00 	.word	0xe000ed00

08005e98 <HAL_PCD_ResumeCallback>:
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8005e98:	6983      	ldr	r3, [r0, #24]
{
 8005e9a:	b510      	push	{r4, lr}
 8005e9c:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d006      	beq.n	8005eb0 <HAL_PCD_ResumeCallback+0x18>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005ea2:	2106      	movs	r1, #6
 8005ea4:	4a05      	ldr	r2, [pc, #20]	; (8005ebc <HAL_PCD_ResumeCallback+0x24>)
 8005ea6:	6913      	ldr	r3, [r2, #16]
 8005ea8:	438b      	bics	r3, r1
 8005eaa:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8005eac:	f7fb fce8 	bl	8001880 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005eb0:	239c      	movs	r3, #156	; 0x9c
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	58e0      	ldr	r0, [r4, r3]
 8005eb6:	f7ff fad9 	bl	800546c <USBD_LL_Resume>
}
 8005eba:	bd10      	pop	{r4, pc}
 8005ebc:	e000ed00 	.word	0xe000ed00

08005ec0 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8005ec0:	239c      	movs	r3, #156	; 0x9c
{
 8005ec2:	b570      	push	{r4, r5, r6, lr}
 8005ec4:	0005      	movs	r5, r0
  hpcd_USB_FS.pData = pdev;
 8005ec6:	481c      	ldr	r0, [pc, #112]	; (8005f38 <USBD_LL_Init+0x78>)
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	50c5      	str	r5, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 8005ecc:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <USBD_LL_Init+0x7c>)
  pdev->pData = &hpcd_USB_FS;
 8005ece:	24b0      	movs	r4, #176	; 0xb0
  hpcd_USB_FS.Instance = USB;
 8005ed0:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005ed2:	2308      	movs	r3, #8
 8005ed4:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005ed6:	3b06      	subs	r3, #6
 8005ed8:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005eda:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005edc:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8005ede:	00a4      	lsls	r4, r4, #2
 8005ee0:	5128      	str	r0, [r5, r4]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005ee2:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005ee4:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005ee6:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005ee8:	f7fd fd48 	bl	800397c <HAL_PCD_Init>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d001      	beq.n	8005ef4 <USBD_LL_Init+0x34>
    Error_Handler( );
 8005ef0:	f7fb ffae 	bl	8001e50 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	5928      	ldr	r0, [r5, r4]
 8005ef8:	0011      	movs	r1, r2
 8005efa:	2318      	movs	r3, #24
 8005efc:	f7fe f937 	bl	800416e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005f00:	5928      	ldr	r0, [r5, r4]
 8005f02:	2358      	movs	r3, #88	; 0x58
 8005f04:	2200      	movs	r2, #0
 8005f06:	2180      	movs	r1, #128	; 0x80
 8005f08:	f7fe f931 	bl	800416e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005f0c:	5928      	ldr	r0, [r5, r4]
 8005f0e:	23c0      	movs	r3, #192	; 0xc0
 8005f10:	2200      	movs	r2, #0
 8005f12:	2181      	movs	r1, #129	; 0x81
 8005f14:	f7fe f92b 	bl	800416e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005f18:	2388      	movs	r3, #136	; 0x88
 8005f1a:	5928      	ldr	r0, [r5, r4]
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2101      	movs	r1, #1
 8005f22:	f7fe f924 	bl	800416e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005f26:	2380      	movs	r3, #128	; 0x80
 8005f28:	5928      	ldr	r0, [r5, r4]
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2182      	movs	r1, #130	; 0x82
 8005f30:	f7fe f91d 	bl	800416e <HAL_PCDEx_PMAConfig>
}
 8005f34:	2000      	movs	r0, #0
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	20001170 	.word	0x20001170
 8005f3c:	40005c00 	.word	0x40005c00

08005f40 <USBD_LL_DeInit>:
  hal_status = HAL_PCD_DeInit(pdev->pData);
 8005f40:	23b0      	movs	r3, #176	; 0xb0
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	58c0      	ldr	r0, [r0, r3]
{
 8005f46:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_DeInit(pdev->pData);
 8005f48:	f7fd fda0 	bl	8003a8c <HAL_PCD_DeInit>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	2803      	cmp	r0, #3
 8005f50:	d801      	bhi.n	8005f56 <USBD_LL_DeInit+0x16>
 8005f52:	4b02      	ldr	r3, [pc, #8]	; (8005f5c <USBD_LL_DeInit+0x1c>)
 8005f54:	5c1b      	ldrb	r3, [r3, r0]
}
 8005f56:	0018      	movs	r0, r3
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	46c0      	nop			; (mov r8, r8)
 8005f5c:	080077f3 	.word	0x080077f3

08005f60 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8005f60:	23b0      	movs	r3, #176	; 0xb0
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	58c0      	ldr	r0, [r0, r3]
{
 8005f66:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005f68:	f7fd fd6a 	bl	8003a40 <HAL_PCD_Start>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	2803      	cmp	r0, #3
 8005f70:	d801      	bhi.n	8005f76 <USBD_LL_Start+0x16>
 8005f72:	4b02      	ldr	r3, [pc, #8]	; (8005f7c <USBD_LL_Start+0x1c>)
 8005f74:	5c1b      	ldrb	r3, [r3, r0]
}
 8005f76:	0018      	movs	r0, r3
 8005f78:	bd10      	pop	{r4, pc}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	080077f3 	.word	0x080077f3

08005f80 <USBD_LL_Stop>:
  hal_status = HAL_PCD_Stop(pdev->pData);
 8005f80:	23b0      	movs	r3, #176	; 0xb0
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	58c0      	ldr	r0, [r0, r3]
{
 8005f86:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8005f88:	f7fd fd6d 	bl	8003a66 <HAL_PCD_Stop>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	2803      	cmp	r0, #3
 8005f90:	d801      	bhi.n	8005f96 <USBD_LL_Stop+0x16>
 8005f92:	4b02      	ldr	r3, [pc, #8]	; (8005f9c <USBD_LL_Stop+0x1c>)
 8005f94:	5c1b      	ldrb	r3, [r3, r0]
}
 8005f96:	0018      	movs	r0, r3
 8005f98:	bd10      	pop	{r4, pc}
 8005f9a:	46c0      	nop			; (mov r8, r8)
 8005f9c:	080077f3 	.word	0x080077f3

08005fa0 <USBD_LL_OpenEP>:
{
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	0014      	movs	r4, r2
 8005fa4:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005fa6:	0023      	movs	r3, r4
 8005fa8:	24b0      	movs	r4, #176	; 0xb0
 8005faa:	00a4      	lsls	r4, r4, #2
 8005fac:	5900      	ldr	r0, [r0, r4]
 8005fae:	f7fd fda3 	bl	8003af8 <HAL_PCD_EP_Open>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	2803      	cmp	r0, #3
 8005fb6:	d801      	bhi.n	8005fbc <USBD_LL_OpenEP+0x1c>
 8005fb8:	4b01      	ldr	r3, [pc, #4]	; (8005fc0 <USBD_LL_OpenEP+0x20>)
 8005fba:	5c1b      	ldrb	r3, [r3, r0]
}
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	bd10      	pop	{r4, pc}
 8005fc0:	080077f3 	.word	0x080077f3

08005fc4 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005fc4:	23b0      	movs	r3, #176	; 0xb0
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	58c0      	ldr	r0, [r0, r3]
{
 8005fca:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005fcc:	f7fd fdc4 	bl	8003b58 <HAL_PCD_EP_Close>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	2803      	cmp	r0, #3
 8005fd4:	d801      	bhi.n	8005fda <USBD_LL_CloseEP+0x16>
 8005fd6:	4b02      	ldr	r3, [pc, #8]	; (8005fe0 <USBD_LL_CloseEP+0x1c>)
 8005fd8:	5c1b      	ldrb	r3, [r3, r0]
}
 8005fda:	0018      	movs	r0, r3
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	080077f3 	.word	0x080077f3

08005fe4 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005fe4:	23b0      	movs	r3, #176	; 0xb0
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	58c0      	ldr	r0, [r0, r3]
{
 8005fea:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005fec:	f7fe f85e 	bl	80040ac <HAL_PCD_EP_SetStall>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	2803      	cmp	r0, #3
 8005ff4:	d801      	bhi.n	8005ffa <USBD_LL_StallEP+0x16>
 8005ff6:	4b02      	ldr	r3, [pc, #8]	; (8006000 <USBD_LL_StallEP+0x1c>)
 8005ff8:	5c1b      	ldrb	r3, [r3, r0]
}
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	bd10      	pop	{r4, pc}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	080077f3 	.word	0x080077f3

08006004 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006004:	23b0      	movs	r3, #176	; 0xb0
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	58c0      	ldr	r0, [r0, r3]
{
 800600a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800600c:	f7fe f883 	bl	8004116 <HAL_PCD_EP_ClrStall>
 8006010:	2302      	movs	r3, #2
 8006012:	2803      	cmp	r0, #3
 8006014:	d801      	bhi.n	800601a <USBD_LL_ClearStallEP+0x16>
 8006016:	4b02      	ldr	r3, [pc, #8]	; (8006020 <USBD_LL_ClearStallEP+0x1c>)
 8006018:	5c1b      	ldrb	r3, [r3, r0]
}
 800601a:	0018      	movs	r0, r3
 800601c:	bd10      	pop	{r4, pc}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	080077f3 	.word	0x080077f3

08006024 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006024:	23b0      	movs	r3, #176	; 0xb0
  if((ep_addr & 0x80) == 0x80)
 8006026:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 800602c:	2a00      	cmp	r2, #0
 800602e:	da06      	bge.n	800603e <USBD_LL_IsStallEP+0x1a>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006030:	227f      	movs	r2, #127	; 0x7f
 8006032:	4011      	ands	r1, r2
 8006034:	0149      	lsls	r1, r1, #5
 8006036:	185b      	adds	r3, r3, r1
 8006038:	332a      	adds	r3, #42	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800603a:	7818      	ldrb	r0, [r3, #0]
}
 800603c:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800603e:	0149      	lsls	r1, r1, #5
 8006040:	185b      	adds	r3, r3, r1
 8006042:	332b      	adds	r3, #43	; 0x2b
 8006044:	33ff      	adds	r3, #255	; 0xff
 8006046:	e7f8      	b.n	800603a <USBD_LL_IsStallEP+0x16>

08006048 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006048:	23b0      	movs	r3, #176	; 0xb0
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	58c0      	ldr	r0, [r0, r3]
{
 800604e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006050:	f7fd fd40 	bl	8003ad4 <HAL_PCD_SetAddress>
 8006054:	2302      	movs	r3, #2
 8006056:	2803      	cmp	r0, #3
 8006058:	d801      	bhi.n	800605e <USBD_LL_SetUSBAddress+0x16>
 800605a:	4b02      	ldr	r3, [pc, #8]	; (8006064 <USBD_LL_SetUSBAddress+0x1c>)
 800605c:	5c1b      	ldrb	r3, [r3, r0]
}
 800605e:	0018      	movs	r0, r3
 8006060:	bd10      	pop	{r4, pc}
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	080077f3 	.word	0x080077f3

08006068 <USBD_LL_Transmit>:
{
 8006068:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800606a:	24b0      	movs	r4, #176	; 0xb0
 800606c:	00a4      	lsls	r4, r4, #2
 800606e:	5900      	ldr	r0, [r0, r4]
 8006070:	f7fd fdb8 	bl	8003be4 <HAL_PCD_EP_Transmit>
 8006074:	2302      	movs	r3, #2
 8006076:	2803      	cmp	r0, #3
 8006078:	d801      	bhi.n	800607e <USBD_LL_Transmit+0x16>
 800607a:	4b02      	ldr	r3, [pc, #8]	; (8006084 <USBD_LL_Transmit+0x1c>)
 800607c:	5c1b      	ldrb	r3, [r3, r0]
}
 800607e:	0018      	movs	r0, r3
 8006080:	bd10      	pop	{r4, pc}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	080077f3 	.word	0x080077f3

08006088 <USBD_LL_PrepareReceive>:
{
 8006088:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800608a:	24b0      	movs	r4, #176	; 0xb0
 800608c:	00a4      	lsls	r4, r4, #2
 800608e:	5900      	ldr	r0, [r0, r4]
 8006090:	f7fd fd86 	bl	8003ba0 <HAL_PCD_EP_Receive>
 8006094:	2302      	movs	r3, #2
 8006096:	2803      	cmp	r0, #3
 8006098:	d801      	bhi.n	800609e <USBD_LL_PrepareReceive+0x16>
 800609a:	4b02      	ldr	r3, [pc, #8]	; (80060a4 <USBD_LL_PrepareReceive+0x1c>)
 800609c:	5c1b      	ldrb	r3, [r3, r0]
}
 800609e:	0018      	movs	r0, r3
 80060a0:	bd10      	pop	{r4, pc}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	080077f3 	.word	0x080077f3

080060a8 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80060a8:	23b0      	movs	r3, #176	; 0xb0
{
 80060aa:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	58c0      	ldr	r0, [r0, r3]
 80060b0:	f7fd fd91 	bl	8003bd6 <HAL_PCD_EP_GetRxCount>
}
 80060b4:	bd10      	pop	{r4, pc}
	...

080060b8 <USBD_static_malloc>:
}
 80060b8:	4800      	ldr	r0, [pc, #0]	; (80060bc <USBD_static_malloc+0x4>)
 80060ba:	4770      	bx	lr
 80060bc:	20000790 	.word	0x20000790

080060c0 <USBD_static_free>:
}
 80060c0:	4770      	bx	lr
	...

080060c4 <__errno>:
 80060c4:	4b01      	ldr	r3, [pc, #4]	; (80060cc <__errno+0x8>)
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	4770      	bx	lr
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	20000300 	.word	0x20000300

080060d0 <__libc_init_array>:
 80060d0:	b570      	push	{r4, r5, r6, lr}
 80060d2:	2600      	movs	r6, #0
 80060d4:	4d0c      	ldr	r5, [pc, #48]	; (8006108 <__libc_init_array+0x38>)
 80060d6:	4c0d      	ldr	r4, [pc, #52]	; (800610c <__libc_init_array+0x3c>)
 80060d8:	1b64      	subs	r4, r4, r5
 80060da:	10a4      	asrs	r4, r4, #2
 80060dc:	42a6      	cmp	r6, r4
 80060de:	d109      	bne.n	80060f4 <__libc_init_array+0x24>
 80060e0:	2600      	movs	r6, #0
 80060e2:	f000 fc29 	bl	8006938 <_init>
 80060e6:	4d0a      	ldr	r5, [pc, #40]	; (8006110 <__libc_init_array+0x40>)
 80060e8:	4c0a      	ldr	r4, [pc, #40]	; (8006114 <__libc_init_array+0x44>)
 80060ea:	1b64      	subs	r4, r4, r5
 80060ec:	10a4      	asrs	r4, r4, #2
 80060ee:	42a6      	cmp	r6, r4
 80060f0:	d105      	bne.n	80060fe <__libc_init_array+0x2e>
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	00b3      	lsls	r3, r6, #2
 80060f6:	58eb      	ldr	r3, [r5, r3]
 80060f8:	4798      	blx	r3
 80060fa:	3601      	adds	r6, #1
 80060fc:	e7ee      	b.n	80060dc <__libc_init_array+0xc>
 80060fe:	00b3      	lsls	r3, r6, #2
 8006100:	58eb      	ldr	r3, [r5, r3]
 8006102:	4798      	blx	r3
 8006104:	3601      	adds	r6, #1
 8006106:	e7f2      	b.n	80060ee <__libc_init_array+0x1e>
 8006108:	0800782c 	.word	0x0800782c
 800610c:	0800782c 	.word	0x0800782c
 8006110:	0800782c 	.word	0x0800782c
 8006114:	08007830 	.word	0x08007830

08006118 <memcpy>:
 8006118:	2300      	movs	r3, #0
 800611a:	b510      	push	{r4, lr}
 800611c:	429a      	cmp	r2, r3
 800611e:	d100      	bne.n	8006122 <memcpy+0xa>
 8006120:	bd10      	pop	{r4, pc}
 8006122:	5ccc      	ldrb	r4, [r1, r3]
 8006124:	54c4      	strb	r4, [r0, r3]
 8006126:	3301      	adds	r3, #1
 8006128:	e7f8      	b.n	800611c <memcpy+0x4>

0800612a <memset>:
 800612a:	0003      	movs	r3, r0
 800612c:	1812      	adds	r2, r2, r0
 800612e:	4293      	cmp	r3, r2
 8006130:	d100      	bne.n	8006134 <memset+0xa>
 8006132:	4770      	bx	lr
 8006134:	7019      	strb	r1, [r3, #0]
 8006136:	3301      	adds	r3, #1
 8006138:	e7f9      	b.n	800612e <memset+0x4>
	...

0800613c <siprintf>:
 800613c:	b40e      	push	{r1, r2, r3}
 800613e:	b500      	push	{lr}
 8006140:	490b      	ldr	r1, [pc, #44]	; (8006170 <siprintf+0x34>)
 8006142:	b09c      	sub	sp, #112	; 0x70
 8006144:	ab1d      	add	r3, sp, #116	; 0x74
 8006146:	9002      	str	r0, [sp, #8]
 8006148:	9006      	str	r0, [sp, #24]
 800614a:	9107      	str	r1, [sp, #28]
 800614c:	9104      	str	r1, [sp, #16]
 800614e:	4809      	ldr	r0, [pc, #36]	; (8006174 <siprintf+0x38>)
 8006150:	4909      	ldr	r1, [pc, #36]	; (8006178 <siprintf+0x3c>)
 8006152:	cb04      	ldmia	r3!, {r2}
 8006154:	9105      	str	r1, [sp, #20]
 8006156:	6800      	ldr	r0, [r0, #0]
 8006158:	a902      	add	r1, sp, #8
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	f000 f870 	bl	8006240 <_svfiprintf_r>
 8006160:	2300      	movs	r3, #0
 8006162:	9a02      	ldr	r2, [sp, #8]
 8006164:	7013      	strb	r3, [r2, #0]
 8006166:	b01c      	add	sp, #112	; 0x70
 8006168:	bc08      	pop	{r3}
 800616a:	b003      	add	sp, #12
 800616c:	4718      	bx	r3
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	7fffffff 	.word	0x7fffffff
 8006174:	20000300 	.word	0x20000300
 8006178:	ffff0208 	.word	0xffff0208

0800617c <__ssputs_r>:
 800617c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800617e:	688e      	ldr	r6, [r1, #8]
 8006180:	b085      	sub	sp, #20
 8006182:	0007      	movs	r7, r0
 8006184:	000c      	movs	r4, r1
 8006186:	9203      	str	r2, [sp, #12]
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	429e      	cmp	r6, r3
 800618c:	d83c      	bhi.n	8006208 <__ssputs_r+0x8c>
 800618e:	2390      	movs	r3, #144	; 0x90
 8006190:	898a      	ldrh	r2, [r1, #12]
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	421a      	tst	r2, r3
 8006196:	d034      	beq.n	8006202 <__ssputs_r+0x86>
 8006198:	2503      	movs	r5, #3
 800619a:	6909      	ldr	r1, [r1, #16]
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	1a5b      	subs	r3, r3, r1
 80061a0:	9302      	str	r3, [sp, #8]
 80061a2:	6963      	ldr	r3, [r4, #20]
 80061a4:	9802      	ldr	r0, [sp, #8]
 80061a6:	435d      	muls	r5, r3
 80061a8:	0feb      	lsrs	r3, r5, #31
 80061aa:	195d      	adds	r5, r3, r5
 80061ac:	9b01      	ldr	r3, [sp, #4]
 80061ae:	106d      	asrs	r5, r5, #1
 80061b0:	3301      	adds	r3, #1
 80061b2:	181b      	adds	r3, r3, r0
 80061b4:	42ab      	cmp	r3, r5
 80061b6:	d900      	bls.n	80061ba <__ssputs_r+0x3e>
 80061b8:	001d      	movs	r5, r3
 80061ba:	0553      	lsls	r3, r2, #21
 80061bc:	d532      	bpl.n	8006224 <__ssputs_r+0xa8>
 80061be:	0029      	movs	r1, r5
 80061c0:	0038      	movs	r0, r7
 80061c2:	f000 fb19 	bl	80067f8 <_malloc_r>
 80061c6:	1e06      	subs	r6, r0, #0
 80061c8:	d109      	bne.n	80061de <__ssputs_r+0x62>
 80061ca:	230c      	movs	r3, #12
 80061cc:	603b      	str	r3, [r7, #0]
 80061ce:	2340      	movs	r3, #64	; 0x40
 80061d0:	2001      	movs	r0, #1
 80061d2:	89a2      	ldrh	r2, [r4, #12]
 80061d4:	4240      	negs	r0, r0
 80061d6:	4313      	orrs	r3, r2
 80061d8:	81a3      	strh	r3, [r4, #12]
 80061da:	b005      	add	sp, #20
 80061dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061de:	9a02      	ldr	r2, [sp, #8]
 80061e0:	6921      	ldr	r1, [r4, #16]
 80061e2:	f7ff ff99 	bl	8006118 <memcpy>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	4a14      	ldr	r2, [pc, #80]	; (800623c <__ssputs_r+0xc0>)
 80061ea:	401a      	ands	r2, r3
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	4313      	orrs	r3, r2
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	9b02      	ldr	r3, [sp, #8]
 80061f4:	6126      	str	r6, [r4, #16]
 80061f6:	18f6      	adds	r6, r6, r3
 80061f8:	6026      	str	r6, [r4, #0]
 80061fa:	6165      	str	r5, [r4, #20]
 80061fc:	9e01      	ldr	r6, [sp, #4]
 80061fe:	1aed      	subs	r5, r5, r3
 8006200:	60a5      	str	r5, [r4, #8]
 8006202:	9b01      	ldr	r3, [sp, #4]
 8006204:	429e      	cmp	r6, r3
 8006206:	d900      	bls.n	800620a <__ssputs_r+0x8e>
 8006208:	9e01      	ldr	r6, [sp, #4]
 800620a:	0032      	movs	r2, r6
 800620c:	9903      	ldr	r1, [sp, #12]
 800620e:	6820      	ldr	r0, [r4, #0]
 8006210:	f000 fa95 	bl	800673e <memmove>
 8006214:	68a3      	ldr	r3, [r4, #8]
 8006216:	2000      	movs	r0, #0
 8006218:	1b9b      	subs	r3, r3, r6
 800621a:	60a3      	str	r3, [r4, #8]
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	199e      	adds	r6, r3, r6
 8006220:	6026      	str	r6, [r4, #0]
 8006222:	e7da      	b.n	80061da <__ssputs_r+0x5e>
 8006224:	002a      	movs	r2, r5
 8006226:	0038      	movs	r0, r7
 8006228:	f000 fb44 	bl	80068b4 <_realloc_r>
 800622c:	1e06      	subs	r6, r0, #0
 800622e:	d1e0      	bne.n	80061f2 <__ssputs_r+0x76>
 8006230:	6921      	ldr	r1, [r4, #16]
 8006232:	0038      	movs	r0, r7
 8006234:	f000 fa96 	bl	8006764 <_free_r>
 8006238:	e7c7      	b.n	80061ca <__ssputs_r+0x4e>
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	fffffb7f 	.word	0xfffffb7f

08006240 <_svfiprintf_r>:
 8006240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006242:	b0a1      	sub	sp, #132	; 0x84
 8006244:	9003      	str	r0, [sp, #12]
 8006246:	001d      	movs	r5, r3
 8006248:	898b      	ldrh	r3, [r1, #12]
 800624a:	000f      	movs	r7, r1
 800624c:	0016      	movs	r6, r2
 800624e:	061b      	lsls	r3, r3, #24
 8006250:	d511      	bpl.n	8006276 <_svfiprintf_r+0x36>
 8006252:	690b      	ldr	r3, [r1, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10e      	bne.n	8006276 <_svfiprintf_r+0x36>
 8006258:	2140      	movs	r1, #64	; 0x40
 800625a:	f000 facd 	bl	80067f8 <_malloc_r>
 800625e:	6038      	str	r0, [r7, #0]
 8006260:	6138      	str	r0, [r7, #16]
 8006262:	2800      	cmp	r0, #0
 8006264:	d105      	bne.n	8006272 <_svfiprintf_r+0x32>
 8006266:	230c      	movs	r3, #12
 8006268:	9a03      	ldr	r2, [sp, #12]
 800626a:	3801      	subs	r0, #1
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	b021      	add	sp, #132	; 0x84
 8006270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006272:	2340      	movs	r3, #64	; 0x40
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	2300      	movs	r3, #0
 8006278:	ac08      	add	r4, sp, #32
 800627a:	6163      	str	r3, [r4, #20]
 800627c:	3320      	adds	r3, #32
 800627e:	7663      	strb	r3, [r4, #25]
 8006280:	3310      	adds	r3, #16
 8006282:	76a3      	strb	r3, [r4, #26]
 8006284:	9507      	str	r5, [sp, #28]
 8006286:	0035      	movs	r5, r6
 8006288:	782b      	ldrb	r3, [r5, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <_svfiprintf_r+0x52>
 800628e:	2b25      	cmp	r3, #37	; 0x25
 8006290:	d146      	bne.n	8006320 <_svfiprintf_r+0xe0>
 8006292:	1bab      	subs	r3, r5, r6
 8006294:	9305      	str	r3, [sp, #20]
 8006296:	d00c      	beq.n	80062b2 <_svfiprintf_r+0x72>
 8006298:	0032      	movs	r2, r6
 800629a:	0039      	movs	r1, r7
 800629c:	9803      	ldr	r0, [sp, #12]
 800629e:	f7ff ff6d 	bl	800617c <__ssputs_r>
 80062a2:	1c43      	adds	r3, r0, #1
 80062a4:	d100      	bne.n	80062a8 <_svfiprintf_r+0x68>
 80062a6:	e0ae      	b.n	8006406 <_svfiprintf_r+0x1c6>
 80062a8:	6962      	ldr	r2, [r4, #20]
 80062aa:	9b05      	ldr	r3, [sp, #20]
 80062ac:	4694      	mov	ip, r2
 80062ae:	4463      	add	r3, ip
 80062b0:	6163      	str	r3, [r4, #20]
 80062b2:	782b      	ldrb	r3, [r5, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d100      	bne.n	80062ba <_svfiprintf_r+0x7a>
 80062b8:	e0a5      	b.n	8006406 <_svfiprintf_r+0x1c6>
 80062ba:	2201      	movs	r2, #1
 80062bc:	2300      	movs	r3, #0
 80062be:	4252      	negs	r2, r2
 80062c0:	6062      	str	r2, [r4, #4]
 80062c2:	a904      	add	r1, sp, #16
 80062c4:	3254      	adds	r2, #84	; 0x54
 80062c6:	1852      	adds	r2, r2, r1
 80062c8:	1c6e      	adds	r6, r5, #1
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	60e3      	str	r3, [r4, #12]
 80062ce:	60a3      	str	r3, [r4, #8]
 80062d0:	7013      	strb	r3, [r2, #0]
 80062d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80062d4:	7831      	ldrb	r1, [r6, #0]
 80062d6:	2205      	movs	r2, #5
 80062d8:	4853      	ldr	r0, [pc, #332]	; (8006428 <_svfiprintf_r+0x1e8>)
 80062da:	f000 fa25 	bl	8006728 <memchr>
 80062de:	1c75      	adds	r5, r6, #1
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d11f      	bne.n	8006324 <_svfiprintf_r+0xe4>
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	06d3      	lsls	r3, r2, #27
 80062e8:	d504      	bpl.n	80062f4 <_svfiprintf_r+0xb4>
 80062ea:	2353      	movs	r3, #83	; 0x53
 80062ec:	a904      	add	r1, sp, #16
 80062ee:	185b      	adds	r3, r3, r1
 80062f0:	2120      	movs	r1, #32
 80062f2:	7019      	strb	r1, [r3, #0]
 80062f4:	0713      	lsls	r3, r2, #28
 80062f6:	d504      	bpl.n	8006302 <_svfiprintf_r+0xc2>
 80062f8:	2353      	movs	r3, #83	; 0x53
 80062fa:	a904      	add	r1, sp, #16
 80062fc:	185b      	adds	r3, r3, r1
 80062fe:	212b      	movs	r1, #43	; 0x2b
 8006300:	7019      	strb	r1, [r3, #0]
 8006302:	7833      	ldrb	r3, [r6, #0]
 8006304:	2b2a      	cmp	r3, #42	; 0x2a
 8006306:	d016      	beq.n	8006336 <_svfiprintf_r+0xf6>
 8006308:	0035      	movs	r5, r6
 800630a:	2100      	movs	r1, #0
 800630c:	200a      	movs	r0, #10
 800630e:	68e3      	ldr	r3, [r4, #12]
 8006310:	782a      	ldrb	r2, [r5, #0]
 8006312:	1c6e      	adds	r6, r5, #1
 8006314:	3a30      	subs	r2, #48	; 0x30
 8006316:	2a09      	cmp	r2, #9
 8006318:	d94e      	bls.n	80063b8 <_svfiprintf_r+0x178>
 800631a:	2900      	cmp	r1, #0
 800631c:	d018      	beq.n	8006350 <_svfiprintf_r+0x110>
 800631e:	e010      	b.n	8006342 <_svfiprintf_r+0x102>
 8006320:	3501      	adds	r5, #1
 8006322:	e7b1      	b.n	8006288 <_svfiprintf_r+0x48>
 8006324:	4b40      	ldr	r3, [pc, #256]	; (8006428 <_svfiprintf_r+0x1e8>)
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	1ac0      	subs	r0, r0, r3
 800632a:	2301      	movs	r3, #1
 800632c:	4083      	lsls	r3, r0
 800632e:	4313      	orrs	r3, r2
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	002e      	movs	r6, r5
 8006334:	e7ce      	b.n	80062d4 <_svfiprintf_r+0x94>
 8006336:	9b07      	ldr	r3, [sp, #28]
 8006338:	1d19      	adds	r1, r3, #4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	9107      	str	r1, [sp, #28]
 800633e:	2b00      	cmp	r3, #0
 8006340:	db01      	blt.n	8006346 <_svfiprintf_r+0x106>
 8006342:	930b      	str	r3, [sp, #44]	; 0x2c
 8006344:	e004      	b.n	8006350 <_svfiprintf_r+0x110>
 8006346:	425b      	negs	r3, r3
 8006348:	60e3      	str	r3, [r4, #12]
 800634a:	2302      	movs	r3, #2
 800634c:	4313      	orrs	r3, r2
 800634e:	6023      	str	r3, [r4, #0]
 8006350:	782b      	ldrb	r3, [r5, #0]
 8006352:	2b2e      	cmp	r3, #46	; 0x2e
 8006354:	d10a      	bne.n	800636c <_svfiprintf_r+0x12c>
 8006356:	786b      	ldrb	r3, [r5, #1]
 8006358:	2b2a      	cmp	r3, #42	; 0x2a
 800635a:	d135      	bne.n	80063c8 <_svfiprintf_r+0x188>
 800635c:	9b07      	ldr	r3, [sp, #28]
 800635e:	3502      	adds	r5, #2
 8006360:	1d1a      	adds	r2, r3, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	9207      	str	r2, [sp, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	db2b      	blt.n	80063c2 <_svfiprintf_r+0x182>
 800636a:	9309      	str	r3, [sp, #36]	; 0x24
 800636c:	4e2f      	ldr	r6, [pc, #188]	; (800642c <_svfiprintf_r+0x1ec>)
 800636e:	7829      	ldrb	r1, [r5, #0]
 8006370:	2203      	movs	r2, #3
 8006372:	0030      	movs	r0, r6
 8006374:	f000 f9d8 	bl	8006728 <memchr>
 8006378:	2800      	cmp	r0, #0
 800637a:	d006      	beq.n	800638a <_svfiprintf_r+0x14a>
 800637c:	2340      	movs	r3, #64	; 0x40
 800637e:	1b80      	subs	r0, r0, r6
 8006380:	4083      	lsls	r3, r0
 8006382:	6822      	ldr	r2, [r4, #0]
 8006384:	3501      	adds	r5, #1
 8006386:	4313      	orrs	r3, r2
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	7829      	ldrb	r1, [r5, #0]
 800638c:	2206      	movs	r2, #6
 800638e:	4828      	ldr	r0, [pc, #160]	; (8006430 <_svfiprintf_r+0x1f0>)
 8006390:	1c6e      	adds	r6, r5, #1
 8006392:	7621      	strb	r1, [r4, #24]
 8006394:	f000 f9c8 	bl	8006728 <memchr>
 8006398:	2800      	cmp	r0, #0
 800639a:	d03c      	beq.n	8006416 <_svfiprintf_r+0x1d6>
 800639c:	4b25      	ldr	r3, [pc, #148]	; (8006434 <_svfiprintf_r+0x1f4>)
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d125      	bne.n	80063ee <_svfiprintf_r+0x1ae>
 80063a2:	2207      	movs	r2, #7
 80063a4:	9b07      	ldr	r3, [sp, #28]
 80063a6:	3307      	adds	r3, #7
 80063a8:	4393      	bics	r3, r2
 80063aa:	3308      	adds	r3, #8
 80063ac:	9307      	str	r3, [sp, #28]
 80063ae:	6963      	ldr	r3, [r4, #20]
 80063b0:	9a04      	ldr	r2, [sp, #16]
 80063b2:	189b      	adds	r3, r3, r2
 80063b4:	6163      	str	r3, [r4, #20]
 80063b6:	e766      	b.n	8006286 <_svfiprintf_r+0x46>
 80063b8:	4343      	muls	r3, r0
 80063ba:	2101      	movs	r1, #1
 80063bc:	189b      	adds	r3, r3, r2
 80063be:	0035      	movs	r5, r6
 80063c0:	e7a6      	b.n	8006310 <_svfiprintf_r+0xd0>
 80063c2:	2301      	movs	r3, #1
 80063c4:	425b      	negs	r3, r3
 80063c6:	e7d0      	b.n	800636a <_svfiprintf_r+0x12a>
 80063c8:	2300      	movs	r3, #0
 80063ca:	200a      	movs	r0, #10
 80063cc:	001a      	movs	r2, r3
 80063ce:	3501      	adds	r5, #1
 80063d0:	6063      	str	r3, [r4, #4]
 80063d2:	7829      	ldrb	r1, [r5, #0]
 80063d4:	1c6e      	adds	r6, r5, #1
 80063d6:	3930      	subs	r1, #48	; 0x30
 80063d8:	2909      	cmp	r1, #9
 80063da:	d903      	bls.n	80063e4 <_svfiprintf_r+0x1a4>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0c5      	beq.n	800636c <_svfiprintf_r+0x12c>
 80063e0:	9209      	str	r2, [sp, #36]	; 0x24
 80063e2:	e7c3      	b.n	800636c <_svfiprintf_r+0x12c>
 80063e4:	4342      	muls	r2, r0
 80063e6:	2301      	movs	r3, #1
 80063e8:	1852      	adds	r2, r2, r1
 80063ea:	0035      	movs	r5, r6
 80063ec:	e7f1      	b.n	80063d2 <_svfiprintf_r+0x192>
 80063ee:	ab07      	add	r3, sp, #28
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	003a      	movs	r2, r7
 80063f4:	4b10      	ldr	r3, [pc, #64]	; (8006438 <_svfiprintf_r+0x1f8>)
 80063f6:	0021      	movs	r1, r4
 80063f8:	9803      	ldr	r0, [sp, #12]
 80063fa:	e000      	b.n	80063fe <_svfiprintf_r+0x1be>
 80063fc:	bf00      	nop
 80063fe:	9004      	str	r0, [sp, #16]
 8006400:	9b04      	ldr	r3, [sp, #16]
 8006402:	3301      	adds	r3, #1
 8006404:	d1d3      	bne.n	80063ae <_svfiprintf_r+0x16e>
 8006406:	89bb      	ldrh	r3, [r7, #12]
 8006408:	980d      	ldr	r0, [sp, #52]	; 0x34
 800640a:	065b      	lsls	r3, r3, #25
 800640c:	d400      	bmi.n	8006410 <_svfiprintf_r+0x1d0>
 800640e:	e72e      	b.n	800626e <_svfiprintf_r+0x2e>
 8006410:	2001      	movs	r0, #1
 8006412:	4240      	negs	r0, r0
 8006414:	e72b      	b.n	800626e <_svfiprintf_r+0x2e>
 8006416:	ab07      	add	r3, sp, #28
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	003a      	movs	r2, r7
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <_svfiprintf_r+0x1f8>)
 800641e:	0021      	movs	r1, r4
 8006420:	9803      	ldr	r0, [sp, #12]
 8006422:	f000 f879 	bl	8006518 <_printf_i>
 8006426:	e7ea      	b.n	80063fe <_svfiprintf_r+0x1be>
 8006428:	080077f7 	.word	0x080077f7
 800642c:	080077fd 	.word	0x080077fd
 8006430:	08007801 	.word	0x08007801
 8006434:	00000000 	.word	0x00000000
 8006438:	0800617d 	.word	0x0800617d

0800643c <_printf_common>:
 800643c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800643e:	0015      	movs	r5, r2
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	688a      	ldr	r2, [r1, #8]
 8006444:	690b      	ldr	r3, [r1, #16]
 8006446:	9000      	str	r0, [sp, #0]
 8006448:	000c      	movs	r4, r1
 800644a:	4293      	cmp	r3, r2
 800644c:	da00      	bge.n	8006450 <_printf_common+0x14>
 800644e:	0013      	movs	r3, r2
 8006450:	0022      	movs	r2, r4
 8006452:	602b      	str	r3, [r5, #0]
 8006454:	3243      	adds	r2, #67	; 0x43
 8006456:	7812      	ldrb	r2, [r2, #0]
 8006458:	2a00      	cmp	r2, #0
 800645a:	d001      	beq.n	8006460 <_printf_common+0x24>
 800645c:	3301      	adds	r3, #1
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	069b      	lsls	r3, r3, #26
 8006464:	d502      	bpl.n	800646c <_printf_common+0x30>
 8006466:	682b      	ldr	r3, [r5, #0]
 8006468:	3302      	adds	r3, #2
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	2706      	movs	r7, #6
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	401f      	ands	r7, r3
 8006472:	d027      	beq.n	80064c4 <_printf_common+0x88>
 8006474:	0023      	movs	r3, r4
 8006476:	3343      	adds	r3, #67	; 0x43
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	1e5a      	subs	r2, r3, #1
 800647c:	4193      	sbcs	r3, r2
 800647e:	6822      	ldr	r2, [r4, #0]
 8006480:	0692      	lsls	r2, r2, #26
 8006482:	d430      	bmi.n	80064e6 <_printf_common+0xaa>
 8006484:	0022      	movs	r2, r4
 8006486:	9901      	ldr	r1, [sp, #4]
 8006488:	3243      	adds	r2, #67	; 0x43
 800648a:	9800      	ldr	r0, [sp, #0]
 800648c:	9e08      	ldr	r6, [sp, #32]
 800648e:	47b0      	blx	r6
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d025      	beq.n	80064e0 <_printf_common+0xa4>
 8006494:	2306      	movs	r3, #6
 8006496:	6820      	ldr	r0, [r4, #0]
 8006498:	682a      	ldr	r2, [r5, #0]
 800649a:	68e1      	ldr	r1, [r4, #12]
 800649c:	4003      	ands	r3, r0
 800649e:	2500      	movs	r5, #0
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d103      	bne.n	80064ac <_printf_common+0x70>
 80064a4:	1a8d      	subs	r5, r1, r2
 80064a6:	43eb      	mvns	r3, r5
 80064a8:	17db      	asrs	r3, r3, #31
 80064aa:	401d      	ands	r5, r3
 80064ac:	68a3      	ldr	r3, [r4, #8]
 80064ae:	6922      	ldr	r2, [r4, #16]
 80064b0:	4293      	cmp	r3, r2
 80064b2:	dd01      	ble.n	80064b8 <_printf_common+0x7c>
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	18ed      	adds	r5, r5, r3
 80064b8:	2700      	movs	r7, #0
 80064ba:	42bd      	cmp	r5, r7
 80064bc:	d120      	bne.n	8006500 <_printf_common+0xc4>
 80064be:	2000      	movs	r0, #0
 80064c0:	e010      	b.n	80064e4 <_printf_common+0xa8>
 80064c2:	3701      	adds	r7, #1
 80064c4:	68e3      	ldr	r3, [r4, #12]
 80064c6:	682a      	ldr	r2, [r5, #0]
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	42bb      	cmp	r3, r7
 80064cc:	ddd2      	ble.n	8006474 <_printf_common+0x38>
 80064ce:	0022      	movs	r2, r4
 80064d0:	2301      	movs	r3, #1
 80064d2:	3219      	adds	r2, #25
 80064d4:	9901      	ldr	r1, [sp, #4]
 80064d6:	9800      	ldr	r0, [sp, #0]
 80064d8:	9e08      	ldr	r6, [sp, #32]
 80064da:	47b0      	blx	r6
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d1f0      	bne.n	80064c2 <_printf_common+0x86>
 80064e0:	2001      	movs	r0, #1
 80064e2:	4240      	negs	r0, r0
 80064e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064e6:	2030      	movs	r0, #48	; 0x30
 80064e8:	18e1      	adds	r1, r4, r3
 80064ea:	3143      	adds	r1, #67	; 0x43
 80064ec:	7008      	strb	r0, [r1, #0]
 80064ee:	0021      	movs	r1, r4
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	3145      	adds	r1, #69	; 0x45
 80064f4:	7809      	ldrb	r1, [r1, #0]
 80064f6:	18a2      	adds	r2, r4, r2
 80064f8:	3243      	adds	r2, #67	; 0x43
 80064fa:	3302      	adds	r3, #2
 80064fc:	7011      	strb	r1, [r2, #0]
 80064fe:	e7c1      	b.n	8006484 <_printf_common+0x48>
 8006500:	0022      	movs	r2, r4
 8006502:	2301      	movs	r3, #1
 8006504:	321a      	adds	r2, #26
 8006506:	9901      	ldr	r1, [sp, #4]
 8006508:	9800      	ldr	r0, [sp, #0]
 800650a:	9e08      	ldr	r6, [sp, #32]
 800650c:	47b0      	blx	r6
 800650e:	1c43      	adds	r3, r0, #1
 8006510:	d0e6      	beq.n	80064e0 <_printf_common+0xa4>
 8006512:	3701      	adds	r7, #1
 8006514:	e7d1      	b.n	80064ba <_printf_common+0x7e>
	...

08006518 <_printf_i>:
 8006518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651a:	b089      	sub	sp, #36	; 0x24
 800651c:	9204      	str	r2, [sp, #16]
 800651e:	000a      	movs	r2, r1
 8006520:	3243      	adds	r2, #67	; 0x43
 8006522:	9305      	str	r3, [sp, #20]
 8006524:	9003      	str	r0, [sp, #12]
 8006526:	9202      	str	r2, [sp, #8]
 8006528:	7e0a      	ldrb	r2, [r1, #24]
 800652a:	000c      	movs	r4, r1
 800652c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800652e:	2a6e      	cmp	r2, #110	; 0x6e
 8006530:	d100      	bne.n	8006534 <_printf_i+0x1c>
 8006532:	e086      	b.n	8006642 <_printf_i+0x12a>
 8006534:	d81f      	bhi.n	8006576 <_printf_i+0x5e>
 8006536:	2a63      	cmp	r2, #99	; 0x63
 8006538:	d033      	beq.n	80065a2 <_printf_i+0x8a>
 800653a:	d808      	bhi.n	800654e <_printf_i+0x36>
 800653c:	2a00      	cmp	r2, #0
 800653e:	d100      	bne.n	8006542 <_printf_i+0x2a>
 8006540:	e08c      	b.n	800665c <_printf_i+0x144>
 8006542:	2a58      	cmp	r2, #88	; 0x58
 8006544:	d04d      	beq.n	80065e2 <_printf_i+0xca>
 8006546:	0025      	movs	r5, r4
 8006548:	3542      	adds	r5, #66	; 0x42
 800654a:	702a      	strb	r2, [r5, #0]
 800654c:	e030      	b.n	80065b0 <_printf_i+0x98>
 800654e:	2a64      	cmp	r2, #100	; 0x64
 8006550:	d001      	beq.n	8006556 <_printf_i+0x3e>
 8006552:	2a69      	cmp	r2, #105	; 0x69
 8006554:	d1f7      	bne.n	8006546 <_printf_i+0x2e>
 8006556:	6819      	ldr	r1, [r3, #0]
 8006558:	6825      	ldr	r5, [r4, #0]
 800655a:	1d0a      	adds	r2, r1, #4
 800655c:	0628      	lsls	r0, r5, #24
 800655e:	d529      	bpl.n	80065b4 <_printf_i+0x9c>
 8006560:	6808      	ldr	r0, [r1, #0]
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	2800      	cmp	r0, #0
 8006566:	da03      	bge.n	8006570 <_printf_i+0x58>
 8006568:	232d      	movs	r3, #45	; 0x2d
 800656a:	9a02      	ldr	r2, [sp, #8]
 800656c:	4240      	negs	r0, r0
 800656e:	7013      	strb	r3, [r2, #0]
 8006570:	4e6b      	ldr	r6, [pc, #428]	; (8006720 <_printf_i+0x208>)
 8006572:	270a      	movs	r7, #10
 8006574:	e04f      	b.n	8006616 <_printf_i+0xfe>
 8006576:	2a73      	cmp	r2, #115	; 0x73
 8006578:	d074      	beq.n	8006664 <_printf_i+0x14c>
 800657a:	d808      	bhi.n	800658e <_printf_i+0x76>
 800657c:	2a6f      	cmp	r2, #111	; 0x6f
 800657e:	d01f      	beq.n	80065c0 <_printf_i+0xa8>
 8006580:	2a70      	cmp	r2, #112	; 0x70
 8006582:	d1e0      	bne.n	8006546 <_printf_i+0x2e>
 8006584:	2220      	movs	r2, #32
 8006586:	6809      	ldr	r1, [r1, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	6022      	str	r2, [r4, #0]
 800658c:	e003      	b.n	8006596 <_printf_i+0x7e>
 800658e:	2a75      	cmp	r2, #117	; 0x75
 8006590:	d016      	beq.n	80065c0 <_printf_i+0xa8>
 8006592:	2a78      	cmp	r2, #120	; 0x78
 8006594:	d1d7      	bne.n	8006546 <_printf_i+0x2e>
 8006596:	0022      	movs	r2, r4
 8006598:	2178      	movs	r1, #120	; 0x78
 800659a:	3245      	adds	r2, #69	; 0x45
 800659c:	7011      	strb	r1, [r2, #0]
 800659e:	4e61      	ldr	r6, [pc, #388]	; (8006724 <_printf_i+0x20c>)
 80065a0:	e022      	b.n	80065e8 <_printf_i+0xd0>
 80065a2:	0025      	movs	r5, r4
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	3542      	adds	r5, #66	; 0x42
 80065a8:	1d11      	adds	r1, r2, #4
 80065aa:	6019      	str	r1, [r3, #0]
 80065ac:	6813      	ldr	r3, [r2, #0]
 80065ae:	702b      	strb	r3, [r5, #0]
 80065b0:	2301      	movs	r3, #1
 80065b2:	e065      	b.n	8006680 <_printf_i+0x168>
 80065b4:	6808      	ldr	r0, [r1, #0]
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	0669      	lsls	r1, r5, #25
 80065ba:	d5d3      	bpl.n	8006564 <_printf_i+0x4c>
 80065bc:	b200      	sxth	r0, r0
 80065be:	e7d1      	b.n	8006564 <_printf_i+0x4c>
 80065c0:	6819      	ldr	r1, [r3, #0]
 80065c2:	6825      	ldr	r5, [r4, #0]
 80065c4:	1d08      	adds	r0, r1, #4
 80065c6:	6018      	str	r0, [r3, #0]
 80065c8:	6808      	ldr	r0, [r1, #0]
 80065ca:	062e      	lsls	r6, r5, #24
 80065cc:	d505      	bpl.n	80065da <_printf_i+0xc2>
 80065ce:	4e54      	ldr	r6, [pc, #336]	; (8006720 <_printf_i+0x208>)
 80065d0:	2708      	movs	r7, #8
 80065d2:	2a6f      	cmp	r2, #111	; 0x6f
 80065d4:	d01b      	beq.n	800660e <_printf_i+0xf6>
 80065d6:	270a      	movs	r7, #10
 80065d8:	e019      	b.n	800660e <_printf_i+0xf6>
 80065da:	066d      	lsls	r5, r5, #25
 80065dc:	d5f7      	bpl.n	80065ce <_printf_i+0xb6>
 80065de:	b280      	uxth	r0, r0
 80065e0:	e7f5      	b.n	80065ce <_printf_i+0xb6>
 80065e2:	3145      	adds	r1, #69	; 0x45
 80065e4:	4e4e      	ldr	r6, [pc, #312]	; (8006720 <_printf_i+0x208>)
 80065e6:	700a      	strb	r2, [r1, #0]
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	1d01      	adds	r1, r0, #4
 80065ee:	6800      	ldr	r0, [r0, #0]
 80065f0:	6019      	str	r1, [r3, #0]
 80065f2:	0615      	lsls	r5, r2, #24
 80065f4:	d521      	bpl.n	800663a <_printf_i+0x122>
 80065f6:	07d3      	lsls	r3, r2, #31
 80065f8:	d502      	bpl.n	8006600 <_printf_i+0xe8>
 80065fa:	2320      	movs	r3, #32
 80065fc:	431a      	orrs	r2, r3
 80065fe:	6022      	str	r2, [r4, #0]
 8006600:	2710      	movs	r7, #16
 8006602:	2800      	cmp	r0, #0
 8006604:	d103      	bne.n	800660e <_printf_i+0xf6>
 8006606:	2320      	movs	r3, #32
 8006608:	6822      	ldr	r2, [r4, #0]
 800660a:	439a      	bics	r2, r3
 800660c:	6022      	str	r2, [r4, #0]
 800660e:	0023      	movs	r3, r4
 8006610:	2200      	movs	r2, #0
 8006612:	3343      	adds	r3, #67	; 0x43
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	6863      	ldr	r3, [r4, #4]
 8006618:	60a3      	str	r3, [r4, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	db58      	blt.n	80066d0 <_printf_i+0x1b8>
 800661e:	2204      	movs	r2, #4
 8006620:	6821      	ldr	r1, [r4, #0]
 8006622:	4391      	bics	r1, r2
 8006624:	6021      	str	r1, [r4, #0]
 8006626:	2800      	cmp	r0, #0
 8006628:	d154      	bne.n	80066d4 <_printf_i+0x1bc>
 800662a:	9d02      	ldr	r5, [sp, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d05a      	beq.n	80066e6 <_printf_i+0x1ce>
 8006630:	0025      	movs	r5, r4
 8006632:	7833      	ldrb	r3, [r6, #0]
 8006634:	3542      	adds	r5, #66	; 0x42
 8006636:	702b      	strb	r3, [r5, #0]
 8006638:	e055      	b.n	80066e6 <_printf_i+0x1ce>
 800663a:	0655      	lsls	r5, r2, #25
 800663c:	d5db      	bpl.n	80065f6 <_printf_i+0xde>
 800663e:	b280      	uxth	r0, r0
 8006640:	e7d9      	b.n	80065f6 <_printf_i+0xde>
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	680d      	ldr	r5, [r1, #0]
 8006646:	1d10      	adds	r0, r2, #4
 8006648:	6949      	ldr	r1, [r1, #20]
 800664a:	6018      	str	r0, [r3, #0]
 800664c:	6813      	ldr	r3, [r2, #0]
 800664e:	062e      	lsls	r6, r5, #24
 8006650:	d501      	bpl.n	8006656 <_printf_i+0x13e>
 8006652:	6019      	str	r1, [r3, #0]
 8006654:	e002      	b.n	800665c <_printf_i+0x144>
 8006656:	066d      	lsls	r5, r5, #25
 8006658:	d5fb      	bpl.n	8006652 <_printf_i+0x13a>
 800665a:	8019      	strh	r1, [r3, #0]
 800665c:	2300      	movs	r3, #0
 800665e:	9d02      	ldr	r5, [sp, #8]
 8006660:	6123      	str	r3, [r4, #16]
 8006662:	e04f      	b.n	8006704 <_printf_i+0x1ec>
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	1d11      	adds	r1, r2, #4
 8006668:	6019      	str	r1, [r3, #0]
 800666a:	6815      	ldr	r5, [r2, #0]
 800666c:	2100      	movs	r1, #0
 800666e:	6862      	ldr	r2, [r4, #4]
 8006670:	0028      	movs	r0, r5
 8006672:	f000 f859 	bl	8006728 <memchr>
 8006676:	2800      	cmp	r0, #0
 8006678:	d001      	beq.n	800667e <_printf_i+0x166>
 800667a:	1b40      	subs	r0, r0, r5
 800667c:	6060      	str	r0, [r4, #4]
 800667e:	6863      	ldr	r3, [r4, #4]
 8006680:	6123      	str	r3, [r4, #16]
 8006682:	2300      	movs	r3, #0
 8006684:	9a02      	ldr	r2, [sp, #8]
 8006686:	7013      	strb	r3, [r2, #0]
 8006688:	e03c      	b.n	8006704 <_printf_i+0x1ec>
 800668a:	6923      	ldr	r3, [r4, #16]
 800668c:	002a      	movs	r2, r5
 800668e:	9904      	ldr	r1, [sp, #16]
 8006690:	9803      	ldr	r0, [sp, #12]
 8006692:	9d05      	ldr	r5, [sp, #20]
 8006694:	47a8      	blx	r5
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d03e      	beq.n	8006718 <_printf_i+0x200>
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	079b      	lsls	r3, r3, #30
 800669e:	d415      	bmi.n	80066cc <_printf_i+0x1b4>
 80066a0:	9b07      	ldr	r3, [sp, #28]
 80066a2:	68e0      	ldr	r0, [r4, #12]
 80066a4:	4298      	cmp	r0, r3
 80066a6:	da39      	bge.n	800671c <_printf_i+0x204>
 80066a8:	0018      	movs	r0, r3
 80066aa:	e037      	b.n	800671c <_printf_i+0x204>
 80066ac:	0022      	movs	r2, r4
 80066ae:	2301      	movs	r3, #1
 80066b0:	3219      	adds	r2, #25
 80066b2:	9904      	ldr	r1, [sp, #16]
 80066b4:	9803      	ldr	r0, [sp, #12]
 80066b6:	9e05      	ldr	r6, [sp, #20]
 80066b8:	47b0      	blx	r6
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	d02c      	beq.n	8006718 <_printf_i+0x200>
 80066be:	3501      	adds	r5, #1
 80066c0:	68e3      	ldr	r3, [r4, #12]
 80066c2:	9a07      	ldr	r2, [sp, #28]
 80066c4:	1a9b      	subs	r3, r3, r2
 80066c6:	42ab      	cmp	r3, r5
 80066c8:	dcf0      	bgt.n	80066ac <_printf_i+0x194>
 80066ca:	e7e9      	b.n	80066a0 <_printf_i+0x188>
 80066cc:	2500      	movs	r5, #0
 80066ce:	e7f7      	b.n	80066c0 <_printf_i+0x1a8>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d0ad      	beq.n	8006630 <_printf_i+0x118>
 80066d4:	9d02      	ldr	r5, [sp, #8]
 80066d6:	0039      	movs	r1, r7
 80066d8:	f7f9 fdb8 	bl	800024c <__aeabi_uidivmod>
 80066dc:	5c73      	ldrb	r3, [r6, r1]
 80066de:	3d01      	subs	r5, #1
 80066e0:	702b      	strb	r3, [r5, #0]
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d1f7      	bne.n	80066d6 <_printf_i+0x1be>
 80066e6:	2f08      	cmp	r7, #8
 80066e8:	d109      	bne.n	80066fe <_printf_i+0x1e6>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	07db      	lsls	r3, r3, #31
 80066ee:	d506      	bpl.n	80066fe <_printf_i+0x1e6>
 80066f0:	6863      	ldr	r3, [r4, #4]
 80066f2:	6922      	ldr	r2, [r4, #16]
 80066f4:	4293      	cmp	r3, r2
 80066f6:	dc02      	bgt.n	80066fe <_printf_i+0x1e6>
 80066f8:	2330      	movs	r3, #48	; 0x30
 80066fa:	3d01      	subs	r5, #1
 80066fc:	702b      	strb	r3, [r5, #0]
 80066fe:	9b02      	ldr	r3, [sp, #8]
 8006700:	1b5b      	subs	r3, r3, r5
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	9b05      	ldr	r3, [sp, #20]
 8006706:	aa07      	add	r2, sp, #28
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	0021      	movs	r1, r4
 800670c:	9b04      	ldr	r3, [sp, #16]
 800670e:	9803      	ldr	r0, [sp, #12]
 8006710:	f7ff fe94 	bl	800643c <_printf_common>
 8006714:	1c43      	adds	r3, r0, #1
 8006716:	d1b8      	bne.n	800668a <_printf_i+0x172>
 8006718:	2001      	movs	r0, #1
 800671a:	4240      	negs	r0, r0
 800671c:	b009      	add	sp, #36	; 0x24
 800671e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006720:	08007808 	.word	0x08007808
 8006724:	08007819 	.word	0x08007819

08006728 <memchr>:
 8006728:	b2c9      	uxtb	r1, r1
 800672a:	1882      	adds	r2, r0, r2
 800672c:	4290      	cmp	r0, r2
 800672e:	d101      	bne.n	8006734 <memchr+0xc>
 8006730:	2000      	movs	r0, #0
 8006732:	4770      	bx	lr
 8006734:	7803      	ldrb	r3, [r0, #0]
 8006736:	428b      	cmp	r3, r1
 8006738:	d0fb      	beq.n	8006732 <memchr+0xa>
 800673a:	3001      	adds	r0, #1
 800673c:	e7f6      	b.n	800672c <memchr+0x4>

0800673e <memmove>:
 800673e:	b510      	push	{r4, lr}
 8006740:	4288      	cmp	r0, r1
 8006742:	d902      	bls.n	800674a <memmove+0xc>
 8006744:	188b      	adds	r3, r1, r2
 8006746:	4298      	cmp	r0, r3
 8006748:	d303      	bcc.n	8006752 <memmove+0x14>
 800674a:	2300      	movs	r3, #0
 800674c:	e007      	b.n	800675e <memmove+0x20>
 800674e:	5c8b      	ldrb	r3, [r1, r2]
 8006750:	5483      	strb	r3, [r0, r2]
 8006752:	3a01      	subs	r2, #1
 8006754:	d2fb      	bcs.n	800674e <memmove+0x10>
 8006756:	bd10      	pop	{r4, pc}
 8006758:	5ccc      	ldrb	r4, [r1, r3]
 800675a:	54c4      	strb	r4, [r0, r3]
 800675c:	3301      	adds	r3, #1
 800675e:	429a      	cmp	r2, r3
 8006760:	d1fa      	bne.n	8006758 <memmove+0x1a>
 8006762:	e7f8      	b.n	8006756 <memmove+0x18>

08006764 <_free_r>:
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	0005      	movs	r5, r0
 8006768:	2900      	cmp	r1, #0
 800676a:	d010      	beq.n	800678e <_free_r+0x2a>
 800676c:	1f0c      	subs	r4, r1, #4
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	da00      	bge.n	8006776 <_free_r+0x12>
 8006774:	18e4      	adds	r4, r4, r3
 8006776:	0028      	movs	r0, r5
 8006778:	f000 f8d4 	bl	8006924 <__malloc_lock>
 800677c:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <_free_r+0x90>)
 800677e:	6813      	ldr	r3, [r2, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <_free_r+0x2c>
 8006784:	6063      	str	r3, [r4, #4]
 8006786:	6014      	str	r4, [r2, #0]
 8006788:	0028      	movs	r0, r5
 800678a:	f000 f8cc 	bl	8006926 <__malloc_unlock>
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	42a3      	cmp	r3, r4
 8006792:	d909      	bls.n	80067a8 <_free_r+0x44>
 8006794:	6821      	ldr	r1, [r4, #0]
 8006796:	1860      	adds	r0, r4, r1
 8006798:	4283      	cmp	r3, r0
 800679a:	d1f3      	bne.n	8006784 <_free_r+0x20>
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	1841      	adds	r1, r0, r1
 80067a2:	6021      	str	r1, [r4, #0]
 80067a4:	e7ee      	b.n	8006784 <_free_r+0x20>
 80067a6:	0013      	movs	r3, r2
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	2a00      	cmp	r2, #0
 80067ac:	d001      	beq.n	80067b2 <_free_r+0x4e>
 80067ae:	42a2      	cmp	r2, r4
 80067b0:	d9f9      	bls.n	80067a6 <_free_r+0x42>
 80067b2:	6819      	ldr	r1, [r3, #0]
 80067b4:	1858      	adds	r0, r3, r1
 80067b6:	42a0      	cmp	r0, r4
 80067b8:	d10b      	bne.n	80067d2 <_free_r+0x6e>
 80067ba:	6820      	ldr	r0, [r4, #0]
 80067bc:	1809      	adds	r1, r1, r0
 80067be:	1858      	adds	r0, r3, r1
 80067c0:	6019      	str	r1, [r3, #0]
 80067c2:	4282      	cmp	r2, r0
 80067c4:	d1e0      	bne.n	8006788 <_free_r+0x24>
 80067c6:	6810      	ldr	r0, [r2, #0]
 80067c8:	6852      	ldr	r2, [r2, #4]
 80067ca:	1841      	adds	r1, r0, r1
 80067cc:	6019      	str	r1, [r3, #0]
 80067ce:	605a      	str	r2, [r3, #4]
 80067d0:	e7da      	b.n	8006788 <_free_r+0x24>
 80067d2:	42a0      	cmp	r0, r4
 80067d4:	d902      	bls.n	80067dc <_free_r+0x78>
 80067d6:	230c      	movs	r3, #12
 80067d8:	602b      	str	r3, [r5, #0]
 80067da:	e7d5      	b.n	8006788 <_free_r+0x24>
 80067dc:	6821      	ldr	r1, [r4, #0]
 80067de:	1860      	adds	r0, r4, r1
 80067e0:	4282      	cmp	r2, r0
 80067e2:	d103      	bne.n	80067ec <_free_r+0x88>
 80067e4:	6810      	ldr	r0, [r2, #0]
 80067e6:	6852      	ldr	r2, [r2, #4]
 80067e8:	1841      	adds	r1, r0, r1
 80067ea:	6021      	str	r1, [r4, #0]
 80067ec:	6062      	str	r2, [r4, #4]
 80067ee:	605c      	str	r4, [r3, #4]
 80067f0:	e7ca      	b.n	8006788 <_free_r+0x24>
 80067f2:	46c0      	nop			; (mov r8, r8)
 80067f4:	200009b0 	.word	0x200009b0

080067f8 <_malloc_r>:
 80067f8:	2303      	movs	r3, #3
 80067fa:	b570      	push	{r4, r5, r6, lr}
 80067fc:	1ccd      	adds	r5, r1, #3
 80067fe:	439d      	bics	r5, r3
 8006800:	3508      	adds	r5, #8
 8006802:	0006      	movs	r6, r0
 8006804:	2d0c      	cmp	r5, #12
 8006806:	d21e      	bcs.n	8006846 <_malloc_r+0x4e>
 8006808:	250c      	movs	r5, #12
 800680a:	42a9      	cmp	r1, r5
 800680c:	d81d      	bhi.n	800684a <_malloc_r+0x52>
 800680e:	0030      	movs	r0, r6
 8006810:	f000 f888 	bl	8006924 <__malloc_lock>
 8006814:	4a25      	ldr	r2, [pc, #148]	; (80068ac <_malloc_r+0xb4>)
 8006816:	6814      	ldr	r4, [r2, #0]
 8006818:	0021      	movs	r1, r4
 800681a:	2900      	cmp	r1, #0
 800681c:	d119      	bne.n	8006852 <_malloc_r+0x5a>
 800681e:	4c24      	ldr	r4, [pc, #144]	; (80068b0 <_malloc_r+0xb8>)
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d103      	bne.n	800682e <_malloc_r+0x36>
 8006826:	0030      	movs	r0, r6
 8006828:	f000 f86a 	bl	8006900 <_sbrk_r>
 800682c:	6020      	str	r0, [r4, #0]
 800682e:	0029      	movs	r1, r5
 8006830:	0030      	movs	r0, r6
 8006832:	f000 f865 	bl	8006900 <_sbrk_r>
 8006836:	1c43      	adds	r3, r0, #1
 8006838:	d12b      	bne.n	8006892 <_malloc_r+0x9a>
 800683a:	230c      	movs	r3, #12
 800683c:	0030      	movs	r0, r6
 800683e:	6033      	str	r3, [r6, #0]
 8006840:	f000 f871 	bl	8006926 <__malloc_unlock>
 8006844:	e003      	b.n	800684e <_malloc_r+0x56>
 8006846:	2d00      	cmp	r5, #0
 8006848:	dadf      	bge.n	800680a <_malloc_r+0x12>
 800684a:	230c      	movs	r3, #12
 800684c:	6033      	str	r3, [r6, #0]
 800684e:	2000      	movs	r0, #0
 8006850:	bd70      	pop	{r4, r5, r6, pc}
 8006852:	680b      	ldr	r3, [r1, #0]
 8006854:	1b5b      	subs	r3, r3, r5
 8006856:	d419      	bmi.n	800688c <_malloc_r+0x94>
 8006858:	2b0b      	cmp	r3, #11
 800685a:	d903      	bls.n	8006864 <_malloc_r+0x6c>
 800685c:	600b      	str	r3, [r1, #0]
 800685e:	18cc      	adds	r4, r1, r3
 8006860:	6025      	str	r5, [r4, #0]
 8006862:	e003      	b.n	800686c <_malloc_r+0x74>
 8006864:	684b      	ldr	r3, [r1, #4]
 8006866:	428c      	cmp	r4, r1
 8006868:	d10d      	bne.n	8006886 <_malloc_r+0x8e>
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	0030      	movs	r0, r6
 800686e:	f000 f85a 	bl	8006926 <__malloc_unlock>
 8006872:	0020      	movs	r0, r4
 8006874:	2207      	movs	r2, #7
 8006876:	300b      	adds	r0, #11
 8006878:	1d23      	adds	r3, r4, #4
 800687a:	4390      	bics	r0, r2
 800687c:	1ac3      	subs	r3, r0, r3
 800687e:	d0e7      	beq.n	8006850 <_malloc_r+0x58>
 8006880:	425a      	negs	r2, r3
 8006882:	50e2      	str	r2, [r4, r3]
 8006884:	e7e4      	b.n	8006850 <_malloc_r+0x58>
 8006886:	6063      	str	r3, [r4, #4]
 8006888:	000c      	movs	r4, r1
 800688a:	e7ef      	b.n	800686c <_malloc_r+0x74>
 800688c:	000c      	movs	r4, r1
 800688e:	6849      	ldr	r1, [r1, #4]
 8006890:	e7c3      	b.n	800681a <_malloc_r+0x22>
 8006892:	2303      	movs	r3, #3
 8006894:	1cc4      	adds	r4, r0, #3
 8006896:	439c      	bics	r4, r3
 8006898:	42a0      	cmp	r0, r4
 800689a:	d0e1      	beq.n	8006860 <_malloc_r+0x68>
 800689c:	1a21      	subs	r1, r4, r0
 800689e:	0030      	movs	r0, r6
 80068a0:	f000 f82e 	bl	8006900 <_sbrk_r>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d1db      	bne.n	8006860 <_malloc_r+0x68>
 80068a8:	e7c7      	b.n	800683a <_malloc_r+0x42>
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	200009b0 	.word	0x200009b0
 80068b0:	200009b4 	.word	0x200009b4

080068b4 <_realloc_r>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	0007      	movs	r7, r0
 80068b8:	000d      	movs	r5, r1
 80068ba:	0016      	movs	r6, r2
 80068bc:	2900      	cmp	r1, #0
 80068be:	d105      	bne.n	80068cc <_realloc_r+0x18>
 80068c0:	0011      	movs	r1, r2
 80068c2:	f7ff ff99 	bl	80067f8 <_malloc_r>
 80068c6:	0004      	movs	r4, r0
 80068c8:	0020      	movs	r0, r4
 80068ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068cc:	2a00      	cmp	r2, #0
 80068ce:	d103      	bne.n	80068d8 <_realloc_r+0x24>
 80068d0:	f7ff ff48 	bl	8006764 <_free_r>
 80068d4:	0034      	movs	r4, r6
 80068d6:	e7f7      	b.n	80068c8 <_realloc_r+0x14>
 80068d8:	f000 f826 	bl	8006928 <_malloc_usable_size_r>
 80068dc:	002c      	movs	r4, r5
 80068de:	42b0      	cmp	r0, r6
 80068e0:	d2f2      	bcs.n	80068c8 <_realloc_r+0x14>
 80068e2:	0031      	movs	r1, r6
 80068e4:	0038      	movs	r0, r7
 80068e6:	f7ff ff87 	bl	80067f8 <_malloc_r>
 80068ea:	1e04      	subs	r4, r0, #0
 80068ec:	d0ec      	beq.n	80068c8 <_realloc_r+0x14>
 80068ee:	0029      	movs	r1, r5
 80068f0:	0032      	movs	r2, r6
 80068f2:	f7ff fc11 	bl	8006118 <memcpy>
 80068f6:	0029      	movs	r1, r5
 80068f8:	0038      	movs	r0, r7
 80068fa:	f7ff ff33 	bl	8006764 <_free_r>
 80068fe:	e7e3      	b.n	80068c8 <_realloc_r+0x14>

08006900 <_sbrk_r>:
 8006900:	2300      	movs	r3, #0
 8006902:	b570      	push	{r4, r5, r6, lr}
 8006904:	4c06      	ldr	r4, [pc, #24]	; (8006920 <_sbrk_r+0x20>)
 8006906:	0005      	movs	r5, r0
 8006908:	0008      	movs	r0, r1
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	f7fb fcf0 	bl	80022f0 <_sbrk>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	d103      	bne.n	800691c <_sbrk_r+0x1c>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d000      	beq.n	800691c <_sbrk_r+0x1c>
 800691a:	602b      	str	r3, [r5, #0]
 800691c:	bd70      	pop	{r4, r5, r6, pc}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	200013e4 	.word	0x200013e4

08006924 <__malloc_lock>:
 8006924:	4770      	bx	lr

08006926 <__malloc_unlock>:
 8006926:	4770      	bx	lr

08006928 <_malloc_usable_size_r>:
 8006928:	1f0b      	subs	r3, r1, #4
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	1f18      	subs	r0, r3, #4
 800692e:	2b00      	cmp	r3, #0
 8006930:	da01      	bge.n	8006936 <_malloc_usable_size_r+0xe>
 8006932:	580b      	ldr	r3, [r1, r0]
 8006934:	18c0      	adds	r0, r0, r3
 8006936:	4770      	bx	lr

08006938 <_init>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	46c0      	nop			; (mov r8, r8)
 800693c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693e:	bc08      	pop	{r3}
 8006940:	469e      	mov	lr, r3
 8006942:	4770      	bx	lr

08006944 <_fini>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694a:	bc08      	pop	{r3}
 800694c:	469e      	mov	lr, r3
 800694e:	4770      	bx	lr
